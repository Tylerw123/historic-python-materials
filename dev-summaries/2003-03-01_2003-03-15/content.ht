Title: python-dev Summary for 2003-03-01 through 2003-03-15
Sitemap-ignore: yes

<div class="document" id="python-dev-summary-for-2003-03-01-through-2003-03-15">
<h1 class="title">python-dev Summary for 2003-03-01 through 2003-03-15</h1>
<p>This is a summary of traffic on the <a class="reference" href="http://mail.python.org/mailman/listinfo/python-dev">python-dev mailing list</a> from March 1, 2003 through March 15, 2003.  It is intended to inform the wider Python community of on-going developments on the list and to have an archived summary of each thread started on the list.  To comment on anything mentioned here, just post to <a class="reference" href="mailto:python-list&#64;python.org">python-list&#64;python.org</a> or <a class="reference" href="http://groups.google.com/groups?q=comp.lang.python">comp.lang.python</a> with a subject line mentioning what you are discussing. All python-dev members are interested in seeing ideas discussed by the community, so don't hesitate to take a stance on something.  And if all of this really interests you then get involved and join python-dev!</p>
<p>This is the thirteenth summary written by Brett Cannon (same number as my predecessor, Michael Hudson  =).</p>
<p>All summaries are archived at <a class="reference" href="http://www.python.org/dev/summary/">http://www.python.org/dev/summary/</a> .</p>
<p>Please note that this summary is written using <a class="reference" href="http://docutils.sf.net/rst.html">reStructuredText</a> which can be found at <a class="reference" href="http://docutils.sf.net/rst.html">http://docutils.sf.net/rst.html</a> .  Any unfamiliar punctuation is probably markup for <a class="reference" href="http://docutils.sf.net/rst.html">reST</a> (else it is probably regular expression syntax); you can safely ignore it (although I suggest learning reST; its simple and is accepted for PEP markup).  Also, because of the wonders of programs that like to reformat text, I cannot guarantee you will be able to run the text version of this summary through <a class="reference" href="http://docutils.sf.net/">Docutils</a> as-is unless it is from the original text file.</p>
<div class="contents topic" id="contents">
<p class="topic-title"><a name="contents">Contents</a></p>
<ul class="simple">
<li><a class="reference" href="#summary-announcements" id="id3" name="id3">Summary Announcements</a></li>
<li><a class="reference" href="#ridiculously-minor-tweaks" id="id4" name="id4">Ridiculously minor tweaks?</a></li>
<li><a class="reference" href="#capabilities-in-python" id="id5" name="id5">Capabilities in Python</a></li>
<li><a class="reference" href="#quickies" id="id6" name="id6">Quickies</a></li>
</ul>
</div>
<div class="section" id="summary-announcements">
<h1><a class="toc-backref" href="#id3" name="summary-announcements">Summary Announcements</a></h1>
<p>As I am sure most readers of this summary know by now, I am going to <a class="reference" href="http://www.python.org/pycon/">PyCon</a>.  This means that I will be occupied the whole last week of this month.  I suspect python-dev traffic will be light since I believe most of PythonLabs will be at Pycon and thus not working.  =)  But still, I will be occupied myself and thus won't have a chance to work on the summary until I come home.  This means you should expect the next summary to be rather late.  I will get to it, though, at some point.</p>
<p>And in case you haven't yet, register for <a class="reference" href="http://www.python.org/pycon/">PyCon</a>.</p>
</div>
<div class="section" id="ridiculously-minor-tweaks">
<h1><a class="toc-backref" href="#id4" name="ridiculously-minor-tweaks"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033962.html">Ridiculously minor tweaks?</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033996.html">How long is your shopping tuple?</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033981.html">Tuples vs lists</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/034029.html">Re: lists v. tuples</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/034057.html">mutability</a></li>
</ul>
</dd>
</dl>
<p>The original point of this thread was Jeremy Fincher finding out if patches changing lists to tuples where the list was not mutated would be accepted for a miniscule performance boost (the answer was no).  But this wasn't the interesting knowledge that came out of this thread.  This thread led to Guido stating his intended uses of tuples and lists.</p>
<p>And you might be going, &quot;lists are for mutable sequences of objects while tuples are for immutable sequences of objects&quot;.  Well, that is not what Guido thinks of lists and tuples (and don't feel bad if you thought otherwise; Christian Tismer didn't even know what Guido had in mind and Python does not exactly require you to agree with Guido on this).  Turns out that tuples, in Guido's view of the world, are &quot;for heterogeneous data&quot; and &quot;list[s] are for homogeneous data&quot;; &quot;Tuples are <em>not</em> read-only lists&quot;.</p>
<p>Guido spelled out his thinking on this in a later email.  He basically said that he viewed lists as &quot;a sequence of items of type X&quot; while tuples are more like &quot;a sequence of length N with items of type X1, X2, X3, ...&quot;  This makes sense since lists can be sorted while tuples can't; sorting on different types don't necessarily result in a sequence sorted the way you think about it.</p>
<p>And if you are still having issues of wrapping your head around this, just view tuples as structs and lists as arrays as in C.</p>
<p>This thread then led to another topic of <a class="reference" href="http://www.python.org/dev/doc/devel/ref/customization.html#l2h-91">comparisons</a> in Python.  Guido ended up mentioning how he wished == and != worked on all types (with disparate types always being !=) while all of the other comparisons only worked on similar types for the interpreter's default comparison abilities.</p>
<p>This then led to Guido saying how he wished the __cmp__() magic method and the cmp() built-in didn't exist.  This is because there are currently two ways to do comparisons; __cmp__(), and then all of the other rich comparison magic methods.  You can implement the same functionality as __cmp__() using just __lt__() and __eq__().  There can also be an unneeded performance penalty for __cmp__() since (using the previously mentioned way of re-implementing __cmp__()) you might have to do some unneeded comparisons when all you need is __eq__().</p>
<p>This discussion is still going on.</p>
</div>
<div class="section" id="capabilities-in-python">
<h1><a class="toc-backref" href="#id5" name="capabilities-in-python"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033820.html">Capabilities in Python</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033854.html">Capabilities</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033986.html">about candy</a></li>
</ul>
</dd>
</dl>
<p>This is a continuation of a discussion covered in the <a class="reference" href="http://www.python.org/dev/summary/2003-02-16_2003-02-28.html">last summary</a>.</p>
<p>This was <em>definitely</em> the thread from hell for this summary.  =)  It is very long and there was confusion at multiple points over terminology.  You have been warned.</p>
<p>Three things were constantly being discussed in this thread; restricted execution, capabilities, and proxies.  We discuss them in this order.</p>
<p>Restricted execution basically cuts out access to certain objects at execution time.  Currently, if you replace the global __builtins__ with something other then what __builtin__.__dict__ has then you enable restricted execution in Python.  This cuts off access to built-in objects so as to prevent you from circumventing security code by, for instance, importing the <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-sys.html">sys</a> module so you can replace a module's code in sys.modules.  Both capabilities and proxies are worthless without restricted execution since they could be circumvented without it.</p>
<p>Capabilities can be viewed as references or bound methods (but not both at the same time, necessarily).  Security with capabilities is done based on possession; if you hold a reference to an object you can use that object without issue.  The distribution of capabilities becomes the issue with this system.</p>
<p>Proxies are a wrapper around objects that restrict access to the object.  This restriction extends all the way to the core; even core code such as built-ins can't get access to parts of a proxied object that it doesn't want any object to get a hold of.  The trick with proxies is making them secure on their own since they get passed around without worrying who gets it since it is the proxy that provides security, not possession like with capabilities.  Two examples of proxies are <a class="reference" href="http://dev.zope.org/Wikis/DevSite/Projects/ComponentArchitecture/TransitionToSecurityProxies">Zope proxies</a> and <a class="reference" href="http://www.egenix.com/files/python/mxProxy.html">mxProxy</a>.</p>
<p>There was talk of a PEP on all of this but one has not appeared yet; it is currently being worked on by Ben Laurie, though.</p>
</div>
<div class="section" id="quickies">
<h1><a class="toc-backref" href="#id6" name="quickies">Quickies</a></h1>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033805.html">Codec registry</a></dt>
<dd>Gustavo Niemeyer asked someone to review a patch.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033811.html">Changes to logging in CVS</a></dt>
<dd>Vinay Sajip if someone checked-in changes to the <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-logging.html">logging</a> package could be rolled back since it broke compatibility with Python 1.5.2 which the logging package tries to keep (as mentioned in <a class="reference" href="http://www.python.org/dev/peps/pep-0291">PEP 291</a>).  The changes were removed.</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033815.html">__slots__ for metatypes</a></dt>
<dd>Christian Tismer asked Guido and the list to take a look at a patch that would allow meta-types to have a __slots__.  The patch was accepted and applied.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033817.html">new bytecode results</a></dt>
<dd>Damien Morton continues on his quest to get performance boosts from fiddling with the eval loop contained in <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Python/ceval.c">ceval.c</a> and trying out various opcode ideas.  It was pointed out that <a class="reference" href="http://www.zope.org/">pystone</a> is a good indicator of how <a class="reference" href="http://www.zope.org/">Zope</a> will perform on a new box.  It was also stated by Tim Peters that since it is such an atypical test that it helps to make sure any improvements you make <em>really</em> do make an improvement.  Damien also requested more people contribute statistical information to Skip Montanaro's stat server (more info at <a class="reference" href="http://manatee.mojam.com/~skip/python/">http://manatee.mojam.com/~skip/python/</a> ).</dd>
</dl>
<!-- ceval.c:  -->
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033826.html">module extension search order - can it be changed?</a></dt>
<dd>This was discussed in the <a class="reference" href="http://www.python.org/dev/summary/2003-02-16_2003-02-28.html">last summary</a>.  Tim Peters mentioned how he doesn't use <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-linecache.html">linecache</a> often and that it's printing out of date info is not of any great use for tracebacks.</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033823.html">JUMP_IF_X opcodes</a></dt>
<dd>Damien Morton, still on the prowl for better opcodes, suggested introducing opcodes that combined branching opcodes and POP_TOP (which pops the top of the interpreter stack) and did the pop based on the truth value of what was being tested.  Neal Norwitz suggested that instead the branching instructions just always pop the stack.  But then Raymond Hettinger came up with prediction macros that give a great speed boost to loops and conditionals by checking if the next opcode is one that normally follows the current opcode.  If it does, it skips going through the eval loop for the next opcode, thus saving on overhead.
If all of this cool opcode stuff that Damien keeps doing interests you, you will want to read <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Include/opcode.h">opcode.h</a>, <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Python/ceval.c">ceval.c</a>, and learn how to use the <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-dis.html">dis</a> module.</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033826.html">Fun with timeit.py</a></dt>
<dd>A new module named <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Lib/timeit.py">timeit</a> was added to the stdlib at the request of Jim Fulton.  The module times the execution of code snippets.  Guido timed the execution of going through a 'for' loop a million times with interpreters from Python 1.3 up to the current CVS (2.3a2 with patches up to that point).  The result was that CVS was the fastest by a large margin.</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033827.html">Pre-PyCon sprint ideas</a></dt>
<dd>I asked the list to suggest ideas to sprint on at <a class="reference" href="http://www.python.org/pycon/">PyCon</a>.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033828.html">More Zen</a></dt>
<dd>Words of wisdom from Raymond Hettinger that everyone should read.  And if you have never read Raymond's <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-September/028725.html">School of Hard Knocks</a> email you owe yourself to stop whatever you are doing and read it <strong>now</strong>.  I can personally vouch that email is right on the money; I have experienced (or suffered, depending on your view =) every single thing on that list sans writing a PEP (although writing the Summary is starting to be enough writing to be equal =) .</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033837.html">xmlrpclib</a> <span class="classifier-delimiter">:</span> <span class="classifier"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033847.html">xmlrpclib: Apology</a></span></dt>
<dd>Bill Bumgarner, the &quot;hillbilly from the midwest of the US&quot;, asked if the <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-xmlrpclib.html">xmlrpclib</a> module was being maintained.  The lesson was also learned to not call Fredrick Lundh &quot;Fred&quot; on the list since Fred L. Drake, Jr. tends to be associated with the name.  =)</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033832.html">httplib SSLFile broken in CVS</a></dt>
<dd>Something got broken and fixed.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033846.html">super() bug (?)</a></dt>
<dd>Samuele Pedroni thought he may have found a bug with super() but turned out it wasn't.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033857.html">test_popen broken on Win2K</a></dt>
<dd>Win2k does not like quoting of commands when there is no space in the command as Tim Peters discovered.  There were discussions on how to deal with this.  The suggestion of coming up with an sh-like syntax that works on all platforms (like what tcl's exec command has) was suggsted.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033863.html">Change in int() behavior</a></dt>
<dd>David Abrahams rediscovered the joys of the road to which leads to int/long unification when he noticed that <tt class="literal"><span class="pre">isinstance(int(sys.maxint*2),</span> <span class="pre">int)</span></tt> returns False.  This will not be an issue once we are farther down this road.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033868.html">acceptability of asm in python code?</a></dt>
<dd>Damien Morton popped his optimizing head back up on python-dev asking if assembly code was acceptable in the core.  As of right now there is none, but Tim Peters stated that if there was some that had &quot;a huge speedup, on all programs&quot; then it would be considered, although &quot;on the weak end of maybe&quot;.  Christian Tismer (who plays with assembly in <a class="reference" href="http://www.stackless.com/">Stackless</a>) warned against it because it could cause a compiler to not use optimizations.</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033869.html">Internationalizing domain names</a></dt>
<dd>Martin v. Löwis asked someone to look over his patches to implement IDNA (International Domain Names in Applications) which allows non-ASCII characters in domain names.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033882.html">VERSION in getpath.c</a></dt>
<dd>Guido explains to someone what compile variables are used to generate some compile-based search paths.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033905.html">Where is OSS used?</a></dt>
<dd>Greg Ward asked what OSs use <a class="reference" href="http://www.opensound.com/ossfree/">OSS</a>.</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033947.html">Audio devices</a></dt>
<dd>Greg Ward asked for opinions on some API issues for <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Modules/ossaudiodev.c">ossaudiodev</a>.</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033961.html">bsddb3 test errors - are these expected?</a></dt>
<dd>Skip Montanaro asked if some errors from the testing of <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Modules/_bsddb.c">bsddb3</a> on OS X were expected.</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033980.html">os.path.dirname misleading?</a></dt>
<dd>Kevin Altis was surprised to discover that <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-os.path.html#l2h-1443">os.path.dirname</a> would return the tail end of a directory instead of an empty string when the argument to the function was just a directory name.</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033999.html">Care to sprint on the core at PyCon?</a></dt>
<dd>Me asking the world if they wanted to sprint on the core at the pre-PyCon sprint (if you do, read the email for details).</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/034038.html">Iterable sockets?</a></dt>
<dd>Andrew McNamara wished that socket objects were iterable on a per-line basis without having to call makefile().  Guido said he would rather come up with a better abstraction for Python 3 and prototype it in Python 2.4 or later.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/034019.html">More int/long integration issues</a></dt>
<dd>David Abrahams noticed that range() and xrange() couldn't accept a long.  It basically led to Guido stating he considers xrange() a mistake and wished it didn't exist now that we have iterators.  But since getting rid of it would break code he can at least prevent it from gaining abilities.  It also led to Guido mentioning again how he would like to prohibit shadowing of built-ins.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/034062.html">tzset</a></dt>
<dd>A new function, time.tzset(), was added to Python and the tests had failed under Windows.  The tests and the ./configure check were changed as needed.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/033970.html">PyObject_New vs PyObject_NEW</a></dt>
<dd>Lesson of the thread: PyObject_NEW is only to be used in the core; use <a class="reference" href="http://www.python.org/dev/doc/devel/api/allocating-objects.html">PyObject_New()</a> for extension modules.</dd>
</dl>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/034011.html">are NULL checks in Objects/abstract.c really needed?</a></dt>
<dd>... They are not required, but they are there to protect you against poorly written extensions.  Skip Montanaro subsequently suggested a --without-null-checks compile option.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-March/034052.html">PyEval_GetFrame() revisited</a></dt>
<dd>A possible API for manipulating the current frame was still being discussed.</dd>
</dl>
</div>
</div>
<hr class="footer"/>
<div class="footer">
<a class="reference" href="2003-03-01_2003-03-15.txt">View document source</a>.
Generated by <a class="reference" href="http://docutils.sourceforge.net/">Docutils</a> from <a class="reference" href="http://docutils.sourceforge.net/rst.html">reStructuredText</a> source.
</div>

