Title: python-dev Summary from 2003-02-01 through 2003-02-15
Sitemap-ignore: yes

<div class="document" id="python-dev-summary-from-2003-02-01-through-2003-02-15">
<h1 class="title">python-dev Summary from 2003-02-01 through 2003-02-15</h1>
<p>This is a summary of traffic on the <a class="reference" href="http://mail.python.org/mailman/listinfo/python-dev">python-dev mailing list</a> from February 1, 2003 through February 15, 2003.  It is intended to inform the wider Python community of on-going developments on the list that might be of interest to them.  To comment on anything mentioned here, just post to <a class="reference" href="mailto:python-list&#64;python.org">python-list&#64;python.org</a> or <a class="reference" href="http://groups.google.com/groups?q=comp.lang.python">comp.lang.python</a> with a subject line delineating what you are discussing. All python-dev members are interested in seeing ideas discussed by the community, so don't hesitate to take a stance on something.  And if all of this really interests you then get involved and join python-dev!</p>
<p>This is the eleventh summary written by Brett Cannon (and still sane even after over 800 emails for this summary).</p>
<p>All summaries are archived at <a class="reference" href="http://www.python.org/dev/summary/">http://www.python.org/dev/summary/</a> .</p>
<p>Please note that this summary is written using <a class="reference" href="http://docutils.sf.net/rst.html">reStructuredText</a> which can be found at <a class="reference" href="http://docutils.sf.net/rst.html">http://docutils.sf.net/rst.html</a> .  Any unfamiliar punctuation is probably markup for <a class="reference" href="http://docutils.sf.net/rst.html">reST</a> (else it is probably regular expression syntax); you can safely ignore it (although I suggest learning reST; its simple and is accepted for PEP markup).  Also, because of the wonders of programs that like to reformat text, I cannot guarantee you will be able to run the text version of this summary through <a class="reference" href="http://docutils.sf.net/">Docutils</a> as-is unless it is from the original text file.</p>
<div class="contents topic" id="contents">
<p class="topic-title"><a name="contents">Contents</a></p>
<ul class="simple">
<li><a class="reference" href="#summary-announcements" id="id19" name="id19">Summary Announcements</a></li>
<li><a class="reference" href="#acquire-release-functionality" id="id20" name="id20">Acquire/release functionality</a></li>
<li><a class="reference" href="#extended-function-syntax" id="id21" name="id21">Extended Function syntax</a></li>
<li><a class="reference" href="#thunks" id="id22" name="id22">thunks</a></li>
<li><a class="reference" href="#capabilities-in-python" id="id23" name="id23">Capabilities in Python</a></li>
<li><a class="reference" href="#native-code-compiler" id="id24" name="id24">native code compiler?</a></li>
<li><a class="reference" href="#trying-times" id="id25" name="id25">trying times</a></li>
<li><a class="reference" href="#fixed-point-numeric-type" id="id26" name="id26">Fixed-point numeric type</a></li>
<li><a class="reference" href="#passing-floats-to-i-parser-marker" id="id27" name="id27">Passing floats to &quot;i&quot; parser marker</a></li>
<li><a class="reference" href="#python-2-3a1-s-mandatory-use-of-cyclic-gc-causes-existing-applications-to-fail" id="id28" name="id28">Python 2.3a1's mandatory use of cyclic GC causes existing applications to fail</a></li>
<li><a class="reference" href="#pre-pep-mutable-keys-in-dictionaries" id="id29" name="id29">Pre-PEP: Mutable keys in dictionaries</a></li>
<li><a class="reference" href="#trinary-operators" id="id30" name="id30">Trinary Operators</a></li>
<li><a class="reference" href="#for-review-pep-307-extensions-to-the-pickle-protocol" id="id31" name="id31">For review: PEP 307 - Extensions to the pickle protocol</a></li>
<li><a class="reference" href="#unicode-filenames" id="id32" name="id32">Unicode filenames</a></li>
<li><a class="reference" href="#gadflyda-in-core-or-as-add-on-product" id="id33" name="id33">GadflyDA in core? Or as add-on-product?</a></li>
<li><a class="reference" href="#pep-draft-simplified-global-interpreter-lock-acquisition-for-extensions" id="id34" name="id34">PEP Draft: Simplified Global Interpreter Lock acquisition for extensions</a></li>
<li><a class="reference" href="#call-attr-a-method-proposal" id="id35" name="id35">CALL_ATTR, A Method Proposal</a></li>
<li><a class="reference" href="#quickies" id="id36" name="id36">Quickies</a></li>
</ul>
</div>
<div class="section" id="summary-announcements">
<h1><a class="toc-backref" href="#id19" name="summary-announcements">Summary Announcements</a></h1>
<p>I just realized how much regex syntax I use in the summaries.  You might help you read the summaries if you know it.  =)</p>
<p>I renamed the 'Skipped Threads' section that I introduced in the last section to 'Quickies' since they are not really skipped but are just &quot;quickie&quot; summaries that I don't feel warrant a full-blown summary (or I was just feeling lazy  =).</p>
</div>
<div class="section" id="acquire-release-functionality">
<h1><a class="toc-backref" href="#id20" name="acquire-release-functionality"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032752.html">Acquire/release functionality</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032694.html">Extended Function syntax</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032800.html">exec/with thunk-handling proposal</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032775.html">Extended Function syntax (PEP time)</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032900.html">With statement</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033264.html">Pre-PEP: with syntax</a></li>
</ul>
</dd>
</dl>
<p>As part of the massive thread that caused some hoopla on the list about how to try to keep info manageable on the list, a suggested syntax for an acquire/release setup came up.  It basically defines a way to have a method called before the beginning of the execution of a block of code and then a method to be called when the block is finished.  It uses a suggested keyword 'with'.</p>
<p>Read <a class="reference" href="http://www.python.org/dev/peps/pep-0310">PEP 310</a> for all the details (thanks to Paul Moore and Michael Hudson for writing the PEP; I would have gone insane summarizing this!).</p>
</div>
<div class="section" id="extended-function-syntax">
<h1><a class="toc-backref" href="#id21" name="extended-function-syntax"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032694.html">Extended Function syntax</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032763.html">Property syntax</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032767.html">question???</a></li>
</ul>
</dd>
</dl>
<p>Thanks goes to Samuele Pedroni for writing up a technical summary of all of this and sending me a copy.</p>
<p>This whole thread started up over a suggested extended synatax for functions:</p>
<pre class="literal-block">
def fxn(args) [fun1, fun2, ..., funX]:
   ...code...
</pre>
<p>This was to be equivalent to:</p>
<pre class="literal-block">
fxn = funX(...(fun2(fun1(fxn)))...)
</pre>
<p>This came up as a way to make it easier for using things such as property(), classmethod(), and staticmethod() since you could define things as:</p>
<pre class="literal-block">
def fxn(args) [staticmethod]:
    ...code...
</pre>
<p>A variant on all of this that was proposed was:</p>
<pre class="literal-block">
def fxn(args) as fun1, fun2, ..., funX:
     ...code...
</pre>
<p>or:</p>
<pre class="literal-block">
def fxn(args) is fun1, fun2, ..., funX:
     ...code...
</pre>
<p>The two proposed syntaxes above were suggested to be made very general so that you could do something like:</p>
<pre class="literal-block">
def fxn(args) as function:
     ...code...
</pre>
<p>It would be difficult and kludgy, though, to make the above syntax work for both function and staticmethod.  And since this was all about how make using property() easier, property-specific suggestions included:</p>
<blockquote>
<dl>
<dt>class klass(object):</dt>
<dd><dl class="first last">
<dt>property prup:</dt>
<dd>...code...</dd>
</dl>
</dd>
</dl>
</blockquote>
<p>or:</p>
<pre class="literal-block">
class klass(object):
    def prup as property:
         ...code...
</pre>
<p>The problem with the former is that it requires turning &quot;property&quot; into a keyword.</p>
<p>None of these are PEPs yet nor have had BDFL pronouncement.</p>
</div>
<div class="section" id="thunks">
<h1><a class="toc-backref" href="#id22" name="thunks"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032828.html">thunks</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032694.html">Extended Function syntax</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032800.html">exec/with thunk-handling proposal</a></li>
</ul>
</dd>
</dl>
<p>Thanks to Samuele Pedroni for providing me a technical summary that I was able to use to help write this summary.</p>
<p>The concept of adding thunks to Python came up through the extended function syntax thread (in case you don't know what a thunk is, you can think of it as a chunk of code that is compiled and ready to use but is not executed until a later time).  Some suggested syntaxes were:</p>
<pre class="literal-block">
lvalue = thunk(args):
    ...code...
</pre>
<p>or:</p>
<pre class="literal-block">
do lvalue = thunk(args):
    ...code...
</pre>
<p>The lvalues would be optional.  Samuele Pedroni suggested of thinking of thunk(args) more like thunk_consumer_maker(args) since the thunk would &quot;be a reification of the
...code... suite, i.e. an object for ...code...&quot;.</p>
<p>As with the extended function syntax, no PEPs have been done nor any BDFL pronouncements.</p>
</div>
<div class="section" id="capabilities-in-python">
<h1><a class="toc-backref" href="#id23" name="capabilities-in-python"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032690.html">Capabilities in Python</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032763.html">Property Syntax</a></li>
</ul>
</dd>
</dl>
<p>Continuation of <a class="reference" href="http://www.python.org/dev/summary/2003-01-16_2003-01-31.html#capabilities-in-python">Capabilities in Python</a> from the <a class="reference" href="http://www.python.org/dev/summary/2003-01-16_2003-01-31.html">last summary</a>.</p>
<p>After comments were made that the way capabilities were described earlier in the thread were strange, Ben Laurie got to the point and said that if he gets &quot;secure bound methods&quot; he will have what he wants.  Going with the ticket analogy that was used earlier, Ben said that he didn't like having an intermediate ticket checker like the proxies used by Zope; the &quot;ticket is the method&quot;.</p>
<p>Jeremy commented on some of Ben and Ka-Ping Yee's comments.  It seems that security code is sprinkled throughout the interpreter; centralizing it would help secure Python.</p>
<p>The thread stopped on python-dev (the emails suggested the discussion was taken off-list) with no specific plans on changes.</p>
</div>
<div class="section" id="native-code-compiler">
<h1><a class="toc-backref" href="#id24" name="native-code-compiler"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032780.html">native code compiler?</a></a></h1>
<p>Ignoring all the emails that were in direct relation in dealing with the whole mini-flame war that this thread started on, it did lead to a bet between Guido and Dan Sugalski over whether <a class="reference" href="http://www.parrotcode.org">Parrot</a> or CPython would run a standard Python benchmark suite the fastest.  The stakes are $10, a round of beer for the winning development team, and a pie in the face of the loser.</p>
<p>Since python-dev's honor is partially at stake, various ideas came up about how to speed up the core.  One idea was to inline built-in functions by giving them their own bytecode.  So, for instance, len() might be inlined in bytecode as BUILTIN_LEN instead of having to bother with a function call to the actual len() code in the core.</p>
<p>Another suggestion was to continue work on namespace access.  These are covered in <a class="reference" href="http://www.python.org/dev/peps/pep-0266">PEP 266</a>, <a class="reference" href="http://www.python.org/dev/peps/pep-0267">PEP 267</a>, and <a class="reference" href="http://www.python.org/dev/peps/pep-0280">PEP 280</a>.  Guido also suggested &quot;not to allow binding <em>new</em> globals <em>if</em> they shadow certain builtins&quot; so as to save on the name lookup.</p>
<p>Skip Montanaro mentioned his <a class="reference" href="http://www.musi-cal.com/~skip/python/spam7/optimizer.html">peephole optimizer</a>.</p>
<p>There was also a mention of <a class="reference" href="http://www.musi-cal.com/~skip/python/rattlesnake20010813.tar.gz">rattlesnake</a>; a register-based VM that Skip started and Neil Schemenauer picked up.</p>
<p>Taking a fresh look at <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Python/ceval.c">PyEval_EvalCodeEx</a> was also mentioned since a great expense is setting up a function call.</p>
</div>
<div class="section" id="trying-times">
<h1><a class="toc-backref" href="#id25" name="trying-times"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032938.html">trying times</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032947.html">Why did Fredrik leave the party?</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033028.html">who uses new language features?</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032994.html">trying times thunks</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032975.html">Shame on us all!</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033056.html">How to troll python-dev</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033062.html">How to lose potential users/developers</a></li>
</ul>
</dd>
</dl>
<p>During the whole with/do/thunk thread and another thread from a disgruntled person who didn't like how the list responded to his email, Samuele Pedroni let the list know that Fredrik Lundh (a.k.a. effbot) had unsubscribed from python-dev, disillusioned with how things had ended up.</p>
<p>There was a suggestion to spin a list off of python-dev that handled &quot;blue-sky&quot; discussions.  This was basically killed because most people who would subscribe to the new list would be subscribed to python-dev and thus would basically a moot point.</p>
<p>There are two things to be learned from this thread.  One is to make sure you change the subject line of an email when you are replying to an email but changing the focus.  The other is to make sure not to say anything in an email that comes off as accusatory.  One of the reasons this whole email thread turned negative was that a statement made in the initial email was received as condescending and questioning the abilities of python-dev when trying to guess as to why something had not been implemented.  It is best to ask why something has not been done then ask and then immediately wager an answer to your own question.</p>
</div>
<div class="section" id="fixed-point-numeric-type">
<h1><a class="toc-backref" href="#id26" name="fixed-point-numeric-type"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032965.html">Fixed-point numeric type</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032947.html">Why did Fredrik leave the party?</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033044.html">FixedPoint and % specifiers.</a></li>
</ul>
</dd>
</dl>
<p>Michael McLay brought up the point that although FixedPoint had received BDFL pronouncement for inclusion into the stdlib, it still had not happened.  It was then pointed out that no one had put the effort into doing the work necessary to make sure that the package was ready to be added.</p>
<p>A discussion then started amongst some people about some details of the package.  There was a discussion of naming of certain methods and such.  One conclusion that was reached before the discussion was taken off-list was that the package's interface should be minimized and kept as simple as possible while still being useful.</p>
</div>
<div class="section" id="passing-floats-to-i-parser-marker">
<h1><a class="toc-backref" href="#id27" name="passing-floats-to-i-parser-marker"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032969.html">Passing floats to &quot;i&quot; parser marker</a></a></h1>
<p>MA Lemburg brought up the question of what the ramifications will be with <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Python/getargs.c">PyArg_Parse()</a> issuing a DeprecationWarning instead of TypeError when a float is passed as an argument where &quot;i&quot; is used as the argument type.  What causes this to not be cut and dry is that floats have an __int__ method that actually loses information so you can't just use int() to do conversions and still have the same value.</p>
<p>Guido said that, in hindsight, there should have been a function that converts an int-like objects to real ints and another to convert floats to ints; this separates conversions that might lose information.  He also said that eventually &quot;i&quot; will raise a TypeError when less code will be broken by this behavior.</p>
<p>The history of how the &quot;i&quot; argument marker was given.  Apparently, way back when, someone said that &quot;i&quot; should not only accept true ints as it did in its first incarnation.  So having it use __int__ was added.  Unfortunately no one realized that float implemented __int__ and obviously floats for things such as indexing are not reasonable.  Raising a warning is a step towards eliminating this wart.</p>
<p>The acronym YAWTM (You Are Worrying Too Much) and its snarky younger brother YADWTM (You are DEFINITELY Worrying Too Much) were also brought into this world in this thread.</p>
</div>
<div class="section" id="python-2-3a1-s-mandatory-use-of-cyclic-gc-causes-existing-applications-to-fail">
<h1><a class="toc-backref" href="#id28" name="python-2-3a1-s-mandatory-use-of-cyclic-gc-causes-existing-applications-to-fail"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033020.html">Python 2.3a1's mandatory use of cyclic GC causes existing applications to fail</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033115.html">__slots__</a></li>
</ul>
</dd>
</dl>
<p>Robert Ledwith wished that Python 2.3 would support the --without-cycle-gc compile option that is scheduled to be eliminated; objects would have a smaller footprint and was faster.</p>
<p>The reason the option was removed in the first place was that the code for the trashcan (handles the deallocation of objects) &quot;is nearly obvious when we can rely on gc being there&quot;.  With GC turned off extension modules cannot use the trashcan without editing the source of Python itself.</p>
<p>Christian Tismer (who wrote the trashcan code) said that it could actually choose whether or not to take in an object based on its type.  So what could happen is there could be a non-GC type that would cause the object to not even interact the trashcan and thus not complicate the code.  The leading idea was to have a nogcobject that acted as the &quot;true&quot; root object which 'object' inheriting from nogcobject while causing GC to be used.</p>
<p>It was also pointed out that __slots__ saves a lot of space on objects when used.  It was then suggested that you be able to specify the type of each thing in __slots__ since that would save even more space when the type is a simple one.  Guido said that it seemed a new name would be needed for this attribute.  He also said that the idea allowing you to specify the order of the objects was good.</p>
</div>
<div class="section" id="pre-pep-mutable-keys-in-dictionaries">
<h1><a class="toc-backref" href="#id29" name="pre-pep-mutable-keys-in-dictionaries"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033043.html">Pre-PEP: Mutable keys in dictionaries</a></a></h1>
<p>Just van Rossum posted a rough PEP proposing a new protocol to allow mutable objects as keys in dictionaries.  His suggestion was that if an object was mutable the dictionary's __setitem__() would call the key's __immutable_copy__() and use that as the key.  The dict's __contains__()  would use __temporary_immutable__() from the object (this is needed so as to return something that defines __eq__() and __hash__() in order to be able to do the comparison against other keys).  Just claimed that putting this in 'would add no overhead for the &quot;normal&quot; case (when keys _are_ directly hashable)'.</p>
<p>The question of whether this would be thread-safe was raised.  Just said it would be for Python code thanks &quot;to the wonders of the Global Interpreter Lock&quot;.</p>
<p>Guido responded that he didn't think implementing this would have no performance hit.  If anything, he thought that it &quot;may reduce code locality and hence cause the code to miss the cache more often than before&quot;.  He suggested just coming up with a subclass of dict that implemented this.  That was not an option, though, because the entire reason for this was to make dicts work more easily with <a class="reference" href="http://pyobjc.sf.net/">PyObjC</a> and thus would need to be built in.  So Guido ended up asking Just to implement it and benchmark it to see what kind of hit was taken.</p>
</div>
<div class="section" id="trinary-operators">
<h1><a class="toc-backref" href="#id30" name="trinary-operators"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033061.html">Trinary Operators</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033201.html">Quantifiers</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033207.html">vox populii illiterati</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033263.html">Vote-Pop</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033178.html">For review: PEP 308 - If-then-else expression</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033234.html">PEP 308</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033318.html">Update to PEP308:  if-then-else expression</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033336.html">some data on the debate</a></li>
</ul>
</dd>
</dl>
<p>A thread on <a class="reference" href="http://groups.google.com/groups?q=comp.lang.python">comp.lang.python</a> sprung up about adding a ternary operator to Python (yes, the title says &quot;Trinary Operators&quot;, but that is apparently not technically correct).  In case you are not a C programmer, the ternary operator can be thought of an if/else statement that acts like an expression (it's the <tt class="literal"><span class="pre">&lt;cond&gt;?&lt;true</span> <span class="pre">stmt&gt;:&lt;false</span> <span class="pre">stmt&gt;</span></tt> syntax from C).  Another way of thinking of it is as an if/else statement that is inlined.</p>
<p>Guido was sick of this debate coming up, so he wrote <a class="reference" href="http://www.python.org/dev/peps/pep-0308">PEP 308</a> on the subject and has left it up to comp.lang.python to argue this one out (he actually explicitly said not to discuss it on python-dev) and decide on the final fate of this idea.  If you have an opinion voice it on comp.lang.python since this will also be used as a test to see if more things should be put on c.l.py for discussion instead of python-dev.</p>
<p>As of this writing, Samuele Pedroni updated the list on posting stats for those of us who don't follow c.l.py.  Two syntactic choices are currently in the running (this is ignoring objections to the whole idea).  One is <tt class="literal"><span class="pre">if</span> <span class="pre">&lt;cond&gt;:</span> <span class="pre">&lt;true</span> <span class="pre">stmt&gt;</span> <span class="pre">else:</span> <span class="pre">&lt;false</span> <span class="pre">stmt&gt;</span></tt> and the other is <tt class="literal"><span class="pre">&lt;cond&gt;</span> <span class="pre">??</span> <span class="pre">&lt;true</span> <span class="pre">stmt&gt;</span> <span class="pre">||</span> <span class="pre">&lt;false</span> <span class="pre">stmt&gt;</span></tt>.</p>
</div>
<div class="section" id="for-review-pep-307-extensions-to-the-pickle-protocol">
<h1><a class="toc-backref" href="#id31" name="for-review-pep-307-extensions-to-the-pickle-protocol"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033182.html">For review: PEP 307 - Extensions to the pickle protocol</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033294.html">pickle me, Elmo?</a></li>
</ul>
</dd>
</dl>
<p><a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-datetime.html">PEP 307</a> has been unleashed upon the world.  Guido and Tim Peters came up with a new pickling protocol (aptly named protocol 2; I am sure it took a lot of Guido's magical pickles to come up with that name).  The reason for doing this was to have the pickle for new-style classes not be so immense (this was brought to the forefront by <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-datetime.html">datetime</a> and the hell that Tim and Guido went through to get it to pickle reasonably).  Everything is backwards compatible since it is a new protocol, so there is no need to panic.  Still interesting in terms of what they are doing, though, so you might want to read it.</p>
<p>Paul DuBois asked if it would be possible at some point to be able to pickle a class or function definition.  Paul was informed that pickling is meant for data only.  Jeremy Hylton, though, has managed to pull something like what Paul wants off in Zope 3 by subclassing Pickler and UnPickler from the <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-pickle.html">pickle</a> module (so doesn't work with <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-cPickle.html">cPickle</a>).</p>
<p>Arne Koewing asked if pickling weak references could be done.  Short answer, no.  Long answer, not unless you want great pain trying to do implement it.</p>
</div>
<div class="section" id="unicode-filenames">
<h1><a class="toc-backref" href="#id32" name="unicode-filenames"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033215.html">Unicode filenames</a></a></h1>
<p>Jack van Rossum was &quot;tempted to set <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Python/bltinmodule.c">Py_FileSystemDefaultEncoding</a> to &quot;utf8&quot; for OSX&quot;.  He tried it and it works well, but he noticed that os.listdir() returns strings and not Unicode objects.  So obviously the question came up as to whether to change this so that it returned Unicode when <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Python/bltinmodule.c">Py_FileSystemDefaultEncoding</a> is set to something that is non-NULL.</p>
<p>The issue is round-trip passing of strings.  If you get something from os.listdir() you would like to be able to pass to file() with no issues.  The question is how to handle this need without breaking backwards-compatibility.</p>
</div>
<div class="section" id="gadflyda-in-core-or-as-add-on-product">
<h1><a class="toc-backref" href="#id33" name="gadflyda-in-core-or-as-add-on-product"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033312.html">GadflyDA in core? Or as add-on-product?</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033343.html">Gadfly in Python core</a></li>
</ul>
</dd>
</dl>
<p>Continuation of <a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-January/032295.html">GadflyDA in core?...</a> from the <a class="reference" href="http://www.python.org/dev/summary/2003-01-16_2003-01-31.html">last summary</a>.</p>
<p>As was summarized before, there was talk of adding <a class="reference" href="http://gadfly.sf.net/">Gadfly</a> to the stdlib.  Two issues with adding it was its license and having <a class="reference" href="http://starship.python.net/crew/aaron_watters/kjbuckets/">kjbuckets</a> as a dependency.  The first one was solved when Aaron Watters said he would be happy to transfer the license to the <a class="reference" href="http://www.python.org/psf/">PSF</a>.  The second is currently being worked on.</p>
<p>Another issue came up, though.  Gadfly is approximately 11,000 lines of Python code (Richard Jones thinks 1,200 lines could be removed by taking out the parser builder).  That is an immense chunk of code with no one stepping forward to be the active maintainer of it.  Without someone willing to make sure the code does not suffer from bit rot there is a chance Gadfly won't be allowed into the stdlib.  If you happen to think you can take on maintenance responsibilities, please step forward and let it be known.</p>
</div>
<div class="section" id="pep-draft-simplified-global-interpreter-lock-acquisition-for-extensions">
<h1><a class="toc-backref" href="#id34" name="pep-draft-simplified-global-interpreter-lock-acquisition-for-extensions"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032958.html">PEP Draft: Simplified Global Interpreter Lock acquisition for extensions</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033311.html">Change definition of Py_END_ALLOW_THREADS?</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033393.html">Updated AutoThreadState pre-PEP</a></li>
</ul>
</dd>
</dl>
<p>In an attempt to make it easier for C code to access the GIL in complicated, threaded situations where knowledge about the state of the Python interpreter is limited, Mark Hammond has come up with a new API that is covered in <a class="reference" href="http://www.python.org/dev/peps/pep-0311">PEP 311</a>.  In essence, Mark has come up with a way to allow external C code to get the GIL to do work with Python code in a threaded environment without having to know too much about the status of the interpreter in regards to threading.</p>
</div>
<div class="section" id="call-attr-a-method-proposal">
<h1><a class="toc-backref" href="#id35" name="call-attr-a-method-proposal"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033410.html">CALL_ATTR, A Method Proposal</a></a></h1>
<p>Glyph Lefkowitz suggested creating a new bytecode instruction for doing method calls since the current setup takes 3 separate bytecode calls and is about 20% slower than a function call according to Glyph.  Guido said he was all for a special bytecode as long as the semantic meaning, in the end, is the same.</p>
<p>Skip Montanaro suggested caching the results of getattr().  Guido said it could only work if the getattr() for each object did the caching.  Glyph clarified, though, that he was not going after caching but just cutting the bytecode instruction count for a method count down 'to mean &quot;call this method&quot; rather than &quot;get this attribute, call the result&quot;'.</p>
</div>
<div class="section" id="quickies">
<h1><a class="toc-backref" href="#id36" name="quickies">Quickies</a></h1>
<dl>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032688.html">Python roadmap</a></dt>
<dd>Roman Suzi asked about the direction of Python.  Led to discussion of shadowing built-ins and Neal Norwitz adding a check to <a class="reference" href="http://pychecker.sf.net/">PyChecker</a> to warn against this.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032727.html">New version of PEP 304</a></dt>
<dd>Single email about <a class="reference" href="http://www.python.org/dev/peps/pep-0304">PEP 304</a> and how it might deal with Windows.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032704.html">disable writing .py[co]</a></dt>
<dd>Clarifies the misunderstanding of how Python handles writing .py[co] files on read-only filesystems and how PEP 304 will allow you to specify not writing the files.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032708.html">Anyone willing to look over a zlib fix?</a></dt>
<dd>Email about a fix for <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-zlib.html">zlib</a> when dealing with huge compressed files.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032733.html">database APIs</a></dt>
<dd>A question about possible <a class="reference" href="http://www.python.org/topics/database/DatabaseAPI-2.0.html">DB 2.0 API</a> helper functions was brought up and moved to the <a class="reference" href="http://www.python.org/sigs/db-sig/">DB-SIG</a>.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032772.html">PEP 42:  sizeof(obj) builtin</a></dt>
<dd>Continuation of a thread from the <a class="reference" href="http://www.python.org/dev/summary/2003-01-16_2003-01-31.html">last summary</a> that basically said 1) writing sizeof() for Python would be <em>extremely</em> difficult, and 2) Java has no API for finding out how much space something takes up.  I was going to put in a snide comment here about Java, but I restrained myself; at least Jython makes Java okay.  =)</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033216.html">Weekly Python Bug/Patch Summary</a></dt>
<dd>Lots of bugs, lots of patches, and MvL is on vacation.  =)</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032804.html">bsddb3 upgrade woes - more gentle transition?</a></dt>
<dd>Skip Montanaro pointed out some people have had issues using <a class="reference" href="http://pybsddb.sourceforge.net/bsddb3.html">bsddb3</a> because it requires using the newest Sleepycat DB format.  Skip scratched his own itch by writing <a class="reference" href="http://www.lysator.liu.se/~sfarmer/">Tools/scripts/{db2pickle,pickle2db}.py</a>.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033077.html">Atomic operations</a></dt>
<dd>An idea of having a keyword to shut down threads so as to guarantee code being executed synchronously.  Led to a link of an article suggesting having a keyword that delayed the raising of exceptions from signals so as to make sure code finished executing without interruption.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032864.html">Idea for avoiding exception masking</a></dt>
<dd>Continuation of a thread summarized in the <a class="reference" href="http://www.python.org/dev/summary/2003-01-16_2003-01-31.html">last summary</a> about how to handle exceptions that would get masked by other exceptions.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032946.html">BUILDEXE erroneously empty on 2.2.2 for Mac OS X?</a></dt>
<dd>Skip Montanaro had problems building on OS X out of the tree on the 2.2 maintenance branch.  Appropriate patches were backported and thus the problem was fixed.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032948.html">Unicode-like objects</a></dt>
<dd>Just van Rossum asked if there was a way to make an object act like a Unicode object.  This turned into the thread <a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/032964.html">Bridging strings from Python to other languages</a> and how to go possibly make strings from OS X's Cocoa API play nicely with Python strings.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033016.html">I have something I'd like to use the farm for.</a></dt>
<dd>Michael Hudson cross-posted to python-dev about how he wanted to use the <a class="reference" href="http://www.lysator.liu.se/~sfarmer/">Snake Farm</a> to test a patch for <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-signal.html#l2h-2249">signal.sigprocmask()</a> to find out what OSs it worked on.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033029.html">Negated hex/oct constants (SF #660455)</a></dt>
<dd>Guido discovered that negating a negative number represented as a hex constant (such as -0xffffffff) is different from a negative hex number with the negation applied to parantheses (such as -(0xffffffff)).  It was decided to leave it since it will be correct in 2.4 and is already this way in 2.2.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033138.html">Deprecating modules after 2.3a1?</a></dt>
<dd>Jack Jansen wanted to know if it was okay to deprecate module even though an alpha for Python 2.3 had gone out.  Guido said it was fine.  Jack also mentioned that Python 2.4 will have no Mac OS9 support.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033159.html">Why is the GIL not in PyInterpreterState?</a></dt>
<dd>Tobias Oberstein asked hwo to go about making sure multiple interpreters in a single process didn't step all over each other because of threading issues.  Was told that Python doesn't have support for something like that but if he could come up with a patch that was good it would probably be accepted.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033179.html">contributing documentation (fwd)</a></dt>
<dd>A paper on the MRO and how it works was posted at <a class="reference" href="http://www.python.org/2.3/mro.html">http://www.python.org/2.3/mro.html</a> ; it's a good paper and easy to read.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033214.html">Unicode source code</a></dt>
<dd>Thanks to Just van Rossum, compile(), eval(), and exec accept Unicode objects.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033242.html">Grzegorz Adam Hankiewicz found a parsing bug in HTMLParser.</a></dt>
<dd>Read the name of the thread to figure this extremely complex discussion was about.  =)</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033253.html">UNREF invalid object</a></dt>
<dd>Today, children, we learned that one should call &quot;PyObject_Del only on the &quot;self&quot; argument to the type's tp_dealloc function&quot;, &quot;which is called <em>by</em> the expansion of Py_DECREF(self)&quot;anyway, so everything should go through Py_DECREF()_.  Now everyone thank Mr. Peters for teaching us this valuable lesson!  &lt;&quot;Thank you, Mr. Peters!&quot;&gt;</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033289.html">bitwise operators and lambdas</a></dt>
<dd>Someone suggested moving bitwise operators to a module and a shorthand for lambda.  The chances of the moving of the bitwise operators happening are about as good as George W. Bush winning the Nobel Peace Prize for his work in Iraq.  The lambda shorthand, though, became <a class="reference" href="http://www.python.org/dev/peps/pep-0312">PEP 312</a>.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033304.html">[Python-checkins] python/dist/src/Python bltinmodule.c,2.276,2.277</a></dt>
<dd>Tim Peters wanted to get rid of all the code for the MPW compiler used for Mac OS9.  Jack Jansen said to wait until after Python 2.3.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033309.html">Adding Japanese Codecs to the distro</a></dt>
<dd>Hye-Shik Chang opened <a class="reference" href="http://python.org/sf/684142">http://python.org/sf/684142</a> to incorporate Korean Codecs into the stdlib.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033321.html">dict &quot;setdefault&quot;. Feaure request or bugfix?</a>: <a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033322.html">lazy evaluation redux</a></dt>
<dd>Someone wanted the second argument to {}.setdefault() to be lazily evaluated which would require special-casing since it would go against how Python works.  The idea of lazy functions as a built-in syntax and special syntax for no-argument lambdas was brought up.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033327.html">[meta] EIBTI: can we acronimize?</a></dt>
<dd>Lalo Martin wants to start shortening &quot;Explicit is better than implicit&quot; as the acronym EIBTI.  I think that it doesn't exist as an acronym until it ends up on acronymfinder.com.  =)</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033339.html">Codecs Data</a></dt>
<dd>Gustavo Niemeyer asked about making the codecs data currently in codecsmodule.c available to all interpreters when multiple ones are launched (currently the codecs are only available to the first interpreter started).  The discussion led to the conclusion that <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/pystate.h">PyInterpreterState</a> should be augmented to store the codecs.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033342.html">str.join, string.join</a></dt>
<dd>Christian Tismer asked if anyone else thought it would be a good idea to turn the join() method on strings into a class method so that the common idiom <tt class="literal"><span class="pre">','.join(lines)</span></tt> would turn into <tt class="literal"><span class="pre">str.join(lines,</span> <span class="pre">',')</span></tt>.  Some people agreed before Guido said that the thread should be moved off of python-dev and over to <a class="reference" href="http://groups.google.com/groups?q=comp.lang.python">comp.lang.python</a>.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033362.html">when is binary mode required for pickle?</a></dt>
<dd>Skip Montanaro wanted to know when he needed to open or save a pickle file in binary mode (the 'b' option for file()).  The answer is that protocol 0 allows you to open a pickle in text mode, but protocols 1 and 2 require it.  So the safe answer is to always use binary mode for pickles.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033367.html">SF CVS down?</a></dt>
<dd>I wondered if the <a class="reference" href="http://www.sf.net/">SourceForge</a> CVS was down or if my connection problems were just me.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033371.html">Overly creative config in socketmodule.c</a></dt>
<dd>Tim Peters discovered a bad configuration in <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Modules/socketmodule.c">socketmodule.c</a> using <tt class="literal"><span class="pre">#if</span> <span class="pre">1</span></tt>.  Neal Norwitz fixed even though he was not the guilty party in writing the bad code.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033380.html">Chancing SF tracker email preferences</a></dt>
<dd>Guido wanted to stop having all follow-up comments posted to <a class="reference" href="http://www.sf.net/">SourceForge</a> mailed to python-bugs-list&#64; or patches&#64; .  He asked if anyone had any objection to this.  So far several people have spoken up and said they liked receiving the emails.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033387.html">import curdir, pardir, sep, pathsep, defpath, from relevant *path modules</a></dt>
<dd>Skip Montanaro that all of the mentioned functions in the subject of this thread were contained in <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Lib/os.py">os.py</a> when in fact they should be in the various os.path modules (such as <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Lib/posixpath.py">posixpath</a>).  Skip moved them and has <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-os.html">os</a> still import them so there is not visible change in the API.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033400.html">PEP-242 Numeric kinds -- disposition</a></dt>
<dd>Paul DuBois asked that <a class="reference" href="http://www.python.org/dev/peps/pep-0242">PEP 242</a> be rejected since it is included with <a class="reference" href="http://www.pfdubois.com/numpy/">Numeric</a> currently and be removed in the next release.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033404.html">Re: [Python-checkins] python/nondist/peps pep-0311.txt,NONE,1.1</a></dt>
<dd>Just van Rossum saying that he does not like the use of &quot;auto&quot; as a prefix as stated as a possibility for <a class="reference" href="http://www.python.org/dev/peps/pep-0311">PEP 311</a>.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033399.html">PEP 308: &quot;then&quot; &quot;else&quot; for deprecating &quot;and&quot; &quot;or&quot; side effects</a></dt>
<dd>Christian Tismer suggested replacing &quot;and&quot; and &quot;or&quot; with &quot;then&quot; and &quot;else&quot; for doing binary short circuit testing (such as <tt class="literal"><span class="pre">arg</span> <span class="pre">=</span> <span class="pre">arg</span> <span class="pre">else</span> <span class="pre">&quot;Default&quot;</span></tt> instead of <tt class="literal"><span class="pre">arg</span> <span class="pre">=</span> <span class="pre">arg</span> <span class="pre">or</span> <span class="pre">&quot;Default&quot;</span></tt>).  Also suggested <tt class="literal"><span class="pre">arg</span> <span class="pre">when</span> <span class="pre">cond1</span> <span class="pre">else</span> <span class="pre">cond2</span></tt> as a possible ternary operator.  Still being tossed around on python-dev.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033423.html">PEP308 alternative syntax: bool method</a></dt>
<dd>Someone suggested adding a method to booleans to act like a ternary operator.  Before the discussion was moved to comp.lang.python as all ternary discussions should be, the point was made that it could not support short circuiting.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033428.html">non-binary operators</a></dt>
<dd>Thread that popped into existence on python-dev part-way through its discussion on comp.lang.python (which is why it died on python-dev quickly) about how ternary operators are different compared to two chained binary operators (like <tt class="literal"><span class="pre">a</span> <span class="pre">&lt;</span> <span class="pre">b</span> <span class="pre">&lt;</span> <span class="pre">c</span></tt>).</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033436.html">Import lock knowledge required!</a></dt>
<dd>Mark Hammond asked for help with dealing with a deadlock with import locking.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033438.html">Changes to logging</a></dt>
<dd>Vinay Sajip said he had patches for the <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-logging.html">logging</a> package ready to go and asked for comments, which he received.</dd>
<dt><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033451.html">execve vulnerability</a> <span class="classifier-delimiter">:</span> <span class="classifier"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2003-February/033458.html">Python execvpe symlink race condition</a></span></dt>
<dd>Someone reported a vulnerability that was fixed since Python 2.2.2.</dd>
</dl>
</div>
</div>
<hr class="footer"/>
<div class="footer">
<a class="reference" href="2003-02-01_2003-02-15.txt">View document source</a>.
Generated by <a class="reference" href="http://docutils.sourceforge.net/">Docutils</a> from <a class="reference" href="http://docutils.sourceforge.net/rst.html">reStructuredText</a> source.
</div>

