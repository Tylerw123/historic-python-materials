Title: python-dev Summary, 2002-11-16 through 2002-11-30
Sitemap-ignore: yes

<div class="document" id="python-dev-summary-2002-11-16-through-2002-11-30">
<h1 class="title">python-dev Summary, 2002-11-16 through 2002-11-30</h1>
<p>This is a summary of traffic on the <a class="reference" href="http://mail.python.org/mailman/listinfo/python-dev">python-dev mailing list</a> between November 16, 2002 and November 30, 2002 (inclusive).  It is intended to inform the wider Python community of on-going developments on the list that might interest the wider Python community.  To comment on anything mentioned here, just post to <a class="reference" href="mailto:python-list&#64;python.org">python-list&#64;python.org</a> or comp.lang.python in the usual way; give your posting a meaningful subject line, and if it's about a PEP, include the PEP number (e.g. Subject: PEP 201 - Lockstep iteration). All python-dev members are interested in seeing ideas discussed by the community, so don't hesitate to take a stance on something.  And if all of this really interests you then get involved and join python-dev!</p>
<p>This is the sixth summary written by Brett Cannon (back in my groove).</p>
<p>All summaries are now archived at <a class="reference" href="http://www.python.org/dev/summary/">http://www.python.org/dev/summary/</a> .</p>
<p>Please note that this summary is written using <a class="reference" href="http://docutils.sf.net/rst.html">reStructuredText</a> which can be found at <a class="reference" href="http://docutils.sf.net/rst.html">http://docutils.sf.net/rst.html</a> .  Any unfamiliar punctuation is probably markup for <a class="reference" href="http://docutils.sf.net/rst.html">reST</a>; you can safely ignore it (although I suggest learning reST; its simple and is accepted for PEP markup).  Also, because of the wonders of programs that like to reformat, I cannot guarantee you will be able to run the text version of this summary through <a class="reference" href="http://docutils.sf.net/">Docutils</a> as-is.  If you want to do that, get an original copy of the text file.</p>
<div class="section" id="summary-announcements">
<h1><a name="summary-announcements">Summary Announcements</a></h1>
<p>Nothing to report to speak of.  Uh, go to <a class="reference" href="http://www.python.org/pycon/">PyCon</a> .  =)</p>
</div>
<div class="section" id="bsddb3-imported">
<h1><a name="bsddb3-imported"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030247.html">bsddb3 imported</a></a></h1>
<p>Martin v. Loewis merged bsddb3 3.4.0 into CVS under the name <tt class="literal"><span class="pre">bsddb</span></tt>.  The old <tt class="literal"><span class="pre">bsddb</span></tt> module is now no longer compiled by default; if it  does get compiled, though, it ends up with the name <tt class="literal"><span class="pre">bsddb185</span></tt>.  Barry Warsaw also requested that the extensive testing suite be incorporated and &quot;run it only with a regrtest -u option&quot;.</p>
<p>Martin wasn't sure how Barry wanted them incorporated, though, since there are multiple files to the test and most testing suites in the stdlib are a single file.  Barry suggested that the testing files be put in a directory with the package and that test_bsddb.py just call the tests in that directory, much like how the email package does it.  They were integrated and some errors and warnings were found that are being dealt with.</p>
<p>It was also agreed upon that development will be moved over to Python so as to keep the module in Python sync'ed up properly and to keep poor Martin from having to import the files into Python's CVS constantly.</p>
</div>
<div class="section" id="licensing-question">
<h1><a name="licensing-question"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030256.html">Licensing question</a></a></h1>
<p>David Abrahams asked about  a licensing issue with <a class="reference" href="http://www.boost.org/libs/python/doc/">Boost.Python</a> (it is a free library that &quot;enables seamless interoperability between C++&quot; and Python) and it's modified <a class="reference" href="http://www.python.org/psf/">Python.h</a> file that it uses.  Originally there was no license at the top of that file, but that does not work for some corporations using Boost.  So David stuck his own license at the top and asked if this is the right thing to do.</p>
<p>Guido asked him to provide the <a class="reference" href="http://www.python.org/psf/">PSF</a> <a class="reference" href="http://www.python.org/2.2.2/license.html">license</a> at the top of the file and to mention what changes he made.  The copyright had been added to the file for Python 2.2.2.</p>
</div>
<div class="section" id="re-pynumber-check">
<h1><a name="re-pynumber-check"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030236.html">Re: PyNumber_Check()</a></a></h1>
<p>M.A. Lemburg noticed that PyNumber_Check()'s semantics on what will cause it to return had changed.  He  asked if it should check whether one of &quot;nb_int, nb_long, nb_float is available (in addition to the tp_as_number slot)&quot;.  Guido responded that he would like to see it deprecated.  We got a history lesson of how PyNumber_Check() was written &quot;when the presence or absence of the as_number &quot;extension&quot; to the type object was thought to be useful&quot;.  Regardless, Guido said that testing like this does  not prove something is a &quot;number&quot; and if you wanted to test this way you could do it yourself.</p>
<p>In response, MAL said that perhaps PyNumber_Check() should be changed so that it  returned true for something that is &quot;usable as input to float(), int() or long()&quot;.  Guido said that would be fine &quot;as long as we all agree that that's <em>exactly</em> what they check for, and as long as we agree that there may be overlapping areas&quot; for the various Py*_Check() functions.  Guido later said testing for nb_int, nb_long, and nb_float was fine.</p>
</div>
<div class="section" id="plea-can-modulefinder-py-move-to-the-library">
<h1><a name="plea-can-modulefinder-py-move-to-the-library"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030240.html">Plea: can modulefinder.py move to the library?</a></a></h1>
<p>Just van Rossum wanted to move Freeze's <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Tools/freeze/modulefinder.py">modulefinder.py</a> into the stdlib so that  it can be distributed  with binary releases.  In case you don't know what modulefinder.py does, it attempts to find all pure Python module dependencies for a pure Python module.  In other words, it checks what the module imports and if it is a Python file, and if it is, records that; it repeats this for all modules it finds, creating a listing of modules needed for the module to run.</p>
<p>Guido said that the module needed some work before it could be considered; it had <tt class="literal"><span class="pre">print</span></tt> statements that were unneeded outside of Freeze and it had no documentation.  Just agreed that the documentation needed to be done.  As for the <tt class="literal"><span class="pre">print</span></tt> statements, though, they only come out when <tt class="literal"><span class="pre">debug</span></tt> is set to true; by default it  is  false.  Guido said that was fine and agreed with the removal of the Windows-specific <tt class="literal"><span class="pre">print</span></tt> statements.</p>
<p>Thomas Heller later said in <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030445.html">another thread</a> that <a class="reference" href="http://www.python.org/sf/643711">patch #643711</a> was opened primarily for him and Just to do work in but that everyone was invited to help out.</p>
</div>
<div class="section" id="dictionary-foolishness">
<h1><a name="dictionary-foolishness"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030282.html">Dictionary Foolishness?</a></a></h1>
<p>Raymond Hettinger suggested having &quot;dictionaries support the repetition&quot; to allow one to create a dictionary with enough space as specified by the repetition:</p>
<pre class="literal-block">
&gt;&gt;&gt; [0] * n   # allocate an n-length list
&gt;&gt;&gt; {} * n    # allocate an n-element dictionary
</pre>
<p>Aahz recalled that dictionaries are resized upon adding to a dictionary and they could theoretically grow smaller.  That would seem to possibly limit the usefulness of this idea.  Guido then voted -1 (practically a death wish for an idea unless people clamor for it) saying that it relied too much on &quot;arbitrary magic by side effect&quot;.  He said  if people <em>really</em> wanted this a method could be proposed.</p>
</div>
<div class="section" id="dict-enhancement-idea">
<h1><a name="dict-enhancement-idea"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030290.html">dict() enhancement idea?</a></a></h1>
<p>Just van Rossum suggested overloading the dictionary constructor so that arguments that went to <tt class="literal"><span class="pre">**kwargs</span></tt> would be used to create the dictionary (this can be seen in the &quot;<a class="reference" href="#python-cookbook">Python Cookbook</a>&quot; as recipe 1.2 or online at <a class="reference" href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52313">http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52313</a>).  This is desired because that means cleaner code for creating dicts:</p>
<pre class="literal-block">
&gt;&gt;&gt; dict(pigs='!fly', birds='fly')
</pre>
<p>Barry commented that he  liked it and had something similar in his code for <a class="reference" href="#mailman">Mailman</a> .  Thomas Heller voted +1 for it and also said that he used the idiom.  Raymond Hettinger and myself also voted +1 for it.</p>
<a class="target" id="python-cookbook" name="python-cookbook"></a><a class="target" id="mailman" name="mailman"></a></div>
<div class="section" id="yet-another-string-formatting-proposal">
<h1><a name="yet-another-string-formatting-proposal"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030304.html">Yet another string formatting proposal</a></a></h1>
<p>Oren Tirosh proposed something (read the title to figure out what).  He proposed the following syntax:</p>
<pre class="literal-block">
&gt;&gt;&gt; &quot;\(a) + \(b) = \(a+b)\n&quot; 
&gt;&gt;&gt; r&quot;\(a) + \(b) = \(a+b)\n&quot;.cook()
</pre>
<p>The advantages, according to Oren, are that it would not require introducing the use of a new symbol like <tt class="literal"><span class="pre">$</span></tt>, nor a new string prefix nor a new method.  The <tt class="literal"><span class="pre">.cook()</span></tt> method would be used to evaluate raw strings at a later point; it would draw arguments from the local and global namespace.  The biggest drawback was unfamiliarity for programmers.</p>
<p>Frederik Lundh pointed out that <tt class="literal"><span class="pre">\(</span></tt> is &quot;commonly used to escape parentheses in regular expression strings&quot; (Effbot wrote <a class="reference" href="http://www.python.org/doc/current/lib/module-re.html">re</a> , so he should know).  Oren then said that curly braces could (and pretty will) be used instead.</p>
<p>Michael Chermside likes this design idea, but  thinks the name for <tt class="literal"><span class="pre">.cook()</span></tt> is not that great.  Oren was going for a name that tied into &quot;raw&quot;.  Michael suggested the name <tt class="literal"><span class="pre">.sub()</span></tt> to build off of the two PEPs already in existence covering string formatting (<a class="reference" href="http://www.python.org/dev/peps/pep-0215">PEP 215</a> and <a class="reference" href="http://www.python.org/dev/peps/pep-0292">PEP 292</a> ).</p>
</div>
<div class="section" id="expect-in-python">
<h1><a name="expect-in-python"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030313.html">Expect in python</a></a></h1>
<p>Eric Raymond proposed adding <a class="reference" href="http://pexpect.sf.net/">pexpect</a> to the stdlib when it reaches version 1 (it is currently at 0.94).  His thought was that having functionality like <a class="reference" href="http://expect.nist.gov/">Expect</a> would be a boon for Python and use for system administration.  Eric said  he had been using the module and had no problems with it (Prabhu Ramachandran also said it had worked for him).</p>
<p>David Ascher said that he would like to see a more abstract API to allow it work for things other than character streams.  He also would like to see something work better on Windows.  Eric said that he would not want to hold up this for hopes of getting something better since it already works well for what it does.</p>
<p>But it appears that the creator of pexpect is more than willing to help maintain the module if it makes it into the stdlib.</p>
<p>Zach Weinberg said that he would be willing to put some work into making the <a class="reference" href="http://www.python.org/doc/current/lib/module-pty.html">pty</a> module more portable since pexpect does its thing using pty.</p>
</div>
<div class="section" id="pep-288-generator-attributes">
<h1><a name="pep-288-generator-attributes"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030321.html">PEP 288:  Generator Attributes</a></a></h1>
<p>Raymond Hettinger has revised <a class="reference" href="http://www.python.org/dev/peps/pep-0288">PEP 288</a> with a new proposal on how to pass things into a generator that has already started.  He has asked for comments on the changes, so let him know what you think.</p>
</div>
<div class="section" id="pymem-malloc-was-python-dev-snake-farm">
<h1><a name="pymem-malloc-was-python-dev-snake-farm"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030333.html">PyMem_MALLOC (was [Python-Dev] Snake farm)</a></a></h1>
<p>Continuation of <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029853.html">http://mail.python.org/pipermail/python-dev/2002-November/029853.html</a></p>
<p>There was a possible issue with <tt class="literal"><span class="pre">PyMem_MALLOC()</span></tt> that Marc Recht had discovered on FreeBSD.  It eventually was tracked down to FreeBSD-CURRENT's implementation of <tt class="literal"><span class="pre">malloc()</span></tt>: <tt class="literal"><span class="pre">malloc(0)</span></tt> always return 0x800.  M.A. Lemburg suggested changing a test in the configure script to try to catch when a platform returned an address for <tt class="literal"><span class="pre">malloc(0)</span></tt> and treat it just like when it  would return <tt class="literal"><span class="pre">NULL</span></tt> (<tt class="literal"><span class="pre">NULL</span></tt> can't be blindly returned since that would signal a memory error; returning <tt class="literal"><span class="pre">NULL</span></tt> in a C extension signals an error).  Marc came back with news that C99 says that this is legitimate behavior for <tt class="literal"><span class="pre">malloc()</span></tt> so this could possibly affect other platforms.</p>
<p>Marc suggested that <tt class="literal"><span class="pre">PyMem_MALLOC()</span></tt> just be redefined to <tt class="literal"><span class="pre">n</span> <span class="pre">?</span> <span class="pre">malloc(n)</span> <span class="pre">:</span> <span class="pre">NULL</span></tt>.  Problem is that the <tt class="literal"><span class="pre">NULL</span></tt> issue mentioned above comes into play with this solution.  Tim Peters suggested either <tt class="literal"><span class="pre">malloc(n</span> <span class="pre">||</span> <span class="pre">1)</span></tt> or <tt class="literal"><span class="pre">malloc(n</span> <span class="pre">?</span> <span class="pre">n</span> <span class="pre">:</span> <span class="pre">1)</span></tt> (the former being a Python idiom that doesn't cut it in C).  he does not want to mess with the configure scripts since they have &quot;proven itself too brittle too many times&quot;.  Tim wanted a way to prevent ever calling the function with 0, but Guido couldn't see any way of doing that without an extra jump.</p>
<p>The committed solution is <tt class="literal"><span class="pre">malloc((n)</span> <span class="pre">?</span> <span class="pre">(n)</span> <span class="pre">:</span> <span class="pre">1)</span></tt>.  Easier to just waste one byte then have to deal with the special casing of passing 0.  The extra test was not really a worry since no measurable performance reported by Tim.  Besides, Tim pointed out &quot;this is ideal for a conditional-move instruction, and more architectures are growing that&quot;.</p>
</div>
<div class="section" id="half-baked-proposal-and-in-assignments">
<h1><a name="half-baked-proposal-and-in-assignments"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030349.html">Half-baked proposal: * (and **?) in assignments</a></a></h1>
<p>Gareth McCaughan suggested cutting down one of the separations between parameter passing and assignment by allowing assignment to use arbitrary argument lists:</p>
<pre class="literal-block">
&gt;&gt;&gt; a,b,*c = 1,2,3,4,5  # c == (3, 4, 5)
&gt;&gt;&gt; year, month, day, *dummy = time.localtime()
</pre>
<p>I argued that I didn't like the slightly cluttered look on the left-hand side (LHS) of the assignment.  Martin v. Loewis and I basically ended up saying we wanted to keep assignments clear and concise and that this would not help to keep that.  Steve Holden basically ended up agreeing.</p>
<p>Brian Quinlin, Patrick O'Brien, Nathan Clegg and Timothy Delany liked the idea.  The biggest argument in support was that it would allow for a more functional programming style (and that obviously can be good or bad depending on your P.O.V.; I say bad  =):</p>
<pre class="literal-block">
&gt;&gt;&gt; car,*cdr = [head, t1, t2, t3]  # car == head, cdr == (t1, t2, t3)
</pre>
<p>In case you don't have functional programming (especially Lisp/Scheme) experience, the basic data structure in Lisp-like language is a list and the most common way to manipulate those lists is with the functions <tt class="literal"><span class="pre">car</span></tt> and <tt class="literal"><span class="pre">cdr</span></tt>.  <tt class="literal"><span class="pre">car</span></tt> returns the &quot;head&quot;, or front, of the list; <tt class="literal"><span class="pre">cdr</span></tt> returns the &quot;tail&quot;, or everything but the head, of the list.  This allows for simple recursion since you just pass the <tt class="literal"><span class="pre">cdr</span></tt> of a list on the recursive call after having dealt with the head of the list.</p>
<p>There was also the suggestion of allowing the arbitrary assignment variable to be anywhere in the list of assignment variables:</p>
<pre class="literal-block">
&gt;&gt;&gt; a,*b,c = 1,2,3,4,5  # a == 1, b == (2, 3, 4), c == 5
</pre>
<p>To prove that this was not really needed I wrote a function that took in an iterable and the number of variables to assign to and then returned the proper number iterations on the iterator and then the iterator as the last thing returned.  Alex Martelli of course improved upon it (and also continued to correct my slightly incorrect statements):</p>
<pre class="literal-block">
def peel(iterable, arg_cnt=1):
        &quot;&quot;&quot;Return ``arg_cnt`` values from iterator of ``iterable`` and then the iterator itself.&quot;&quot;&quot;
        iterator = iter(iterable)
        for num in xrange(arg_cnt):
                yield iterator.next()
        yield iterator
</pre>
<p>The idea of a module for the stdlib containing iterator helper functions was suggested by Alex.  One is in progress by Raymond Hettinger.</p>
<p>Armin Rigo suggested having iterators become a type.  That was quickly shot down, although having the suggested iterator helper module contain a class that could be subclassed by iterators was received with positive comments.</p>
<p>The thread ended very quickly after Guido said that he didn't think &quot;that there's a sufficient need to add new syntax&quot;.</p>
</div>
<div class="section" id="from-tuples-to-immutable-dicts">
<h1><a name="from-tuples-to-immutable-dicts"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030358.html">from tuples to immutable dicts</a></a></h1>
<p>Armin Rigo said that he would like to have an immutable type that acted like a dictionary; basically like a struct from C.  Martin v. Loewis agreed on the need, but opposed the idea of adding another built-in type or syntax for such a type; that left something for the stdlib.  Martin suggested something like:</p>
<pre class="literal-block">
&gt;&gt;&gt; struct_seq(name, doc, n_in_sequence, (fields))
</pre>
<p>where <tt class="literal"><span class="pre">field</span></tt> is a bunch of (name, doc) tuples.  What would be returned would be a &quot;thing [that] would be similar to os.stat_result: you [can] call it with the mandatory fields in sequence, and can call it with the optional fields by keyword argument&quot;.</p>
<p>Armin didn't like it since it went against his initial proposal &quot;which was to have a lightweight and declaration-less way to build structures&quot;.  He basically ended up suggesting something along the lines of tuples with keyword arguments.  Martin didn't like it since he didn't see a great use for it.</p>
<p>In the end Armin said to just drop the idea.</p>
</div>
<div class="section" id="urllib-performance-issue-on-freebsd-4-x">
<h1><a name="urllib-performance-issue-on-freebsd-4-x"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030391.html">urllib performance issue on FreeBSD 4.x</a></a></h1>
<p>Andrew MacIntyre brought a thread on python-list to python-dev's attention about urllib performance compared to wget  (wget is used to download web sites and files).  Apparently the used socket is unbuffered instead of using the system default (which was shown to be almost as fast as wget).  The question became why this was done.</p>
<p>The answer (thanks to Martin v. Loewis) was to prevent deadlock.  Apparently under HTTP 1.1 a server can keep a connection open while waiting for the next command.  If the connection was buffered it would block until it read enough to fill the buffer which may never come.</p>
<p>Frederik Lundh suggested that a subclass or option be available that allowed the choosing of unbuffered or not.  Andrew said he would put it on his todo list.</p>
</div>
<div class="section" id="test-failures-on-debian-unstable">
<h1><a name="test-failures-on-debian-unstable"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030384.html">test failures on Debian unstable</a></a></h1>
<p>Failures on the build of Debian's unstable version of Python led to a discussion about how modules are skipped in the testing suite.  <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Lib/test/regrtest.py">Lib/test/regrtest.py</a> keeps a list of tests that are expected to be skipped on various platforms.  Martin v. Loewis doesn't like it because tests such as for the bz2 module are attempted regardless of whether the bz2 library is even installed and yet it is expected to succeed on Linux.  Martin summarized that &quot;For many of the tests that are somtimes skipped, knowing the system does not tell you whether the test will should rightfully be skipped, on that system&quot; since tests are skipped often because a module was not there that needed to be imported for the test.</p>
<p>Tim Peters, on the other hand, likes it.  Since he maintains the Windows distribution from PythonLabs he likes it since it lets him know when new things have been added to Python and might need to be excluded from the Windows distro.  Neil (who pointed out the Debian problems) was able to recognize that the tests that failed were meant to pass under Linux.  Tim admitted he only cared about keeping the mechanism for Windows; he could care less if it is removed for Linux.</p>
<p>Patrick O'Brien chimed in (with Aahz supporting) that the feature is handy since you can easily find out libraries you are missing that you could potentially install.</p>
<p>Guido stepped in and suggested setting up a mechanism that would allow an external table in a file to be used when present instead of the default list of tests to skip.  Don't think anyone has stepped up to implement this.</p>
</div>
<div class="section" id="currently-baking-idea-for-dict-sequpdate-iterable-value-true">
<h1><a name="currently-baking-idea-for-dict-sequpdate-iterable-value-true"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030431.html">Currently baking idea for dict.sequpdate(iterable, value=True)</a></a></h1>
<p>Raymond Hettinger presented &quot;a write-up for a proposed dictionary update method&quot;.  It basically took an iterable and added keys based on the values returned by the iterator with a value as passed in and used  for all new keys.  The rationale was to have a fast way to be able to do membership testing using dict's <tt class="literal"><span class="pre">__contains__</span></tt> or removing duplicates by creating a dict and then outputting the keys using the aptly named <tt class="literal"><span class="pre">.keys()</span></tt>.</p>
<p>Previous objecctions to something like this were about the dict constructor and the <tt class="literal"><span class="pre">sets</span></tt> module.  The ones about the constructor are dealt with by making this a method.  The latter was argued against by saying that the <tt class="literal"><span class="pre">sets</span></tt> module is slow.  Frederik Lundh brought up that we really don't need multiple ways of doing the same thing.  Just van Rossum agreed and said this killed the idea for him.  Guido chimed in and said that the <tt class="literal"><span class="pre">sets</span></tt> module was to help solidify the sets API so that at some point it could be coded in C.</p>
<p>To address the speed complaint Guido suggested limiting the <tt class="literal"><span class="pre">sets</span></tt> module initially to make it faster so that the type won't be held back or unutilized because of its speed.  Tim Peters spoke up, though, and said that the <a class="reference" href="http://spambayes.sf.net/">spambayes</a> project used <tt class="literal"><span class="pre">sets</span></tt> and he didn't have any complaints.  But when major membership testing was needed a dict was used.  And Tim pointed out that in order for any C sets code to be fast it would have to directly use dict's C <tt class="literal"><span class="pre">__contains__</span></tt> code.</p>
<p>What this method should return was brought up by Just.  Some thought <tt class="literal"><span class="pre">None</span></tt> since <tt class="literal"><span class="pre">.update()</span></tt> returns that.  Others said <tt class="literal"><span class="pre">True</span></tt>.  Guido said <tt class="literal"><span class="pre">None</span></tt> since <tt class="literal"><span class="pre">True</span></tt> should only be used  when something is explicitly true.</p>
<p>Making it a class method was also suggested by Just as an easy way to make it like a constructor.  Raymond agreed and changed his proprosal as well as to have the method be named <tt class="literal"><span class="pre">.fromseq()</span></tt>.  But then Walter Dorwald said <tt class="literal"><span class="pre">.fromkeyseq()</span></tt> should be used  since there &quot;is another constructor that creates the dict from a sequence of items&quot;.  Guido voted +1 on that idea.</p>
</div>
<div class="section" id="re-release22-maint-branch-broken">
<h1><a name="re-release22-maint-branch-broken"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030330.html">Re: release22-maint branch broken</a></a></h1>
<p>Tim Rice discovered that trying to build Python from a directory other then where the source was did not work for the Python 2.2.* CVS.  It was all eventually solved and fixed in the CVS branch.  I am mentioning it here in case someone reading this had a similar issue.</p>
</div>
<div class="section" id="dictionary-evaluation-order">
<h1><a name="dictionary-evaluation-order"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030458.html">Dictionary evaluation order</a></a></h1>
<p>Gustavo Niemeyer asked about how to handle code like <tt class="literal"><span class="pre">{f1():f2(),</span> <span class="pre">f3():</span> <span class="pre">f4()}</span></tt> and its execution order as pointed out by <a class="reference" href="http://www.python.org/sf/448679">bug #448679</a> .  As it stood it evaluated in the order of f2, f1, f4, f3.  Apparently Guido once upon a time considered this a bug.</p>
<p>But Guido mentioned that left-to-right evaluation is not always wanted since <tt class="literal"><span class="pre">a</span> <span class="pre">=</span> <span class="pre">{};</span> <span class="pre">a[f1()]</span> <span class="pre">=</span> <span class="pre">f2()</span></tt> would want f2 to evaluate first.  He asked what Jython did.</p>
<p>Finn Bock said that Jython went f1, f2, f3, f4.  In that case Guido didn't see any reason to block the fix.  But Tim Peters brought up the point that the bug was more about the lack of specifics on this in the documentation.  Gustavo said he would make the code fix along with patches to the docs.</p>
<!-- Errata - Paragraph 3 was changed from "...Guido didn't see any reason to fix it" to "...Guido didn't see any reason to *block* the fix". -->
</div>
<div class="section" id="int-long-futurewarning">
<h1><a name="int-long-futurewarning"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030520.html">int/long FutureWarning</a></a></h1>
<p>Mark Hammond asked how the upcoming change in Python 2.4 of hex/oct constants will affect his C extension code and something like <tt class="literal"><span class="pre">PyArg_ParseTuple()</span></tt> (this function takes arguments passed to something and breaks it up into its individual parts since all arguments are passed as tuples in C code).  In case you don't know about the warnings, Python 2.3 warns you that code  like <tt class="literal"><span class="pre">SOMETHING</span> <span class="pre">=</span> <span class="pre">0x80000000</span></tt> could have a different meaning in Python 2.4; most likely it will be treated as a positive long.  You can currently get rid of the warnings by changing the constant into a long by tacking on a <tt class="literal"><span class="pre">L</span></tt> to the end of the number.</p>
<p>Martin v. Loewis that if Mark appended the <tt class="literal"><span class="pre">L</span></tt> to his constants that it would not work for an <tt class="literal"><span class="pre">i</span></tt> argument for <tt class="literal"><span class="pre">PyArg_ParseTuple()</span></tt>.  But Guido stepped up and said that there will be no issue since Python will be changed so that Mark's code will accept the constant as a positive long.  This caused Guido to wonder if the warning could be changed to some other warning that is not normally printed out.</p>
<p>Guido then mentioned that he has &quot;long promised a set of new format codes for PyArg_ParseTuple() to specify taking the lower N bits (for N in 8, 16, 32, 64) and throwing the rest away, without range checks&quot;.  &quot;If
someone else can get to this first, that would be great&quot;.  So someone be nice to Guido and do this for him.  =)</p>
<p>Either way no specific resolution has been reached.  As of right now you can just  live with the warnings, supress the warnings, or change your  constants to longs and hope you are not passing into a C extension function that wants an int.</p>
</div>
<div class="section" id="assigning-to-new-style-class-name">
<h1><a name="assigning-to-new-style-class-name"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030475.html">assigning to new-style-class.__name__</a></a></h1>
<p>Michael Hudson has been working on <a class="reference" href="http://www.python.org/sf/635933">patch #635933</a> to allow for assignment to <tt class="literal"><span class="pre">__name__</span></tt> and <tt class="literal"><span class="pre">__bases__</span></tt> for new-style classes (this was all so that <tt class="literal"><span class="pre">__name__</span></tt> would handle nested classes properly to allow for proper pickling; that thread was called <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029872.html">metaclass insanity</a> ).  He ran into a slight issue with dealing with assigning to <tt class="literal"><span class="pre">__name__</span></tt>.  To get it working, Michael wanted to treat heap and non-heap types differently.  For non-heap types Michael wanted to &quot;everything in tp_name up to the first dot is __module__, the rest is __name__&quot;.  For non-heap types, he wanted to have <tt class="literal"><span class="pre">__module__</span></tt> as &quot;always __dict__['__module__'], __name__ is always tp_name (or rather ((etype*)type)-&gt;name)&quot;.  And as for the issue of if someone is crazy enough to delete the dict key of <tt class="literal"><span class="pre">__module__</span></tt>, Michael said Python wouldn't crash but you probably would not like the outcome of running code.  =)</p>
<p>Guido responded saying that Michael's proposal was acceptable.</p>
<p>But then there was an issue with <tt class="literal"><span class="pre">.mro()</span></tt> after the bases had been rearranged.  Michael worried about what to do when there was a conflict down the intheritence tree.  He thought reverting back to the way things were if there was an issue was best.  This would require keeping around copies of the previous states until the changes propogated all the way through.</p>
<p>Samuele Pedroni stepped in to try to answer this question (Samuele rewrote the MRO code recently and is directly mentioned in <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-October/029230.html">C3 implementation</a> ).  He came up with a possible case where there could be a possible order disagreement if two of the bases of a class had the same bases but one had the order swapped compared to the other (so C has bases of (A, B) and D has bases of (A, B) as well and E had bases (C, D); if C's bases became (B, A), E now has an order disagreement).  He suggested that &quot;the mros of the subclasses should be computed lazily when needed (e.g. on the first - after the changes - dispatch), although this may produce inconsistences and errors at odd times&quot;.</p>
<p>Michael showed that his solution would catch the problem.  But he did not like the idea of lazily evaluating; he wanted a more restrictive solution since this is a new thing.  Michael stated that what he wanted this for was to &quot;to swap out one class for another -- making instances of the old class instances of the new class, which was possible and making subclasses of the old subclasses of the new, which wasn't&quot;.  It also turned out neither  APL nor Dylan allow this kind of thing so Michael is breaking new ground.</p>
<p>Samuele asked about when the classes had solid bases (i.e., only a single superclass such as <tt class="literal"><span class="pre">object</span></tt>).  Michael said it  would handled with no problem.</p>
</div>
<div class="section" id="classmethod-help">
<h1><a name="classmethod-help"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030452.html">Classmethod Help</a></a></h1>
<p>Raymond Hettinger emailed the list because  Guido said that the few people in the world who understand descriptors for C code are on the list.  The main reason I am mentioning the thread here, though, is because Armin Rigo gave the answer that &quot;There are METH_CLASS and METH_STATIC flags that you can set in the tp_methods table&quot;.</p>
<p>You also learn, thanks to Guido, that you should only use <tt class="literal"><span class="pre">PyErr_BadInternalCall()</span></tt> when you know that a &quot;bad argment must have been created by a broken piece of C code&quot;.</p>
</div>
</div>
