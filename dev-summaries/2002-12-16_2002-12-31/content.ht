Title: python-dev Summary for 2002-12-15 through 2002-12-31
Sitemap-ignore: yes

<div class="document" id="python-dev-summary-for-2002-12-15-through-2002-12-31">
<h1 class="title">python-dev Summary for 2002-12-15 through 2002-12-31</h1>
<p>This is a summary of traffic on the <a class="reference" href="http://mail.python.org/mailman/listinfo/python-dev">python-dev mailing list</a> between December 16, 2002 and December 31, 2002 (inclusive).  It is intended to inform the wider Python community of on-going developments on the list that might interest the wider Python community.  To comment on anything mentioned here, just post to <a class="reference" href="mailto:python-list&#64;python.org">python-list&#64;python.org</a> or comp.lang.python in the usual way; give your posting a meaningful subject line, and if it's about a PEP, include the PEP number (e.g. Subject: PEP 201 - Lockstep iteration). All python-dev members are interested in seeing ideas discussed by the community, so don't hesitate to take a stance on something.  And if all of this really interests you then get involved and join python-dev!</p>
<p>This is the eighth summary written by Brett Cannon (last one covering 2002!).</p>
<p>All summaries are archived at <a class="reference" href="http://www.python.org/dev/summary/">http://www.python.org/dev/summary/</a> .</p>
<p>Please note that this summary is written using <a class="reference" href="http://docutils.sf.net/rst.html">reStructuredText</a> which can be found at <a class="reference" href="http://docutils.sf.net/rst.html">http://docutils.sf.net/rst.html</a> .  Any unfamiliar punctuation is probably markup for <a class="reference" href="http://docutils.sf.net/rst.html">reST</a>; you can safely ignore it (although I suggest learning reST; its simple and is accepted for PEP markup).  Also, because of the wonders of programs that like to reformat text, I cannot guarantee you will be able to run the text version of this summary through <a class="reference" href="http://docutils.sf.net/">Docutils</a> as-is unless it is from the original itself.</p>
<div class="contents topic" id="contents">
<p class="topic-title"><a name="contents">Contents</a></p>
<ul class="simple">
<li><a class="reference" href="#summary-announcements" id="id9" name="id9">Summary Announcements</a></li>
<li><a class="reference" href="#adding-decimal-aka-fixedpoint-numbers-to-python" id="id10" name="id10">Adding decimal (aka FixedPoint) numbers to Python</a></li>
<li><a class="reference" href="#new-import-hooks-pep-a-first-draft" id="id11" name="id11">New Import Hooks PEP, a first draft</a></li>
<li><a class="reference" href="#known-obvious-thing-or-bug-rexec" id="id12" name="id12">known obvious thing or bug (rexec)?</a></li>
<li><a class="reference" href="#deprecating-apis" id="id13" name="id13">deprecating APIs</a></li>
<li><a class="reference" href="#mersenne-twister-copyright" id="id14" name="id14">Mersenne Twister copyright</a></li>
<li><a class="reference" href="#extension-modules-threading-and-the-gil" id="id15" name="id15">Extension modules, Threading, and the GIL</a></li>
<li><a class="reference" href="#gc-at-exit" id="id16" name="id16">GC at exit?</a></li>
<li><a class="reference" href="#pep-303-extend-divmod-for-multiple-divisors" id="id17" name="id17">PEP 303: Extend divmod() for Multiple Divisors</a></li>
</ul>
</div>
<div class="section" id="summary-announcements">
<h1><a class="toc-backref" href="#id9" name="summary-announcements">Summary Announcements</a></h1>
<p><a class="reference" href="http://www.python.org/2.3/">Python 2.3a1</a> has been released!  Please download it and try it out.  The testing of the code helps python-dev a lot.  So at the very least download it and run the test suite to see if any errors or failures come up.</p>
<p>I did skip a thread on some proposed changes to <tt class="literal"><span class="pre">ConfigParser</span></tt>.  If you care about that module you can read the thread at <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031505.html">http://mail.python.org/pipermail/python-dev/2002-December/031505.html</a> .</p>
<p>This summary is a bit on the thin side.  I decided to enjoy my winter holiday and so this summary was pushed off to the last minute (and beyond; that is why this is late).  Shouldn't happen again for a while.  =)</p>
<p>Those of you viewing this on the web or by running it through Docutils will have noticed the table of contents preceding this section.  I am giving this a try to see if I like it.  If you have an opinion, let me know.</p>
<p>Go to <a class="reference" href="http://www.python.org/pycon/">PyCon</a> (and yes, I am going to say this every summary until PyCon is upon us)!</p>
</div>
<div class="section" id="adding-decimal-aka-fixedpoint-numbers-to-python">
<h1><a class="toc-backref" href="#id10" name="adding-decimal-aka-fixedpoint-numbers-to-python"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031171.html">Adding decimal (aka FixedPoint) numbers to Python</a></a></h1>
<p>Michael McLay brought to the attention of the list <a class="reference" href="http://www.python.org/sf/653938I">patch #653938I</a> which not only adds the <a class="reference" href="http://fixedpoint.sf.net/">FixedPoint</a> module (originally by Tim Peters) to the library but the <tt class="literal"><span class="pre">d</span></tt> suffix for numeric constants to be used for numbers to be of the FixedPoint type.</p>
<p>For those of you unfamiliar with fixed-point math, it is basically decimal math where the issue of rounding and representation are eliminated except for division.  It  would allow 0.3 + 0.3 to actually equal 0.6 and not 0.59999999999, which is what you get now with binary floating-point math.</p>
<p>Consensus was quickly reached that Michael should first work on getting the module accepted into the language.  This is done so that python-dev can gauge the usefulness of the module to the rest of the world and thus see if integrating it into the language is called for.  It was also said that a PEP should be written (which Michael's first email practically is).  Oren Tirosh, though, stated that programs that require fixed-point math don't encode the numbers as literals in their code anyway, and thus adding a prefix would be uncalled for.</p>
<p>There was a discussion of what a constructor method should be named that finally came down to Guido saying fixedpoint, fixed, or fixpoint all are acceptable.</p>
<p>If you want to get into the nitty-gritty of this discussion read Michael's and Tim's emails from the threads.  You can also look at <a class="reference" href="http://www2.hursley.ibm.com/decimal/">http://www2.hursley.ibm.com/decimal/</a> for another way to do fixed-point; Aahz has been working on an implementation since the dawn of man but he has been busy with other things and thus has yet to finish it.</p>
</div>
<div class="section" id="new-import-hooks-pep-a-first-draft">
<h1><a class="toc-backref" href="#id11" name="new-import-hooks-pep-a-first-draft"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031322.html">New Import Hooks PEP, a first draft</a></a></h1>
<p>Related threads:</p>
<blockquote>
<ul class="simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031197.html">Zip Import and sys.path manipulation</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031319.html">Zipping Zope3</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031382.html">Write All New Import Hooks (PEP 302) in Python, Not C</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031369.html">Packages and __path__</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031380.html">PEP 203 and __path__</a></li>
</ul>
</blockquote>
<p>So the thread that I am supposedly summarizing here is not the first thread in terms of chronology, but it has the best title, so I am using that as the thread to be summarized.</p>
<p>Once again, the new import hooks mechanism was a big topic of discussion.  For the latter half of this month most of the discussions were around <a class="reference" href="http://www.python.org/dev/peps/pep-0302">PEP 302</a> and its rough draft.  It was accepted and was merged into the CVS tree in time for <a class="reference" href="http://www.python.org/2.3/">Python 2.3a1</a>.  Since the implementation has already been accepted I will not summarize it here nor its objections since the PEP does an admirable job of covering all the bases.</p>
<p>The other big discussion that was brought up was whether <tt class="literal"><span class="pre">__path__</span></tt> should be removed or at least discourage the modification of it.  Just van Rossum pushed for the removal since it would simplify the import hooks and he didn't see the use.  But Guido said  that Zope used it and that it can be useful, so it is staying.  This discussion is what caused the creation of the <a class="reference" href="http://www.python.org/doc/2.3a1/lib/module-pkgutil.html">pkgutil</a> module.</p>
</div>
<div class="section" id="known-obvious-thing-or-bug-rexec">
<h1><a class="toc-backref" href="#id12" name="known-obvious-thing-or-bug-rexec"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031160.html">known obvious thing or bug (rexec)?</a></a></h1>
<p>A question about something in <tt class="literal"><span class="pre">rexec_</span></tt> ended up leading to a discussion over the value of rexec since it is not close to being truly secure.  The module is still in the library but I would not expect it to be in there forever; Py3k will most likely be its undoing unless someone gets the jump now and rewrites the module to actually make it do its job well.</p>
</div>
<div class="section" id="deprecating-apis">
<h1><a class="toc-backref" href="#id13" name="deprecating-apis"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031255.html">deprecating APIs</a></a></h1>
<p>Neal Norwitz came up with a way to deprecate APIs by having them emit warnings during compile-time (at least for gcc).  It can be found in <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Include/pyport.h">pyport.h</a> and the macro is called <tt class="literal"><span class="pre">Py_DEPRECATED()</span></tt>.</p>
</div>
<div class="section" id="mersenne-twister-copyright">
<h1><a class="toc-backref" href="#id14" name="mersenne-twister-copyright"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031403.html">Mersenne Twister copyright</a></a></h1>
<dl>
<dt>Splinter Threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031402.html">Mesenne Twister copyright notice</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031485.html">Third-Party Licenses</a></li>
</ul>
</dd>
</dl>
<p>Raymond Hettinger asked how he should handle the copyright requirement for the Mersenne Twister (now a part of the <a class="reference" href="http://www.python.org/dev/doc/devel/lib/module-random.html">random</a> module) that the authors be given credit  in the documentation.  Various ideas were thrown around from adding a <tt class="literal"><span class="pre">__copyright__</span></tt> value to any module requiring it and having that contain the required notice to having a text file for  each file that needed it.  The last thing on this thread was Raymond suggesting a license directory that contained the required notices (this has not been done yet, though).</p>
</div>
<div class="section" id="extension-modules-threading-and-the-gil">
<h1><a class="toc-backref" href="#id15" name="extension-modules-threading-and-the-gil"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031424.html">Extension modules, Threading, and the GIL</a></a></h1>
<p>David Abrahams brought up a question about extension modules calling a Python interpreter but not knowing it is Python and thus not knowing about the GIL  (the &quot;summary&quot; David gives to explain what he is asking about is four paragraphs, so if this sounds interesting to you then read the original email).  This whole thread has still yet to be worked out, but if threading in extension modules interests you, have a read (time restraints prevent me from doing a thorough summary of this thread since it is so complicated).</p>
</div>
<div class="section" id="gc-at-exit">
<h1><a class="toc-backref" href="#id16" name="gc-at-exit"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031429.html">GC at exit?</a></a></h1>
<p>Aahz pointed out that a cycle of objects will not have their respective <tt class="literal"><span class="pre">__del__()</span></tt> methods called unless you break the cycle or call <tt class="literal"><span class="pre">gc.collect()</span></tt>.  But as Martin v. Löwis said, &quot;If you need to guarantee that __del__ is called at the end for all objects, you have probably much bigger problems&quot;.  So just watch out for those cycles.</p>
</div>
<div class="section" id="pep-303-extend-divmod-for-multiple-divisors">
<h1><a class="toc-backref" href="#id17" name="pep-303-extend-divmod-for-multiple-divisors"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-December/031511.html">PEP 303: Extend divmod() for Multiple Divisors</a></a></h1>
<p><a class="reference" href="http://www.python.org/dev/peps/pep-0303">PEP 303</a> by Thomas Bellman proposes changing <tt class="literal"><span class="pre">divmod()</span></tt> so as to allow it to take an arbitrary number of arguments to chain together a bunch of <tt class="literal"><span class="pre">divmod()</span></tt> calls.  Guido has says that he does not like the change because it causes the function to act in a way that is not necessary and since it is a built-in that goes against keeping the the language simple.</p>
<p>This thread has started a big discussion on what built-ins are needed, but that started after January 1 and thus will be covered in the next summary.</p>
</div>
</div>
<hr class="footer"/>
<div class="footer">
<a class="reference" href="2002-12-16_2002-12-31.txt">View document source</a>.
Generated by <a class="reference" href="http://docutils.sourceforge.net/">Docutils</a> from <a class="reference" href="http://docutils.sourceforge.net/rst.html">reStructuredText</a> source.
</div>
