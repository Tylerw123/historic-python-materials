Title: python-dev Summary, 2002-11-01 through 2002-11-15
Sitemap-ignore: yes

<div class="document">
<p>This is a summary of traffic on the <a class="reference" href="http://mail.python.org/mailman/listinfo/python-dev">python-dev mailing list</a> between November 1, 2002 and November 15, 2002 (inclusive).  It is intended to inform the wider Python community of on-going developments on the list that might interest the wider Python community.  To comment on anything mentioned here, just post to <a class="reference" href="mailto:python-list&#64;python.org">python-list&#64;python.org</a> or comp.lang.python in the usual way; give your posting a meaningful subject line, and if it's about a PEP, include the PEP number (e.g. Subject: PEP 201 - Lockstep iteration). All python-dev members are interested in seeing ideas discussed by the community, so don't hesitate to take a stance on something.  And if all of this really interests you then get involved and join python-dev!</p>
<p>This is the fifth summary written by Brett Cannon (after a relaxing two week hiatus; thanks to Raymond Hettinger for doing the Summary while I was gone).</p>
<p>All summaries are now archived at <a class="reference" href="http://www.python.org/dev/summary/">http://www.python.org/dev/summary/</a> (thanks to A.M. Kuchling for setting that up).</p>
<p>Please note that this summary is written using <a class="reference" href="http://docutils.sf.net/rst.html">reStructuredText</a> which can be found at <a class="reference" href="http://docutils.sf.net/rst.html">http://docutils.sf.net/rst.html</a> .  Any unfamiliar punctuation is probably markup for <a class="reference" href="http://docutils.sf.net/rst.html">reST</a>; you can safely ignore it (although I suggest learning reST; its simple and is accepted for PEP markup).  Also, because of the wonders of programs that like to reformat, I cannot guarantee you will be able to run the text version of this summary through <a class="reference" href="http://docutils.sf.net/">Docutils</a> as-is.  If you want to do that, get an original copy of the text file.</p>
<div class="section" id="summary-announcements">
<h1><a name="summary-announcements">Summary Announcements</a></h1>
<p>Not much to say for this summary.  The only thread skipped that someone out there might care about was one on getting the PEPs to display properly for IE 6 when the PEP was written in <a class="reference" href="http://docutils.sf.net/rst.html">reST</a>.</p>
<p>Thanks goes to Raymond Hettinger for covering the Summary while I was away on vacation.  Thanks also goes out to Laura Creighton and Guido for suggesting graduate schools that are Python-friendly.</p>
<p>Michael Chermside was the only person to respond directly to my question as to whether anyone had issue with me injecting my personality into the summary.  But he said to go ahead and let me personality permeate throughout this thing, so it will.  Let that be a lesson to anyone who wanted me to shut up and be drab; had you and a friend spoken up this little tirade would not be happening.  =)</p>
</div>
<div class="section" id="getting-python-bz2-into-2-3">
<h1><a name="getting-python-bz2-into-2-3"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029830.html">Getting python-bz2 into 2.3</a></a></h1>
<p>Continuation of <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-October/029829.html">http://mail.python.org/pipermail/python-dev/2002-October/029829.html</a></p>
<p>Gustavo Niemeyer asked how he should go about getting his <a class="reference" href="http://python-bz2.sourceforge.net/">python-bz2</a> module into the standard library.  He was basically told to submit a patch complete with the module, docs, regression tests, etc.; everything a healthy module needs.  It was also suggested that he provide a MSVC project file.</p>
<p>That didn't work for Gustavo (who now has CVS write priveleges; congrats) since he doesn't use Windows.  This was a slight problem because if the extension file doesn't build under Windows it can't be included in the PythonLabs Windows distro.  So keep in mind that if your module won't directly compile for 6 different versions of Windows it won't be included in the Windows distro.</p>
</div>
<div class="section" id="becoming-a-python-contributor">
<h1><a name="becoming-a-python-contributor"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029831.html">Becoming a python contributor</a></a></h1>
<p>Continuation of <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-October/029828.html">http://mail.python.org/pipermail/python-dev/2002-October/029828.html</a></p>
<p>Gustavo Niemeyer asked about how he could help contribute to Python.  He made the observation that &quot;Guido and others [have been] bothered a few times because of the lack of man power&quot; which has led to a &quot;small core of very busy developers working on core/essential/hard stuff <em>and</em> in code reviewing as well&quot; (and I can attest to this fact that this is very true; I am amazed the guys at PythonLabs have any form of a life outside of work with the amount of time they put in).  Gustavo felt &quot;that the Python development is currently overly centralized&quot;.</p>
<p>Martin v. Loewis responded first.  He said that &quot;the most important aspect I'd like to hand off is the review of patches; to Tim, it is the analysis of bug reports&quot;.  Martin then listed various points on how to be able to review a patch and how to handle bug reports; the email is at <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029831.html">http://mail.python.org/pipermail/python-dev/2002-November/029831.html</a> .  I <em>highly</em> recommend reading the email because Martin's points are all good and more patch reviewers would be rather nice.</p>
<p>M.A. Lemburg commented next, saying that he &quot;wouldn't mind if other developers with some time at hand jump in on already assigned patches and bug reports to help out&quot;.  Just because a patch has been assigned to someone doesn't mean the patch or the assignee couldn't use more help.  Having the patch assigned to someone just means that they take responsibility to apply the patch if it is worthy of being accepted or to reject it.  It should not stop other people from making comments or helping out so that the assignee can have a little bit of time saved for other things... like another patch to assign to themselves.  MAL also suggested that we have more maintainers that are in charge of chunks of code, e.g. Martin handles all locale code.</p>
<p>Martin disagreed with this idea, though.  Jack Jansen agreed with Martin.  He thought that if something came up that was not within the realm of a specific person that it &quot;either get[s] ignored, or passed on to Guido, or picked up by yourself or Michael [Hudson] or one of the very few other people who do general firefighting&quot;.  Martin commented later that he would hope that the stewardship of specific code does not get any more formal.</p>
<p>Martin then stated how one goes about getting commit priveleges for Python on SF: &quot;just step forward and say that you want. In the past, Guido has set a policy that people who's commit privilege is fresh will still have to use SF, but can perform the checkin themselves&quot;.  Tradition has stated that &quot;fresh&quot; is your first two or three SF patches.  But please only step forward if you are known to python-dev or PythonLabs since commit priveleges won't be given to people who just wander in off the proverbial street and ask for it.  Martin basically states this in a later email by saying that &quot;people should not produce a burst of patches just to get commit privileges. Instead, they should contribute patches steadily (and should have done so in the past), and then get CVS write access as a simplification for the rest of the maintainers&quot;.</p>
<p>Neal Norwitz pointed out that if a bug ends up with a fix it is best to submit a separate patch instead of attaching it to the bug report.  That way there is a bigger chance of the patch being seen and dealth with.  But please make sure to mention that it fixes a bug so that the bug can be closed!  Martin even suggested mentioning this fact in the title of the patch submission.</p>
</div>
<div class="section" id="roundup-status">
<h1><a name="roundup-status"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029879.html">RoundUp status</a></a></h1>
<p>This is a splinter thread of the 'Becoming a python contributor' thread in which Micheal Hudson asked how using <a class="reference" href="http://roundup.sourceforge.net/">Roundup</a> for replacing <a class="reference" href="http://www.sf.net/">SF</a> was coming along.  Guido said things had come up that was holding it up.  One was that the test server running at <a class="reference" href="http://www.python.org:8080">http://www.python.org:8080</a> had died when the box was restarted (it is now back up).  There were also some changes to Roundup that needed to be dealt with in order to get everything over from SF on to Roundup.  Guido also just ran out of time to review it more, although he did like what he had reviewed so far.  Guido asked for a volunteer.</p>
<p>It was asked what was needed.  Guido said that Roundup had moved over to Zope-style templating so all the old templates that Gordon (I assuming this is Gordon McMillan) wrote needed to be changed.  There were also some bugs that needed to be dealt with that are being tracked at Roundup hosted at <a class="reference" href="http://www.python.org:8080">http://www.python.org:8080</a> .  And there also will need to be preparations for the day that development is moved over from SF to the Roundup setup; that will require transferring everything over from SF, shutting down SF, and handling any bugs that crop up from the heavy use that the new setup is going to get.</p>
<p>So if you have any dislike for SF, then please contribute to Roundup and help get Python off of there!</p>
</div>
<div class="section" id="contributing-current-bug-status">
<h1><a name="contributing-current-bug-status"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029846.html">Contributing...current bug status</a></a></h1>
<p>Neal Norwitz went through the <a class="reference" href="http://www.sf.net/">SF</a> bug tracker and counted 325 bugs and generated a very easy to read page listing all the bugs with their relevant info.  You can find the HTML version at <a class="reference" href="http://www.metaslash.com/py/sf.data.html">http://www.metaslash.com/py/sf.data.html</a> .  If you find a bug there you think you can help out on, then go to SF and do so!</p>
</div>
<div class="section" id="low-hanging-fruit">
<h1><a name="low-hanging-fruit"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029850.html">Low hanging fruit</a></a></h1>
<p>Neal Norwitz generated a list of what he thought were easily fixable bugs and put them in this thread (it's the first email so just go to the link for this thread).  So if you have a little bit of free time and want to help out why don't you try to tackle one of these bugs?</p>
</div>
<div class="section" id="snake-farm">
<h1><a name="snake-farm"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029853.html">Snake farm</a></a></h1>
<p>The only reason I am mentioning this thread here is to help get the word out about the <a class="reference" href="http://www.lysator.liu.se/~sfarmer/">Snake Farm</a> ; hosted by <a class="reference" href="http://www.lysator.liu.se/">Lysator</a> and sponsored by the <a class="reference" href="http://www.python-in-business.org">Python Business Forum</a> .  It is a compile farm that downloads from CVS, compiles, and runs the test suite of Python daily.  It has caught a bunch of bugs and has been a great help.</p>
<p>The majority of the thread was spent trying to get FreeBSD 4.4 to compile Python and trying to work out a possible bug in pymalloc.</p>
</div>
<div class="section" id="david-goodger-joins-pep-editor">
<h1><a name="david-goodger-joins-pep-editor"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029866.html">David Goodger joins PEP editor</a></a></h1>
<p>David Goodger has somehow gotten suckered into becoming a PEP editor (I suspect Barry Warsaw had something to do with this since he used to do all of the PEP editing).  So you can all welcome David to his new responsibility by flooding him with all of those PEPs you have lying around and were not sure were good enough to submit.  =)</p>
</div>
<div class="section" id="metaclass-insanity">
<h1><a name="metaclass-insanity"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029872.html">metaclass insanity</a></a></h1>
<p>Continuation of <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-October/029795.html">http://mail.python.org/pipermail/python-dev/2002-October/029795.html</a></p>
<p>Michael Hudson posted the question as to how to get writing <tt class="literal"><span class="pre">__bases__</span></tt> for new-style classes to do the &quot;right thing&quot; since the mro does not seem to be updated.  Kevin Jacob gave it a go but ran into a bug.</p>
<p>Guido said that currently there is no way to touch the MRO from Python code.  All of that info is stored in the tp_mro slot in the object's C representation and is stored as a tuple whose members are expected to be either types or classic classes.  Guido said he would accept a patch for assigning to the mro if a check was included to make sure the previously mentioned constraint was maintained.  He also said he would probably accept a patch that allowed for assignable <tt class="literal"><span class="pre">__bases__</span></tt> and writing <tt class="literal"><span class="pre">__name__</span></tt> .</p>
<p>Michael Hudson commented about the difficulty of all of these patches.  One thing that came up was the connection between <tt class="literal"><span class="pre">__bases__</span></tt> and <tt class="literal"><span class="pre">__base__</span></tt> and how assignment to <tt class="literal"><span class="pre">__base__</span></tt> should not be taken lightly; Guido commented that &quot;the old and new base must be layout compatible, exactly like for assignment to __class__&quot;.</p>
<p>Guido later pointed out that <tt class="literal"><span class="pre">__base__</span></tt> becomes the built-in type that you derive from; whether it be object, list, dict, etc.  It was agreed that <tt class="literal"><span class="pre">__base__</span></tt> shouldn't be writable.</p>
<p>The point was made that nestable classes are not picklable since only thing at the top level of a module can be pickled.  Guido said he considered this a flaw although he couldn't think of why someone would want to embed a class within a class or a function.  This spawned comments on how to deal with this.  It seemed the best solution was to change <tt class="literal"><span class="pre">__name__</span></tt> for the inner class to a fully dotted name (e.g. <tt class="literal"><span class="pre">X.Y.__name__</span> <span class="pre">=</span> <span class="pre">&quot;X.Y&quot;</span></tt>) and then make a simple change to either <tt class="literal"><span class="pre">pickle</span></tt> or <tt class="literal"><span class="pre">getattr()</span></tt>.  It was eventually agreed upon that setting <tt class="literal"><span class="pre">__name__</span></tt> to the full dotted name of the class was the best solution and it was filed as <a class="reference" href="http://www.python.org/sf/633930">bug #633930</a> .</p>
<p>As part of trying to give Guido good examples of why nested classes are good (the best attempt was Walter Dorwald in an email at <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029906.html">http://mail.python.org/pipermail/python-dev/2002-November/029906.html</a> that elicited a &quot;that's cool&quot; comment from Guido), the idea of having <tt class="literal"><span class="pre">__iter__</span></tt> contain a class definition that returned an instance of that class came up.  That was shot down because of the performance hit of dealing with the class definition on every call to <tt class="literal"><span class="pre">__iter__</span></tt>.  But the idea of defining <tt class="literal"><span class="pre">__iter__</span></tt> as a generator was pointed out by Just van Rossum.  Doing that simplifies the code usually a good amount since the generator handles all <tt class="literal"><span class="pre">.next()</span></tt> calls and you just need to have the generator stop when you want your iterator to stop.  Apparently this is not a widely used idiom, so I am mentioning it here since it is a great idea that I can personally attest to as being a rather nice way to handle iterators.</p>
</div>
<div class="section" id="sre-bug-patch">
<h1><a name="sre-bug-patch"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029936.html">[#527371] sre bug/patch</a></a></h1>
<p>I am mentioning this thread not because the bug is that big of a deal, but because of the PEP that was brought up when dealing with the bug; <a class="reference" href="http://www.python.org/dev/peps/pep-0291">PEP 291</a> .  This informational PEP, among other things, lists modules that must be kept compatible with certain versions of Python; in this case sre has to be kept compatible with Python 1.5.2.  Except for sre, they are all packages that have made their way into the library.  You might want to have a look at the list if you are hacking on any packages in the stdlib.</p>
</div>
<div class="section" id="re-snake-farm-test-test-slice-failed-9-7-5-3-1-0">
<h1><a name="re-snake-farm-test-test-slice-failed-9-7-5-3-1-0"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029941.html">Re: [snake-farm] test test_slice failed -- [9, 7, 5, 3, 1] == [0]</a></a></h1>
<p>Once again this is not to meant to mention directly what as discussed in the thread but a point made.  The bug that was discovered was an issue with 64-bit machines and the 32-bit limitation of lists and slicing.  The 32-bit limit currently is hard-coded into the C code.  Obviously some people would like to see this changed.</p>
<p>Neal Norwitz laid down a rough outline on how one could go about changing this at <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029953.html">http://mail.python.org/pipermail/python-dev/2002-November/029953.html</a> .  Guido then made a pronouncement later stating that he is willing to break binary compatibility once for Python 2.3 or 2.4 to get this done.  He also mentioned some other things to make sure to do.</p>
<p>As of this writing no one has stepped forward to take this on.</p>
</div>
<div class="section" id="reindenting-unicodedata-c">
<h1><a name="reindenting-unicodedata-c"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/029997.html">Reindenting unicodedata.c</a></a></h1>
<p>While doing some work on <a class="reference" href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/python/python/dist/src/Modules/unicodedata.c">Modules/unicodedata.c</a> , Martin v. Loewis noticed that the indentation style didn't follow <a class="reference" href="http://www.python.org/dev/peps/pep-0007">PEP 7</a> and he wondered if it would be okay to re-indent the file.  This brought up two points.</p>
<p>One was that PEP 7 was not stringently followed.  The PEP says to &quot;Use single-tab indents, where a tab is worth 8 spaces&quot;.  Now that goes against Python coding style where you are supposed to use 4-space indents.  So the question of whether one should still use the tab style in new C code came up.  Guido said he wished new C code would, but for files he doesn't touch very often he doesn't feel he can enforce it.  Barry and Martin came up with an Emacs &quot;local variables&quot; stanza for the bottom of any file that uses a non-PEP style which can be found at <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030067.html">http://mail.python.org/pipermail/python-dev/2002-November/030067.html</a> .  But following the PEP is still the &quot;officially&quot; supported style.  But you should try to follow PEP 7 for all new C code and PEP 8 for Python code.</p>
<p>The other point was when to re-indent.  It was agreed upon to only do that when a major change in the code was occuring.  And when you do re-indent, do it as a separate check-in for CVS.</p>
</div>
<div class="section" id="printing-and-unicode">
<h1><a name="printing-and-unicode"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030098.html">Printing and __unicode__</a></a></h1>
<p>Martin v. Loewis brought up a point made by Henry Thompson on c.l.py asking why printing ignores <tt class="literal"><span class="pre">__unicode__</span></tt>.  Martin thought it shouldn't and listed a bunch of options on how to make printing work with <tt class="literal"><span class="pre">__unicode__</span></tt>.  The winner was to have &quot;A file indicates &quot;unicode-awareness&quot; somehow. For a Unicode-aware file, it tries <tt class="literal"><span class="pre">__unicode__</span></tt>, <tt class="literal"><span class="pre">__str__</span></tt>, and <tt class="literal"><span class="pre">__repr__</span></tt>, in order&quot;.  The agreed solution was to add an <tt class="literal"><span class="pre">.encoding</span></tt> attribute.  This attribute can be set to None when the stream is in Unicode and never converts to a byte-stream.</p>
<p>But then M.A. Lemburg chimed in.  He was fine with the addition of the <tt class="literal"><span class="pre">.encoding</span></tt>; &quot;this attribute is already available on stream objects created with codecs.open()&quot;.  What he didn't like was having <tt class="literal"><span class="pre">.encoding</span></tt> set to None mean the stream would accept Unicode.  Martin asked then if <tt class="literal"><span class="pre">StringIO</span></tt> should have <tt class="literal"><span class="pre">.encoding</span></tt>.</p>
<p>MAL replied that &quot;<tt class="literal"><span class="pre">StringIO</span></tt> should be considered a non-Unicode aware stream, so it should not implement .encoding&quot;.  He thought that if someone wanted <tt class="literal"><span class="pre">StringIO</span></tt> to be Unicode-aware they could use &quot;the tools in codecs.py [since they] can be used for this (basically by doing the same kind of wrapping as <tt class="literal"><span class="pre">codecs.open()</span></tt> does)&quot;.  But then Martin pointed out that StringIO is already Unicode-aware.</p>
<p>This debate continued between MAL, Martin, and Guido.  But then Guido just said he gave up since the current behavior was relied upon too much.</p>
</div>
<div class="section" id="adopting-optik">
<h1><a name="adopting-optik"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030108.html">Adopting Optik</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030154.html">Re: [getopt-sig] Adopting Optik</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030189.html">Re: Adopting Optik</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030165.html">Fw: [Python-Dev] Adopting Optik</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030179.html">[getopt-sig] Re: [Python-Dev] Adopting Optik</a></li>
</ul>
</dd>
</dl>
<p>Guido sent an email saying that he would like to get Python 2.3a out the door by X-mas.  This means trying to come up with a new name for <a class="reference" href="http://optik.sf.net/">Optik</a> , Greg Ward's command-line options parser.  The complaint about the current name is that it's too cute.  Guido started it by suggesting the name <tt class="literal"><span class="pre">options</span></tt>.</p>
<p>Peter Funk brought up two things.  One was that Docutils already used the module under its Optik name.  To this Guido responded that they could just change the name in the code.  Peter also said that Greg liked <tt class="literal"><span class="pre">OptionsParser</span></tt>.  There was also the point that module names are preferred to be short and lowercase.</p>
<p>Ka-Ping Yee and myself brought up the point that <tt class="literal"><span class="pre">options</span></tt> is very generic.  Guido agreed with this point while also mentioning that many people already have their own modules named options.py.  He then suggested <tt class="literal"><span class="pre">optlib</span></tt> since &quot;It's short, un-cute, and follows the *lib pattern used all over the Python stdlib&quot;.  Greg Ward liked this suggestion.</p>
<p>I personally suggested <tt class="literal"><span class="pre">ArgParser</span></tt>, trying to get a tie-in for sys.argv.  Greg Ewing built off of this and suggested <tt class="literal"><span class="pre">argvparse</span></tt>, similar to <tt class="literal"><span class="pre">urlparse</span></tt>.  David Ascher preferred <tt class="literal"><span class="pre">argparse</span></tt> since &quot;The v is archaic and so silent it fades away =)&quot;.  David Abrahams disagreed, stating how the &quot;v&quot; deals with any ambiguity.  David Abrahams also said he would vote for <tt class="literal"><span class="pre">argvparse</span></tt> to break a tie.</p>
<p>Ka-Ping Yee suggested <tt class="literal"><span class="pre">cmdline</span></tt> and <tt class="literal"><span class="pre">cmdopts</span></tt>.  David Abrahams liked both.</p>
<p>Steve Holden built off of Guido's <tt class="literal"><span class="pre">optlib</span></tt> and pushed for <tt class="literal"><span class="pre">optionlib</span></tt>.</p>
<p>Raymond Hettinger threw <tt class="literal"><span class="pre">OptionParser</span></tt> into the ring.</p>
<p>But then Guido asked for a call to votes between <tt class="literal"><span class="pre">optlib</span></tt> and <tt class="literal"><span class="pre">argvparse</span></tt>.  I tallied the votes at one point with it kind of split between them.  Then Guido announced that <tt class="literal"><span class="pre">optparse</span></tt> won (and no, that is not a typo).</p>
</div>
<div class="section" id="killing-off-bdist-dumb">
<h1><a name="killing-off-bdist-dumb"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030139.html">Killing off bdist_dumb</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030153.html">RE: [Distutils] Killing off bdist_dumb</a></li>
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030219.html">E: [Distutils] Killing off bdist_dumb</a></li>
</ul>
</dd>
</dl>
<p>A.M. Kuchling asked if anyone would mind if bdist_dumb was removed from distutils (the conversation also happened with <a class="reference" href="http://www.python.org/sigs/distutils-sig/">distutils-sig</a> ).  Apparently it is rather broken in terms of the paths of the files because it makes them all relative.  M.A. Lemburg, though, spoke up stating that he uses bdist_dumb.  It still wasn't fully resolved as of this writing.</p>
<p>The point of being able to build bdist_wininst on non-Windows platforms came up during this discussion as well.  It was decided to move the binary files needed for bdist_wininst into CVS (now filed as <a class="reference" href="http://www.python.org/sf/638595">bug #638595</a> ).</p>
</div>
<div class="section" id="python-interface-to-attribute-descriptors">
<h1><a name="python-interface-to-attribute-descriptors"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030118.html">Python interface to attribute descriptors</a></a></h1>
<dl>
<dt>Splinter threads:</dt>
<dd><ul class="first last simple">
<li><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030213.html">Python interface to attribute descriptors</a></li>
</ul>
</dd>
</dl>
<p>Paul Dubois decided to cause himself some grief and attempt to comprehend the miracle that is descriptors (more info can be found in the <a class="reference" href="http://www.python.org/doc/2.2.2/whatsnew/sect-rellinks.html#SECTION000320000000000000000">2.2.2 What's New</a> doc and in <a class="reference" href="http://www.python.org/dev/peps/pep-0252">PEP 252</a>).  He was wondering if there was more documentation than the signatures of the functions for the C API.  He also wanted to know if there was a way to play with them in the Python world since all of his attempts fell short of them being &quot;first-class citizen from Python&quot;.</p>
<p>Guido admitted that the docs were lacking.  He then asked for some help in writing the docs.  He responded to Paul's second question by saying that he thought it should work as long as you avoided classic classes.</p>
<p>Thanks to Guido saying that is should work, Paul realized that he misread the PEP.  To be nice he emailed out an example of how a descriptor could know where it came from at <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030141.html">http://mail.python.org/pipermail/python-dev/2002-November/030141.html</a> .  Phillip Ebey also chimed in on how to write a metaclass that said the name of the descriptor at <a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030213.html">http://mail.python.org/pipermail/python-dev/2002-November/030213.html</a> .</p>
</div>
<div class="section" id="idle-local-scope-cleanup">
<h1><a name="idle-local-scope-cleanup"><a class="reference" href="http://mail.python.org/pipermail/python-dev/2002-November/030124.html">IDLE local scope cleanup</a></a></h1>
<p>Patrick O'Brien (author of <a class="reference" href="http://www.orbtech.com/wiki/PyCrust">PyCrust</a> ) wondered how IDLE managed to keep its local scope so clean once it finished launching.  Guido said that IDLE (or at least the GRPC version which Patrick O'Brien believes stands for Generalized Remote Procedure Call) runs the shell in a subprocess that is careful not to pollute the namespace.</p>
<p>Patrick thanked Guido and then presented his real question: how to handle not polluting the namespace with a way getting around a pickling issue.  He &quot;used to just pass a regular dictionary to code.InteractiveInterpreter, which worked well enough&quot;, but there was an issue with pickling.  So then he tried passing <tt class="literal"><span class="pre">sys.modules['__main__'].__dict__</span></tt>, which worked but cluttered the namespace.</p>
<p>Guido's response: &quot;Remove the clutter&quot;.  Guido said that this would most likely require a minimalistic main program that bootstrapped using <tt class="literal"><span class="pre">__import__('run').main()</span></tt> which would run the code without adding to the namespace.</p>
</div>
</div>
