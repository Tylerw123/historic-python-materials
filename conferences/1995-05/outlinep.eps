%!PS-Adobe-3.0 EPSF-2.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - OUTLINEP.DOC
%%BoundingBox: 18 9 593 784
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: 0
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#89/perthousand 16#8A/Scaron
16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright 16#93
/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#99/trademark 16#9A/scaron 16#9B/guilsinglright 16#9C/oe
16#9F/Ydieresis 16#A0/space 16#A4/currency 16#A6/brokenbar 16#A7/section
16#A8/dieresis 16#A9/copyright 16#AA/ordfeminine 16#AB/guillemotleft
16#AC/logicalnot 16#AD/hyphen 16#AE/registered 16#AF/macron 16#B0/degree
16#B1/plusminus 16#B2/twosuperior 16#B3/threesuperior 16#B4/acute 16#B5
/mu 16#B6/paragraph 16#B7/periodcentered 16#B8/cedilla 16#B9/onesuperior
16#BA/ordmasculine 16#BB/guillemotright 16#BC/onequarter 16#BD/onehalf
16#BE/threequarters 16#BF/questiondown 16#C0/Agrave 16#C1/Aacute 16#C2
/Acircumflex 16#C3/Atilde 16#C4/Adieresis 16#C5/Aring 16#C6/AE 16#C7
/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA/Ecircumflex 16#CB/Edieresis
16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex 16#CF/Idieresis 16#D0/Eth
16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4/Ocircumflex 16#D5/Otilde
16#D6/Odieresis 16#D7/multiply 16#D8/Oslash 16#D9/Ugrave 16#DA/Uacute
16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute 16#DE/Thorn 16#DF/germandbls
16#E0/agrave 16#E1/aacute 16#E2/acircumflex 16#E3/atilde 16#E4/adieresis
16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8/egrave 16#E9/eacute 16#EA
/ecircumflex 16#EB/edieresis 16#EC/igrave 16#ED/iacute 16#EE/icircumflex
16#EF/idieresis 16#F0/eth 16#F1/ntilde 16#F2/ograve 16#F3/oacute 16#F4
/ocircumflex 16#F5/otilde 16#F6/odieresis 16#F7/divide 16#F8/oslash
16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex 16#FC/udieresis 16#FD/yacute
16#FE/thorn 16#FF/ydieresis ] def/reencdict 12 dict def/IsChar{basefontdict
/CharStrings get exch known}bd/MapCh{dup IsChar not{pop/bullet}if
newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0/degree IsChar{
/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar IsChar{/brokenbar}{
/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname ed/basefontname
ed FontDirectory newfontname known not{/basefontdict basefontname findfont
def/newfont basefontdict maxlength dict def basefontdict{exch dup/FID
ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll put}{exch
newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont/FontName
newfontname put 127 1 159{newfont/Encoding get exch/bullet put}for
ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree MapBB
newfontname newfont definefont pop}if newfontname end}bd/SB{FC/ULlen
ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed/dxGdi ed
/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1 mul x1 x1
mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch y1 mul
cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra ed
/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
%%EndSetup
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2058 119 42 (14) 42 SB
300 269 1681 (and then moves to a variant that doesn't have to load the whole packed file into memory all at once:) 1681 SB
32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
300 417 621 (    #!/usr/local/bin/python) 621 SB
300 497 322 (    import sys) 322 SB
300 537 483 (    marker = '::::::') 483 SB
300 617 276 (    while 1:) 276 SB
300 657 805 (        line = sys.stdin.readline\(\)) 805 SB
300 697 460 (        if not line:) 460 SB
300 737 391 (            break) 391 SB
300 777 736 (        elif line[:6] != marker:) 736 SB
300 817 621 (            print line[:-1]) 621 SB
300 857 299 (        else:) 299 SB
300 897 1058 (            sys.stdout = open\(line[6:-1], 'w'\)) 1058 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 1039 1693 (and finally to an 'App' subclass.  'mail-tool' is only presented as a simple script, and then as an 'App') 1693 SB
300 1089 1784 (instance.  Mail-tool extracts messages from a mail-box file, based on simple header-line matching.  Other) 1784 SB
300 1139 1218 (book examples are available on request; they'll all be ftp'able eventually.) 1218 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2058 119 42 (13) 42 SB
300 369 1783 (and finally, becomes an instance of the 'App' application class, inheriting input/output stream redirection,) 1783 SB
300 419 1149 (command line processing, etc., after we've looked at the framework:) 1149 SB
32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
300 567 621 (    #!/usr/local/bin/python) 621 SB
300 607 920 (    # use: app.appCall\(PackApp, args...\)) 920 SB
300 647 1035 (    # use: % packapp.py -o target src src ...) 1035 SB
300 767 529 (    from app import App) 529 SB
300 807 713 (    from textpack import marker) 713 SB
300 927 529 (    class PackApp\(App\):) 529 SB
300 967 552 (        def start\(self\):) 552 SB
300 1007 667 (            if not self.args:) 667 SB
300 1047 1449 (                self.exit\('packapp.py [-o target]? src src...'\)) 1449 SB
300 1087 391 (            else:) 391 SB
300 1127 736 (                self.setOutput\(\)) 736 SB
300 1207 506 (        def run\(self\):) 506 SB
300 1247 920 (            for name in self.restargs\(\):) 920 SB
300 1287 460 (                try:) 460 SB
300 1327 1196 (                    self.message\('packing: ' + name\)) 1196 SB
300 1367 920 (                    self.pack_file\(name\)) 920 SB
300 1407 529 (                except:) 529 SB
300 1447 1311 (                    self.exit\('error processing:' + name\)) 1311 SB
300 1527 782 (        def pack_file\(self, name\):) 782 SB
300 1567 713 (            self.setInput\(name\)) 713 SB
300 1607 1012 (            self.write\(marker + name + '\\n'\)) 1012 SB
300 1647 460 (            while 1:) 460 SB
300 1687 874 (                line = self.readline\(\)) 874 SB
300 1727 782 (                if not line: break) 782 SB
300 1767 736 (                self.write\(line\)) 736 SB
300 1887 1104 (    if __name__ == '__main__':  PackApp\(\).main\(\)) 1104 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2029 1768 (Along the way, each step in pack's evolution will improve its functionality in some way.  Before this part) 1768 SB
300 2079 1707 (is over, we'll have introduced much of the Python language, indirectly.  New language features in the) 1707 SB
300 2129 1766 (examples will be discussed as needed.  For example, object-oriented-programming comes up, as a means) 1766 SB
300 2179 586 (of wrapping top-level components.) 586 SB
300 2279 1571 (The 'unpack' and 'mail-tool' scripts similarly evolve.  For instance, 'unpack' starts out simple:) 1571 SB
32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
300 2427 621 (    #!/usr/local/bin/python) 621 SB
300 2507 483 (    from sys import *) 483 SB
300 2547 483 (    marker = '::::::') 483 SB
300 2627 782 (    for line in stdin.readlines\(\):) 782 SB
300 2667 690 (        if line[:6] != marker:) 690 SB
300 2707 621 (            print line[:-1]) 621 SB
300 2747 299 (        else:) 299 SB
300 2787 966 (            stdout = open\(line[6:-1], 'w'\)) 966 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2058 119 42 (12) 42 SB

%%BeginResource: font MSTT31c29a
/GreNewFont{10 dict dup 3 1 roll def dup begin 6 1 roll/FontType 3
def/FontMatrix exch def/FontBBox exch def/FontInfo 2 dict def FontInfo
/UnderlinePosition 3 -1 roll put FontInfo/UnderlineThickness 3 -1
roll put/Encoding 256 array def 0 1 255{Encoding exch/.notdef put}for
/CharProcs 256 dict def CharProcs/.notdef{}put/Metrics 256 dict def
Metrics/.notdef 3 -1 roll put/BuildChar{/char exch def/fontdict exch
def/charname fontdict/Encoding get char get def fontdict/Metrics get
charname get aload pop setcachedevice fontdict begin Encoding char
get CharProcs exch get end exec}def end definefont pop}def/AddChar{begin
Encoding 3 1 roll put CharProcs 3 1 roll put Metrics 3 1 roll put end}def
/MSTT31c29a [50.0 0 0 0 0 0] 160 -140 [-50.0 -50.0 50.0 50.0] [1 50 div 0 0 1 50 div 0 0] /MSTT31c29a GreNewFont
%%EndResource

32 0 0 50 50 0 0 1 48 /MSTT31c29a font

%%BeginResource: font MSTT31c29a
/G4d [47.0 0.0 0.0 0.0 48.0 35.0]
/G4d {
    48 35 true [1 0 0 -1 0.0 35.0] {<00fe00001fc000ff00001fc000ff00003fc000ff80003fc000ff80007fc001ffc000ffe001ffc000
ffe001ffe001ffe001ffe001ffe003fff003ffe003fff807ffe003fff807ffe003fffc0fffe007ff
fc1ffff007fffe1ffff007fffe3ffff007ffff3ffff007ffff7ffff00ffffffffff00ffffffffff8
0ffffffffff80ffdffff3ff81ffdfffe3ff81ffcfffe3ff81ffc7ffc3ffc1ff87ffc3ffc3ff83ff8
1ffc3ff81ff01ffc3ff81ff01ffc7ff00fe01ffe7ff00fc01ffe7ff007c01ffe7fe003800ffeffe0
03800fffffe001000fff>} imagemask 
  }
  77 /G4d MSTT31c29a AddChar
/G6f [37.0 0.0 1.0 0.0 36.0 35.0]
/G6f {
    35 35 true [1 0 0 -1 -1.0 35.0] {<000ffc0000007fffc00001fffff00003fffff80007fffffc000ffffffe001fffffff003fffffff80
3ffe0fff807ff803ffc07fe001ffc07fc000ffc0ffc0007fe0ff80003fe0ff80003fe0ff80003fe0
ff80003fe0ff80003fe0ff80003fe0ffc0007fe0ffc0007fe0ffe000ffe07ff001ffe07ff803ffc0
7ffe0fffc03fffffffc03fffffff801fffffff801fffffff000ffffffe0007fffffc0003fffff800
01fffff000007fffc0000007fc0000>} imagemask 
  }
  111 /G6f MSTT31c29a AddChar
/G72 [36.0 0.0 2.0 -1.0 34.0 35.0]
/G72 {
    32 36 true [1 0 0 -1 -2.0 35.0] {<fffffe00ffffff80ffffffc0ffffffe0fffffff0fffffff8fffffffcfffffffc7fc7fffe7fc07fff
7fc01fff7fc00fff7fc007ff7fe007ff7fe00ffe7fe00ffc7fe03ffc7fe07ff87fe1fff07fefffe0
7fffffc07fffff007fffff007fffff807fe3ff807fe3ffc07fe1ffc07fe0ffe07fe0ffe07fe07ff0
7fe03ff07fe01ff87fe01ffc7fe00ffe7fe007f800000380>} imagemask 
  }
  114 /G72 MSTT31c29a AddChar
/G65 [28.0 0.0 2.0 -1.0 26.0 35.0]
/G65 {
    24 36 true [1 0 0 -1 -2.0 35.0] {<fffffcfffffcfffffefffffe7ffffe7fffff7fffff7fffff7ff0007ff0007ff0007ff0007fe0007f
e0007fffff7fffff7ffffe7ffffe7ffffe7ffffe7ffffe7ff0027ff0007ff0007ff0007ff0007ff0
007ffff87fffff7ffffe7ffffe7ffffcfffffcfffffcfffff8000008>} imagemask 
  }
  101 /G65 MSTT31c29a AddChar
/G20 [19.0 0.0 0.0 0.0 0.0 0.0]
/G20 {
} 
  32 /G20 MSTT31c29a AddChar
/G61 [39.0 0.0 0.0 0.0 40.0 35.0]
/G61 {
    40 35 true [1 0 0 -1 0.0 35.0] {<0001fe00000001ff00000003ff00000003ff80000007ff80000007ffc0000007ffc000000fffe000
000fffe000001ffff000001ffff000001ffff800003ffff800003feffc00007fe7fc00007fc7fe00
00ffc3fe0000ff83ff0001ff81ff0001ff01ff8001fffdff8003ffffffc003ffffffc007ffffffe0
07ffffffe00ffffffff00ffffffff01ffffffff81ff8007ff83ff8007ff83ff8003ffc3ff0003ffc
7ff0003ffe7ff0001ffeffe0001fff>} imagemask 
  }
  97 /G61 MSTT31c29a AddChar
/G62 [33.0 0.0 3.0 0.0 32.0 35.0]
/G62 {
    29 35 true [1 0 0 -1 -3.0 35.0] {<07fff000fffffc00fffffe00ffffff00ffffff80ffffffc0ffffffc0ffc7ffe0ffc1fff0ffc0fff0
ffc07ff0ffe07fe0ffe07fe0ffe0ffc0ffe1ff80ffe7ff00ffffff00fffffe00fffffe00ffffff00
ffffff80ffe7ffc0ffe1ffe0ffe07ff0ffe03ff0ffe03ff8ffe03ff8ffe07ff8ffe0fff0fff1ffe0
fff7ffc0ffffffc0ffffff80ffffff00fffffc00>} imagemask 
  }
  98 /G62 MSTT31c29a AddChar
/G75 [38.0 0.0 2.0 -1.0 34.0 35.0]
/G75 {
    32 36 true [1 0 0 -1 -2.0 35.0] {<7ff000077ff001ff7ff007ff7ff007ff3ff007ff3ff007ff3ff007ff3ff007ff3ff007ff3ff007ff
3ff007ff3ff007ff3ff007ff3ff007ff3ff007ff3ff007ff3ff007ff3ff007ff3ff007ff3ff007ff
3fe007ff7fe007ff7fe007ff7fe007ff7fe007ff7ff807ff7fff83ff7fffffff7fffffffffffffff
ffffffffffffffff7ffff9ff0ffff1ff01fff1ff000fe1ff>} imagemask 
  }
  117 /G75 MSTT31c29a AddChar
/G74 [30.0 0.0 1.0 0.0 30.0 35.0]
/G74 {
    29 35 true [1 0 0 -1 -1.0 35.0] {<7ffffff87ffffff87ffffff0fffffff0fffffff0ffffffe0ffffffe0ffffffe0ffffffe0ffffffe0
007fe000007fe000007fe000007fe000007fe000007fe000007fe000007fe000007fe000007fe000
007fe000007fe00000fff00000fff00000fff00000fff00000fff00000fff00000fff00000fff000
00fff00000fff00000fff00000fff00000fff000>} imagemask 
  }
  116 /G74 MSTT31c29a AddChar
/G68 [38.0 0.0 2.0 0.0 37.0 35.0]
/G68 {
    35 35 true [1 0 0 -1 -2.0 35.0] {<fff001f800fff001ffc0fff001ffc0fff001ffc0fff001ffc0fff001ffc0fff001ffc0fff001ffc0
fff001ffc07ff001ffc07ff001ffc07ff001ffc07fffffffc07fffffffc07fffffffc07fffffffc0
7fffffffc07fffffffc07fffffffc07fffffffc07fffffffc07fffffffc07ff001ffc07ff001ffc0
7ff001ffc07ff001ffc07ff001ffc07ff001ffc07ff001ffe07ff001ffe07ff001ffe07ff001ffe0
7ff001ffe07ff001ffe07ff001ffe0>} imagemask 
  }
  104 /G68 MSTT31c29a AddChar
/G53 [21.0 0.0 1.0 -1.0 20.0 37.0]
/G53 {
    19 38 true [1 0 0 -1 -1.0 37.0] {<00e00003f80007fc000fff001fffc03fffe07fff007ffc00fff800fff000ffe000ffe000ffe000ff
e0007ff0007ff0003ff8001ffc000ffe0007ff0003ff8001ffc001ffc000ffe000ffe000ffe000ff
e000ffe001ffe003ffc00fffc03fffc0ffff807fff001ffe0007fc0001f000006000>} imagemask 
  }
  83 /G53 MSTT31c29a AddChar
/G6c [28.0 0.0 2.0 0.0 28.0 35.0]
/G6c {
    26 35 true [1 0 0 -1 -2.0 35.0] {<fff80000fff80000fff80000fff80000fff80000fff80000fff000007ff000007ff000007ff00000
7ff000007ff000007ff000007ff000007ff000007ff000007ff000007ff000007ff000007ff00000
7ff000007ff000007ff000007ff000c07ff03fc07fffff807fffff807fffff807fffff807fffff00
7fffff007fffff007fffff007fffff007fffff00>} imagemask 
  }
  108 /G6c MSTT31c29a AddChar
/G70 [32.0 0.0 2.0 0.0 31.0 35.0]
/G70 {
    29 35 true [1 0 0 -1 -2.0 35.0] {<ffffe000fffff800fffffe00ffffff00ffffff807ff7ffc07ff3ffe07fe0fff07fe03ff07fe01ff8
7fe00ff87fe00ff87fe00ff87fe00ff87fe01ff87fe03ff07fe07ff07fe0fff07fe3ffe07fefffe0
7fffffe07fffffc07fffff807fffff007ffffe007ffff8007fe000007fe000007fe00000ffe00000
ffe00000ffe00000fff00000fff00000fff00000>} imagemask 
  }
  112 /G70 MSTT31c29a AddChar
/G67 [35.0 0.0 1.0 0.0 34.0 37.0]
/G67 {
    33 37 true [1 0 0 -1 -1.0 37.0] {<000007000000003f80000000ffc0000003ffe000000ffff000001ffff800003ffffc0000fffff800
01ffffc00003ffff000007fffc000007fff000000fffe000001fff8000003fff0000003ffc020000
7ff803e0007ff003f800ffe003ff00ffe003ff80ffe003ff00fff003ff00fff003ff007ff803ff00
7ffe03ff007fff03ff003fffc3ff001fffffff001fffffff000fffffff0007ffffff0003ffffff00
01ffffff0000ffffff80007fffff80001fffff800007ffff80>} imagemask 
  }
  103 /G67 MSTT31c29a AddChar
/G6d [47.0 0.0 0.0 0.0 48.0 35.0]
/G6d {
    48 35 true [1 0 0 -1 0.0 35.0] {<00fe00001fc000ff00001fc000ff00003fc000ff80003fc000ff80007fc001ffc000ffe001ffc000
ffe001ffe001ffe001ffe001ffe003fff003ffe003fff807ffe003fff807ffe003fffc0fffe007ff
fc1ffff007fffe1ffff007fffe3ffff007ffff3ffff007ffff7ffff00ffffffffff00ffffffffff8
0ffffffffff80ffdffff3ff81ffdfffe3ff81ffcfffe3ff81ffc7ffc3ffc1ff87ffc3ffc3ff83ff8
1ffc3ff81ff01ffc3ff81ff01ffc7ff00fe01ffe7ff00fc01ffe7ff007c01ffe7fe003800ffeffe0
03800fffffe001000fff>} imagemask 
  }
  109 /G6d MSTT31c29a AddChar
/G69 [16.0 0.0 2.0 0.0 14.0 35.0]
/G69 {
    12 35 true [1 0 0 -1 -2.0 35.0] {<fff0fff0fff0fff0fff0fff0fff0ffe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe0
7fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe0>} imagemask 
  }
  105 /G69 MSTT31c29a AddChar
/G6e [42.0 0.0 2.0 0.0 39.0 35.0]
/G6e {
    37 35 true [1 0 0 -1 -2.0 35.0] {<ff0000ffc0ffc000fff0ffe000fff0fff000fff0fff800fff0fffc00fff0fffe00fff07fff80fff0
7fffc07ff07fffe07ff07ffff07ff07ffff87ff07ffffc7ff07ffffe7ff07fffff7ff07ffffffff0
7ffffffff07ff7fffff07ff3fffff07ff1fffff07ff0fffff07ff07ffff07ff03ffff07ff01ffff0
7ff00ffff07ff007fff07ff007fff07fe003fff87fe001fff87fe000fff87fe0007ff87fe0003ff8
7fe0001ff8ffe0000ff8ffe00007f8>} imagemask 
  }
  110 /G6e MSTT31c29a AddChar
/G73 [21.0 0.0 1.0 -1.0 20.0 37.0]
/G73 {
    19 38 true [1 0 0 -1 -1.0 37.0] {<00e00003f80007fc000fff001fffc03fffe07fff007ffc00fff800fff000ffe000ffe000ffe000ff
e0007ff0007ff0003ff8001ffc000ffe0007ff0003ff8001ffc001ffc000ffe000ffe000ffe000ff
e000ffe001ffe003ffc00fffc03fffc0ffff807fff001ffe0007fc0001f000006000>} imagemask 
  }
  115 /G73 MSTT31c29a AddChar
/G63 [25.0 0.0 1.0 -1.0 24.0 37.0]
/G63 {
    23 38 true [1 0 0 -1 -1.0 37.0] {<0000400003e0000fe0001ff0007ff800fff801fffc07fffc0ffffe0ffffc1fffe03fff803ffe007f
fc007ff8007ff000fff000ffe000ffe000ffe000ffe000fff000fff0007ff8007ffc007ffe003fff
801fffe01ffff80ffffe07fffc03fffc00fff8007ff8001ff80007f00001f0000020>} imagemask 
  }
  99 /G63 MSTT31c29a AddChar
/G2e [20.0 0.0 0.0 0.0 18.0 16.0]
/G2e {
    18 16 true [1 0 0 -1 0.0 16.0] {<00400000e00001f00003f80007fc000fff001fff807fffc0ffff807fff003ffe000ffc0007f80003
f00000e000004000>} imagemask 
  }
  46 /G2e MSTT31c29a AddChar
%%EndResource

301 349 1321 (More about the Shell programming section.) 1321 SB
300 349 1321 (More about the Shell programming section.) 1321 SB
255 255 255 fC
/fm 256 def
1819 3 290 345 B
1 F
n
0 0 0 fC
2 2 287 342 B
1 F
n
2 2 287 342 B
1 F
n
1819 2 290 342 B
1 F
n
2 2 2110 342 B
1 F
n
2 2 2110 342 B
1 F
n
255 255 255 fC
1819 3 290 409 B
1 F
n
0 0 0 fC
2 2 287 413 B
1 F
n
2 2 287 413 B
1 F
n
1819 2 290 413 B
1 F
n
2 2 2110 413 B
1 F
n
2 2 2110 413 B
1 F
n
2 67 287 345 B
1 F
n
2 67 2110 345 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 518 1775 (This section opens with a real-life scenario: packing/unpacking text files for transfer over a modem.  The) 1775 SB
300 568 1752 (examples are based on scripts I actually needed to write from home; the mail-tool also represents a real-) 1752 SB
300 618 1051 (life need.  The 'pack' program begins as a simple 6-line script:) 1051 SB
32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
300 766 621 (    #!/usr/local/bin/python) 621 SB
300 846 322 (    import sys) 322 SB
300 886 483 (    marker = '::::::') 483 SB
300 966 667 (    for name in sys.argv[1:]:) 667 SB
300 1006 713 (        input = open\(name, 'r'\)) 713 SB
300 1046 621 (        print marker + name) 621 SB
300 1086 598 (        print input.read\(\)) 598 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 1228 1697 (which we'll look at line-by-line, since this is the first Python code in the book.  'pack' later evolves to) 1697 SB
300 1278 904 (include a functional API, for use from other modules:) 904 SB
32 0 0 38 38 0 0 0 30 /Courier /font0 ANSIFont font
300 1426 621 (    #!/usr/local/bin/python) 621 SB
300 1466 1035 (    # use: pack_all\('target', ['src', 'src']\)) 1035 SB
300 1506 667 (    # use: % pack src src ...) 667 SB
300 1546 897 (    # use: % pack -b target src src ...) 897 SB
300 1666 483 (    from sys import *) 483 SB
300 1706 713 (    from textpack import marker) 713 SB
300 1826 736 (    def pack_file\(name, output\):) 736 SB
300 1866 713 (        input = open\(name, 'r'\)) 713 SB
300 1906 966 (        output.write\(marker + name + '\\n'\)) 966 SB
300 1946 368 (        while 1:) 368 SB
300 1986 805 (            line = input.readline\(\)) 805 SB
300 2026 690 (            if not line: break) 690 SB
300 2066 690 (            output.write\(line\)) 690 SB
300 2186 782 (    def pack_all\(output, sources\):) 782 SB
300 2226 966 (        if type\(output\) == type\("string"\):) 966 SB
300 2266 874 (            output = open\(output, 'w'\)) 874 SB
300 2306 644 (        for name in sources:) 644 SB
300 2346 368 (            try:) 368 SB
300 2386 874 (                print 'packing:', name) 874 SB
300 2426 897 (                pack_file\(name, output\)) 897 SB
300 2466 437 (            except:) 437 SB
300 2506 1311 (                print 'error processing:', name;  exit\(1\)) 1311 SB
300 2626 690 (    if __name__ == '__main__':) 690 SB
300 2666 276 (        try:) 276 SB
300 2706 1150 (            if len\(argv\) >= 4 and argv[1] == '-b':) 1150 SB
300 2746 989 (                pack_all\(argv[2], argv[3:]\)) 989 SB
300 2786 391 (            else:) 391 SB
300 2826 966 (                pack_all\(stdout, argv[1:]\)) 966 SB
300 2866 345 (        except:) 345 SB
300 2906 1127 (            print 'error opening output'; exit\(1\)) 1127 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2058 119 42 (11) 42 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 318 58 (12.) 58 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
358 318 24 (  ) 24 SB
375 318 526 (APPENDICES   \(50 pages\).) 526 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 419 1605 (The goal here isn't to include a reference manual: that's  what the index \(and Python's standard) 1605 SB
300 469 1716 (documentation\) is for.  Instead, we'll only include some of the more critical information not presented) 1716 SB
300 519 359 (elsewhere in the text.) 359 SB

%%BeginResource: font MSTT31c2b2
/MSTT31c2b2 [25.0 0 0 0 0 0] 40 -80 [-25.0 -25.0 25.0 25.0] [1 25 div 0 0 1 25 div 0 0] /MSTT31c2b2 GreNewFont
%%EndResource

32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font

%%BeginResource: font MSTT31c2b2
/G6c [19.0 0.0 2.0 2.0 16.0 16.0]
/G6c {
    14 14 true [1 0 0 -1 -2.0 16.0] {<0fc01fe03ff07ff8fffcfffcfffcfffcfffcfffc7ff83ff01fe00fc0>} imagemask 
  }
  108 /G6c MSTT31c2b2 AddChar
%%EndResource

gs 319 3231 0 0 CB
300 635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 619 846 (A Python tutorial \(if not earlier; see details above\)) 846 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 685 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 669 1025 (Common programming mistakes \(from questions on the net\)) 1025 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 735 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 719 1046 (Common library \(built-in\) functions, modules, and exceptions) 1046 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 769 450 (Syntax definition \(charts?\)) 450 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 835 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 819 864 (Some platform-dependencies \(but not build details\)) 864 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 885 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 869 908 (A "peek under the hood": some design/internals notes) 908 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 935 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 919 1106 (Sources for more information \(news, mail, ftp, WWW, PSA, etc.\)) 1106 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 985 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 969 649 (Where to get the examples in the book) 649 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1035 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1019 463 (A quick-reference \(a card?\)) 463 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1085 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1069 96 (Index) 96 SB
300 1169 1743 (Since the index serves as a reference, it must be complete.  See above: the tutorial might appear earlier.) 1743 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2058 119 42 (10) 42 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 285 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 269 891 ('calc': a simple calculator program \(parser/evaluator\)) 891 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 335 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 319 337 (Adding an unparser) 337 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 369 712 (Adding an interpreter: class instance trees) 712 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 419 435 (A GUI front-end for 'calc') 435 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 485 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 469 418 (Moving the scanner to C) 418 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 585 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 569 978 (Embedded Python + API's: versus home-grown languages) 978 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 619 748 (Optional: a command-line interpreter \('psh'\)) 748 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 685 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 669 498 (Optional: the 'gluegen' parser) 498 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 735 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 719 603 (Optional: the Python parser module) 603 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 769 602 (Optional: the regex/regsub modules) 602 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 1068 35 (9.) 35 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
335 1068 48 (    ) 48 SB
375 1068 932 (CLIENT/SERVER PROGRAMMING   \(30 pages\).) 932 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 1169 268 (Also known as ') 268 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
568 1169 504 (distributed computing/objects) 504 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1072 1169 938 ('.  Looks at pipes, threads, sockets.  May also build up a) 938 SB
300 1219 1784 (simple 'visual python' environment, using modules developed in earlier chapters \(a python server process,) 1784 SB
300 1269 1499 (a GUI client, text editor...\),  to tie-together some earlier concepts into a complete system.) 1499 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1369 857 (Forking new Python processes: fork, pipes, sockets) 857 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1419 952 (The 'calc' program as client/server system \(a GUI client\)) 952 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1485 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1469 795 (ILU: language/machine-independent interfaces) 795 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1535 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1519 710 (Optional: A "Visual Python" environment) 710 SB
300 1619 1767 (This section will also give a brief overview of the Python/ILU system: roughly, a public-domain CORBA) 1767 SB
300 1669 1692 (implementation, which supports Python, Modula-3, and Common-Lisp.  This is becoming a popular) 1692 SB
300 1719 368 (client/server medium.) 368 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 2018 58 (10.) 58 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
358 2018 24 (  ) 24 SB
375 2018 1031 (KNOWLEDGE-BASED PROGRAMMING   \(30 pages\).) 1031 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2119 1677 (Very optional.  Presents a simplified version of an expert-system shell I developed \('Holmes'\), as an) 1677 SB
300 2169 1640 (example of stand-alone Python programming.  Includes a simple forward and backward chaining) 1640 SB
300 2219 1721 (inference engine, simplified pattern matcher, and a rule index-tree class.  Very likely to be cut;  I only) 1721 SB
300 2269 1096 (include it in case I wind up with some free time/space at the end.) 1096 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 2568 58 (11.) 58 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
358 2568 24 (  ) 24 SB
375 2568 537 (CONCLUSION   \(10 pages\).) 537 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2669 1738 (More on Python's roles in the development cycle, now that we've shown how to use it.  Hybrid systems,) 1738 SB
300 2719 547 (the development bottleneck, the ) 547 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
847 2719 266 (Gilligan Factor) 266 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1113 2719 44 (,...) 44 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 119 21 (9) 21 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 285 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 269 940 (RAD: changing the GUI without stopping or rebuilding) 940 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 335 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 319 687 (Tkinter as an extension example \(part 4\)) 687 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 369 888 (Optional: a GUI front-end for our shell tools \(part 3\)) 888 SB
300 469 1681 (Tkinter will be used in later chapters too.  Rapid GUI development is fast becoming one of Python's) 1681 SB
300 519 1713 (strongest points.  Unfortunately \(fortunately?\), there's a lot of options right now; since Tk seems to be) 1713 SB
300 569 1741 (dominant in the UNIX public-domain arena \(O'Reilly's market\), it will probably get the most exposure.) 1741 SB
300 619 526 (But I'm open to other opinions.) 526 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 918 35 (6.) 35 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
335 918 48 (    ) 48 SB
375 918 984 (DATA-STRUCTURE PROGRAMMING   \(30 pages\).) 984 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 1019 1772 (Develops a data-structure class library, to demonstrate more OOP in Python.  The simple framework will) 1772 SB
300 1069 1693 (handle sets, and will grow to include trees, graphs, etc.  Along the way, we'll look at the profiler, for) 1693 SB
300 1119 268 (optimizing sets.) 268 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1235 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1219 413 (Set-processing functions) 413 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1285 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1269 786 (A simple set class \(with a generic superclass..\)) 786 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1335 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1319 870 (Handling sequences generically: reverse, permute,..) 870 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1369 785 (Optimizing set performance using dictionaries) 785 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1419 415 (Adding trees and graphs) 415 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1535 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1519 782 (The RelSet subclass: adding relational algebra) 782 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1585 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1569 845 (The GuiSet subclass: adding GUI display protocol) 845 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1619 814 (The FileSet subclass: random access files as sets) 814 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1735 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1719 778 (Making objects persistent: 'pickle' and 'shelve') 778 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1769 384 (SQL queries in Python) 384 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1835 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1819 498 (Optional: Database interfaces) 498 SB
300 1919 1758 (Also looks at persistent objects \(a new feature of Python\); if pressed for space, this is the most important) 1758 SB
300 1969 1660 (topic here.  May also discuss other Python database interfaces: dbm, oracle, sybase, etc. \(optional\).) 1660 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 2268 35 (7.) 35 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
335 2268 48 (    ) 48 SB
375 2268 997 (WWW/INTERNET SCRIPTING TOOLS   \(30 pages\).) 997 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2369 1746 (Python 1.2 has a set of WWW tools bundled with it, as a standard part of the language.  Given WWW's) 1746 SB
300 2419 1663 (popularity, the book will devote a whole part to Python's WWW connection.  Under construction...) 1663 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 2718 35 (8.) 35 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
335 2718 48 (    ) 48 SB
375 2718 811 (LANGUAGE-BASED TOOLS   \(30 pages\).) 811 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2819 1736 (Builds a calculator program, to show Python as a stand-alone language.  Also looks at a command-line) 1736 SB
300 2869 259 (interpreter, etc.) 259 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 119 21 (8) 21 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 285 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 269 281 (As UNIX scripts) 281 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 335 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 319 740 (Conversions: sending inputs, getting results) 740 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 369 256 (Error-handling) 256 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 419 699 (Debugging and reloading embedded code) 699 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 485 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 469 386 (An embedded-call API) 386 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 535 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 519 347 (A Python object API) 347 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 619 574 (Calling C extensions from Python) 574 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 685 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 669 321 (Extension modules) 321 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 735 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 719 351 (Extension data-types) 351 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 769 383 (Wrapping C++ classes) 383 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 835 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 819 740 (Conversions: sending inputs, getting results) 740 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 885 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 869 256 (Error-handling) 256 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 935 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 919 771 (Code generation for integrating API's \('bgen'\)) 771 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1035 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1019 363 (Building with Python) 363 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1085 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1069 592 (Linking Python into an application) 592 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1135 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1119 529 (Linking extensions into Python) 529 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1185 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1169 467 (Dynamic and static binding) 467 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1235 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1219 808 (Shipping Python code: source, compiled, frozen) 808 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1335 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1319 191 (Conclusion) 191 SB
300 1469 765 (This section might also present Guido's new ') 765 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1065 1469 82 (bgen) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1147 1469 867 (' tool, which generates code needed to integrate a C) 867 SB
300 1519 1712 (API/library into Python, by scanning header files.  It may also build some higher-level embedded-call) 1712 SB
300 1569 1737 (functions \(on top of existing low-level interfaces\), unless these become a standard part of Python in the) 1737 SB
300 1619 211 (next release.) 211 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 1868 35 (5.) 35 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
335 1868 48 (    ) 48 SB
375 1868 1223 (GUI PROGRAMMING   \(30 pages\)  \(might be moved to part 4\).) 1223 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 1969 1784 (Using Tkinter: Python's object-oriented interface to TCL/Tk.  Looks at some simple GUI programs \('hello) 1784 SB
300 2019 1699 (world', a simple mail-file browser\), but defers to TCL/Tk documentation for more information.  This) 1699 SB
300 2069 1745 (section might be moved ahead to part 4 \(between scripts and embedding\); it will have a powerful visual) 1745 SB
300 2119 126 (impact.) 126 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2235 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2219 912 (GUI options: Tk, X, MFC, Pesto/Fresco, portability,...) 912 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2335 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2319 85 (The ') 85 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
460 2319 201 (Hello world) 201 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
661 2319 345 (' program in Tkinter) 345 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2369 523 (Basic use: widgets as functions) 523 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2419 534 (Adding event callback handlers) 534 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2485 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2469 476 (Attaching widgets to frames) 476 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2535 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2519 494 (Making GUI's by subclassing) 494 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2585 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2569 342 (Pop-up dialog boxes) 342 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2619 346 (Menus and tool-bars) 346 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2685 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2669 651 (Spawning new windows and processes) 651 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2769 336 (A simple text editor) 336 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2835 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2819 644 (A GUI front-end for mail-tool \(part 3\)) 644 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2885 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2869 727 (Using GUI tools in embedded code \(part 4\)) 727 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2935 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2919 975 (GuiApp:  a subclass of the application framework \(part 3\)) 975 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 119 21 (7) 21 SB
300 269 1782 (We start with a 6-line text-file packer;  eventually, we wind up with a simple application class framework) 1782 SB
300 319 1610 (to encapsulate top-level components.  Along the way, we introduce language-features needed to) 1610 SB
300 369 989 (understand the examples.  Composed of multiple chapters:) 989 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 535 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 519 209 (Introduction) 209 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 619 475 (Basic system administration) 475 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 685 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 669 619 ('Quick-and-dirty' file packing scripts) 619 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 735 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 719 627 (Improving on the pack scripts: step 1) 627 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 769 807 (Improving on the pack scripts: a functional API) 807 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 835 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 819 616 (A 'quick-and-dirty' mail-file scanner) 616 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 935 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 919 541 (Wrapping top-level components) 541 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 985 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 969 241 (The App class) 241 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1035 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1019 500 (Adding i/o stream redirection) 500 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1085 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1069 489 (Adding internal \(string\) files) 489 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1135 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1119 610 (Adding interactive loops and menus) 610 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1185 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1169 613 (Mixing multiple Application classes) 613 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1235 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1219 384 (Testing the framework) 384 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1285 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1269 442 (A menu-based application) 442 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1369 964 (pack, unpack, and mail-tool scripts as application objects) 964 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1419 676 (Optimizing the mail-tool by subclassing) 676 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1485 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1469 516 (Adding file backups to unpack) 516 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1535 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1519 707 (An interactive interface for our shell tools) 707 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1619 366 (Summary/Conclusion) 366 SB
300 1719 1794 (Complex topics, such as multiple inheritance, will appear in the context of real program needs: to derive a) 1794 SB
300 1769 463 (subclass that supports both ) 463 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
763 1769 82 (stdio) 82 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
845 1769 1034 ( redirection, and a command menu.  We'll also introduce the ) 1034 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1879 1769 159 (debugger) 159 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
2038 1769 11 (,) 11 SB
300 1819 532 (using intentional errors.  Basic ) 532 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
832 1819 129 (profiler) 129 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
961 1819 966 ( use comes up here too: we improve on a mail-tool class's) 966 SB
300 1869 1219 (performance be a factor of 3.  More details on this section appear below.) 1219 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 2118 35 (4.) 35 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
335 2118 48 (    ) 48 SB
375 2118 1091 (EXTENSION-LANGUAGE PROGRAMMING   \(50 pages\).) 1091 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2219 1790 (An example of using Python as an embedded language, for on-site customization of a C/C++ libraries and) 1790 SB
300 2269 1744 (binaries.  Develops basic embedded call functions, and shows extension modules and types by example.) 1744 SB
300 2319 1709 (This section won't be an exhaustive reference for all run-time functions; the goal is just to show some) 1709 SB
300 2369 83 (ways) 83 SB
300 2419 1715 (that embedding/extending can be done.  The section's example problems make use of both C->Python) 1715 SB
300 2469 1175 (\(embedding\) and Python->C \(extending\) interfaces.  Its current parts:) 1175 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2585 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2569 209 (Introduction) 209 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2619 607 (The problem: on-site configurations) 607 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2735 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2719 545 (Running embedded Python code) 545 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2769 651 (As strings: expressions and statements) 651 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2835 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2819 556 (As files: by module/object names) 556 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2885 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2869 490 (As registered callable objects) 490 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2935 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2919 309 (As object methods) 309 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 119 21 (6) 21 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 285 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 269 266 (Modular design) 266 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 335 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 319 440 (Global and local variables) 440 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 419 256 (Using Modules) 256 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 485 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 469 248 (Basic concepts) 248 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 535 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 519 432 (Running code in modules) 432 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 585 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 569 433 (Modules are name-spaces) 433 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 619 284 (Built-in modules) 284 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 685 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 669 324 (Reloading modules) 324 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 735 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 719 340 (Module export rules) 340 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 769 317 (Compiled modules) 317 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 885 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 869 226 (Using classes) 226 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 935 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 919 248 (Basic concepts) 248 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 985 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 969 476 (Classes are name-spaces too) 476 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1035 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1019 400 (Instances versus classes) 400 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1085 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1069 785 (Inheritance, polymorphism, and encapsulation) 785 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1135 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1119 483 (Constructors and destructors) 483 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1185 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1169 388 (Subclass specialization) 388 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1235 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1219 361 (Operator overloading) 361 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1285 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1269 526 (Inheritance versus composition) 526 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1335 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1319 469 (Metaclass protocol methods) 469 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1369 388 (Implementing 'records') 388 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1419 255 (The stack class) 255 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1485 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1469 334 (Name scoping rules) 334 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1535 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1519 370 (Program organization) 370 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1619 332 (Exception handling) 332 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1685 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1669 508 (The 'try' and 'raise' statements) 508 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1735 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1719 310 (System exceptions) 310 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1769 460 (Nesting exception handlers) 460 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1885 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1869 529 (Extending and embedding in C) 529 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1935 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1919 459 (C extension module format) 459 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1985 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1969 453 (Running embedded strings) 453 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2035 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2019 383 (Wrapping C++ classes) 383 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2085 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2069 390 (Other integration ideas) 390 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2185 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2169 327 (Using built-in tools) 327 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2235 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2219 402 (Python system structure) 402 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2285 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2269 843 (Pre-coded functionality: functions, types, modules) 843 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2369 793 (Summary \(each subsection has a summary too\)) 793 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2419 191 (Conclusion) 191 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 2718 35 (3.) 35 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
335 2718 48 (    ) 48 SB
375 2718 733 (SHELL PROGRAMMING   \(50 pages\).) 733 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2819 1759 (In progress.  This section uses shell-scripts to get started, and show basic concepts.  File processing, and) 1759 SB
300 2869 689 (system-component access appears in the ) 689 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
989 2869 68 (first) 68 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1057 2869 962 ( example we look at; these are critical topics to the target) 962 SB
300 2919 1788 (audience.  The section starts with very simple tasks, and develops them into more sophisticated programs.) 1788 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 119 21 (5) 21 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 335 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 319 209 (Introduction) 209 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 369 307 (So what's Python?) 307 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 419 549 (What's all the excitement about?) 549 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 485 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 469 434 (Some of Python's features) 434 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 535 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 519 415 (What's Python good for?) 415 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 585 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 569 324 (A "Sneak Preview") 324 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 619 255 (Data structures) 255 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 685 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 669 379 (System administration) 379 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 735 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 719 316 (GUI programming) 316 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 769 432 (Extension-language work) 432 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 835 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 819 191 (Conclusion) 191 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 1118 61 (2?.) 61 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
361 1118 24 (  ) 24 SB
375 1118 1148 (A PYTHON TUTORIAL   \(50 pages;  here, or an appendix\).) 1148 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 1219 1788 (Already written.  It's not yet clear whether the tutorial will appear first \(here\) or as an appendix at the end) 1788 SB
300 1269 1783 (\(as optional reading for beginners\).  There's different schools-of-thought on this; my current idea is to put) 1783 SB
300 1319 1783 (this first, to avoid cluttering up the 'role' chapters that follow.  On the other hand, it uses artificially small) 1783 SB
300 1369 1467 (examples to illustrate language features, and may move too slow as is.  Stay tuned... ;-\)) 1467 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1485 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1469 209 (Introduction) 209 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1585 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1569 251 (Getting started) 251 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1619 246 (Interactive use) 246 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1685 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1669 600 (Simple expressions and assignment) 600 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 1785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 1769 395 (Some useful statements) 395 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1835 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1819 277 (The 'if' selection) 277 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1885 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1869 209 (Syntax rules) 209 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1935 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1919 270 (The 'while' loop) 270 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 1985 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 1969 379 (The 'for' loop, part 1...) 379 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2085 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2069 493 (Using built-in data structures) 493 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2135 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2119 81 (Lists) 81 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2185 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2169 123 (range\(\)) 123 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2235 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2219 206 (Dictionaries) 206 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2285 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2269 114 (Tuples) 114 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2335 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2319 209 (Conversions) 209 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2385 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2369 277 (General features) 277 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2435 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2419 131 (Nesting) 131 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2485 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2469 291 (Object references) 291 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2535 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2519 319 (Generic operations) 319 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2585 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2569 120 (Slicing) 120 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2635 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2619 396 (Growing and shrinking) 396 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 319 3231 0 0 CB
300 2735 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
375 2719 277 (Using Functions) 277 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2785 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2769 248 (Basic concepts) 248 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2835 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2819 355 (Functions are objects) 355 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2885 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2869 188 (Arguments) 188 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 394 3231 0 0 CB
375 2935 19 (l) 19 SB
gr
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
450 2919 169 (Recursion) 169 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 119 21 (4) 21 SB
32 0 0 50 50 0 0 1 48 /MSTT31c29a font

%%BeginResource: font MSTT31c29a
/G54 [30.0 0.0 1.0 0.0 30.0 35.0]
/G54 {
    29 35 true [1 0 0 -1 -1.0 35.0] {<7ffffff87ffffff87ffffff0fffffff0fffffff0ffffffe0ffffffe0ffffffe0ffffffe0ffffffe0
007fe000007fe000007fe000007fe000007fe000007fe000007fe000007fe000007fe000007fe000
007fe000007fe00000fff00000fff00000fff00000fff00000fff00000fff00000fff00000fff000
00fff00000fff00000fff00000fff00000fff000>} imagemask 
  }
  84 /G54 MSTT31c29a AddChar
/G28 [19.0 0.0 1.0 -3.0 19.0 35.0]
/G28 {
    18 38 true [1 0 0 -1 -1.0 35.0] {<000180000f00003f00007e0000fc0003fc0007fc0007f8000ff8001ff0003ff0003ff0003ff0007f
e0007fe0007fe000ffe000ffe000ffe000ffe000ffe000ffe000ffe000ffe0007ff0007ff0007ff0
003ff0003ff8001ff8000ffc0007fc0003fe0001fe0000ff00007f80001f800003c0>} imagemask 
  }
  40 /G28 MSTT31c29a AddChar
/G29 [19.0 0.0 0.0 -3.0 18.0 35.0]
/G29 {
    18 38 true [1 0 0 -1 0.0 35.0] {<6000003c00003f00001f80001fc0000ff0000ff80007f80007fc0003fe0003ff0003ff0003ff8001
ff8001ff8001ff8001ffc001ffc001ffc001ffc001ffc001ffc001ffc001ffc003ff8003ff8003ff
8003ff0007ff0007fe000ffc000ff8001ff0001fe0003fc0007f80007e0000f00000>} imagemask 
  }
  41 /G29 MSTT31c29a AddChar
/G4f [37.0 0.0 1.0 0.0 36.0 35.0]
/G4f {
    35 35 true [1 0 0 -1 -1.0 35.0] {<000ffc0000007fffc00001fffff00003fffff80007fffffc000ffffffe001fffffff003fffffff80
3ffe0fff807ff803ffc07fe001ffc07fc000ffc0ffc0007fe0ff80003fe0ff80003fe0ff80003fe0
ff80003fe0ff80003fe0ff80003fe0ffc0007fe0ffc0007fe0ffe000ffe07ff001ffe07ff803ffc0
7ffe0fffc03fffffffc03fffffff801fffffff801fffffff000ffffffe0007fffffc0003fffff800
01fffff000007fffc0000007fc0000>} imagemask 
  }
  79 /G4f MSTT31c29a AddChar
%%EndResource

301 399 668 (The \(current\) Outline.) 668 SB
300 399 668 (The \(current\) Outline.) 668 SB
255 255 255 fC
/fm 256 def
1819 3 290 395 B
1 F
n
0 0 0 fC
2 2 287 392 B
1 F
n
2 2 287 392 B
1 F
n
1819 2 290 392 B
1 F
n
2 2 2110 392 B
1 F
n
2 2 2110 392 B
1 F
n
255 255 255 fC
1819 3 290 459 B
1 F
n
0 0 0 fC
2 2 287 463 B
1 F
n
2 2 287 463 B
1 F
n
1819 2 290 463 B
1 F
n
2 2 2110 463 B
1 F
n
2 2 2110 463 B
1 F
n
2 67 287 395 B
1 F
n
2 67 2110 395 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 568 1767 (The outline \(as presented to O'Reilly editors, more or less\) appears below.  The first 2 sections \(shell and) 1767 SB
300 618 1770 (extension-language programming\) are probably the most critical, and the longest, since they'll also cover) 1770 SB
300 668 1718 (much of the Python language, as an incidental topic.  The parts following these 2 are roughly selected) 1718 SB
300 718 1710 (popular Python application areas.  Note: the outlines of parts not yet written are still very incomplete.) 1710 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
300 968 227 (Summary...) 227 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 1127 243 (FOREWORD.) 243 SB
300 1177 194 (PREFACE.) 194 SB
300 1227 32 (1.) 32 SB
375 1227 534 (INTRODUCTION   \(15 pages\).) 534 SB
300 1277 32 (2.) 32 SB
375 1277 1150 (A PYTHON TUTORIAL   \(50 pages;  may be an appendix instead\).) 1150 SB
300 1327 32 (3.) 32 SB
375 1327 674 (SHELL PROGRAMMING   \(50 pages\).) 674 SB
300 1377 32 (4.) 32 SB
375 1377 1025 (EXTENSION-LANGUAGE PROGRAMMING   \(50 pages\).) 1025 SB
300 1427 32 (5.) 32 SB
375 1427 1049 (GUI PROGRAMMING   \(30 pages;  may be moved to part 4\).) 1049 SB
300 1477 32 (6.) 32 SB
375 1477 917 (DATA-STRUCTURE PROGRAMMING   \(30 pages\).) 917 SB
300 1527 32 (7.) 32 SB
375 1527 925 (WWW/INTERNET SCRIPTING TOOLS   \(30 pages\).) 925 SB
300 1577 32 (8.) 32 SB
375 1577 745 (LANGUAGE-BASED TOOLS   \(30 pages\).) 745 SB
300 1627 32 (9.) 32 SB
375 1627 866 (CLIENT/SERVER PROGRAMMING   \(30 pages\).) 866 SB
300 1677 53 (10.) 53 SB
375 1677 962 (KNOWLEDGE-BASED PROGRAMMING   \(30 pages\).) 962 SB
300 1727 53 (11.) 53 SB
375 1727 487 (CONCLUSION   \(10 pages\).) 487 SB
300 1777 53 (12.) 53 SB
375 1777 473 (APPENDICES   \(50 pages\).) 473 SB
32 0 0 50 50 0 0 0 45 /Times-Italic /font31 ANSIFont font
300 2077 183 (Details...) 183 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 2235 261 (FOREWORD.) 261 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2286 1396 (Guido; he'll also be a major reviewer for the book \(in all his copious spare time :-\).) 1396 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 2385 211 (PREFACE.) 211 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2436 1354 (The book's structure, about the examples \(run on Linux\), acknowledgments, etc.) 1354 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
300 2735 35 (1.) 35 SB
32 0 0 42 42 1 0 0 39 /Helvetica-Bold /font13 ANSIFont font
335 2735 48 (    ) 48 SB
375 2735 579 (INTRODUCTION   \(15 pages\).) 579 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2836 1760 (Already written.  A short description of Python's roles, what people like about it, and a sneak-preview of) 1760 SB
300 2886 1543 (some examples we'll look at in the book.  Here's the current subsections of the introduction:) 1543 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 119 21 (3) 21 SB
32 0 0 50 50 0 0 1 48 /MSTT31c29a font

%%BeginResource: font MSTT31c29a
/G42 [33.0 0.0 3.0 0.0 32.0 35.0]
/G42 {
    29 35 true [1 0 0 -1 -3.0 35.0] {<07fff000fffffc00fffffe00ffffff00ffffff80ffffffc0ffffffc0ffc7ffe0ffc1fff0ffc0fff0
ffc07ff0ffe07fe0ffe07fe0ffe0ffc0ffe1ff80ffe7ff00ffffff00fffffe00fffffe00ffffff00
ffffff80ffe7ffc0ffe1ffe0ffe07ff0ffe03ff0ffe03ff8ffe03ff8ffe07ff8ffe0fff0fff1ffe0
fff7ffc0ffffffc0ffffff80ffffff00fffffc00>} imagemask 
  }
  66 /G42 MSTT31c29a AddChar
/G6b [34.0 0.0 3.0 0.0 35.0 35.0]
/G6b {
    32 35 true [1 0 0 -1 -3.0 35.0] {<00007000ffc07f00ffc07ff8ffc0fffcffc0fff8ffc0fff0ffc1fff0ffc1ffe0ffc3ffc0ffc3ffc0
ffc7ff80ffc7ff00ffcfff00ffcffe00fffffe00fffffc00fffffc00fffff800fffff800fffffc00
fffffe00ffffff00ffdfff00ffcfff80ffc7ffc0ffc3ffe0ffc3ffe0ffc1fff0ffc0fff8ffc0fffc
ffc07ffeffc03fffffc03ffcffc01fc0ffc00e00>} imagemask 
  }
  107 /G6b MSTT31c29a AddChar
/G27 [9.0 0.0 2.0 21.0 7.0 35.0]
/G27 {
    5 14 true [1 0 0 -1 -2.0 35.0] {<f8f8f8f8f8f8f8f8f8f8f8f8f8f8>} imagemask 
  }
  39 /G27 MSTT31c29a AddChar
%%EndResource

301 349 628 (The Book's Structure.) 628 SB
300 349 628 (The Book's Structure.) 628 SB
255 255 255 fC
/fm 256 def
1819 3 290 345 B
1 F
n
0 0 0 fC
2 2 287 342 B
1 F
n
2 2 287 342 B
1 F
n
1819 2 290 342 B
1 F
n
2 2 2110 342 B
1 F
n
2 2 2110 342 B
1 F
n
255 255 255 fC
1819 3 290 409 B
1 F
n
0 0 0 fC
2 2 287 413 B
1 F
n
2 2 287 413 B
1 F
n
1819 2 290 413 B
1 F
n
2 2 2110 413 B
1 F
n
2 2 2110 413 B
1 F
n
2 67 287 345 B
1 F
n
2 67 2110 345 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 618 1697 (Essentially, the book's structure just reflects the approach we're taking.  Because the book's goal is to) 1697 SB
300 668 363 (present Python by its ) 363 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
663 668 81 (roles) 81 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
744 668 1309 ( \(not by its syntax or semantics\), its structure reflects ways that Python can be) 1309 SB
300 718 1417 (used in practice.  Here's some general notes; the outline below gives specific details.) 1417 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font

%%BeginResource: font MSTT31c2b2
/Ga8 [22.0 0.0 2.0 0.0 20.0 18.0]
/Ga8 {
    18 18 true [1 0 0 -1 -2.0 18.0] {<ffffc0ffffc0c000c0c000c0c000c0c000c0c000c0c000c0c000c0c000c0c000c0c000c0c000c0c0
00c0c000c0c000c0ffffc0ffffc0>} imagemask 
  }
  168 /Ga8 MSTT31c2b2 AddChar
%%EndResource

gs 322 3231 0 0 CB
300 983 22 (\250) 22 SB
gr
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
375 969 924 (One section for each of Python's ) 924 SB
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
1299 966 308 (major roles) 308 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1133 22 (\250) 22 SB
gr
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
375 1119 280 (Realistic ) 280 SB
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
655 1116 224 (examples) 224 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
879 1119 112 ( of ) 112 SB
32 0 0 46 46 0 0 0 39 /Courier-Oblique /font11 ANSIFont font
991 1116 392 (Python-at-work) 392 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
1383 1119 392 ( for each role) 392 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1283 22 (\250) 22 SB
gr
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
375 1266 448 (Language details) 448 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
823 1269 1176 ( presented in the context of real examples) 1176 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1433 22 (\250) 22 SB
gr
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
375 1419 56 (A ) 56 SB
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
431 1416 532 (comprehensive index) 532 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
963 1419 868 ( serves as a language reference) 868 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1583 22 (\250) 22 SB
gr
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
375 1566 280 (Appendices) 280 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
655 1569 1092 ( for the most-common reference material) 1092 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1733 22 (\250) 22 SB
gr
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
375 1719 84 (An ) 84 SB
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
459 1716 476 (optional tutorial) 476 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
935 1719 924 ( introduces basic language issues) 924 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
2079 119 21 (2) 21 SB
32 0 0 50 50 0 0 1 48 /MSTT31c29a font

%%BeginResource: font MSTT31c29a
/G41 [39.0 0.0 0.0 0.0 40.0 35.0]
/G41 {
    40 35 true [1 0 0 -1 0.0 35.0] {<0001fe00000001ff00000003ff00000003ff80000007ff80000007ffc0000007ffc000000fffe000
000fffe000001ffff000001ffff000001ffff800003ffff800003feffc00007fe7fc00007fc7fe00
00ffc3fe0000ff83ff0001ff81ff0001ff01ff8001fffdff8003ffffffc003ffffffc007ffffffe0
07ffffffe00ffffffff00ffffffff01ffffffff81ff8007ff83ff8007ff83ff8003ffc3ff0003ffc
7ff0003ffe7ff0001ffeffe0001fff>} imagemask 
  }
  65 /G41 MSTT31c29a AddChar
%%EndResource

301 360 585 (The Basic Approach.) 585 SB
300 360 585 (The Basic Approach.) 585 SB
255 255 255 fC
/fm 256 def
1819 3 290 356 B
1 F
n
0 0 0 fC
2 2 287 353 B
1 F
n
2 2 287 353 B
1 F
n
1819 2 290 353 B
1 F
n
2 2 2110 353 B
1 F
n
2 2 2110 353 B
1 F
n
255 255 255 fC
1819 3 290 420 B
1 F
n
0 0 0 fC
2 2 287 424 B
1 F
n
2 2 287 424 B
1 F
n
1819 2 290 424 B
1 F
n
2 2 2110 424 B
1 F
n
2 2 2110 424 B
1 F
n
2 67 287 356 B
1 F
n
2 67 2110 356 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 579 1101 (The goal of the book will be to show how Python can be used for ) 1101 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1401 579 68 (real) 68 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1469 579 622 ( software development tasks.  It's not) 622 SB
300 629 1722 (intended to be an exhaustive reference for every detail of the language.  Instead, we want to show how) 1722 SB
300 679 248 (Python can be ) 248 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
548 679 127 (applied) 127 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
675 679 1377 ( to typical tasks faced by developers.  Along the way, we'll present Python's major) 1377 SB
300 729 1340 (features, and show what it is about the language that makes it such a great tool.) 1340 SB
300 829 496 (In other words, this will be a ) 496 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
796 829 153 (practical) 153 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
949 829 851 ( book for engineers, not a programming-language ) 851 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
1800 829 108 (theory) 108 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1908 829 168 ( book.  Of) 168 SB
300 879 1705 (course, some theory will be required, but that won't be the tone of the book.  Some components of the) 1705 SB
300 929 167 (approach:) 167 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1194 22 (\250) 22 SB
gr
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
375 1180 364 (Organized by ) 364 SB
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
739 1177 336 (common roles) 336 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
1075 1180 644 (, not language features) 644 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1344 22 (\250) 22 SB
gr
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
375 1330 252 (Based on ) 252 SB
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
627 1327 504 (realistic examples) 504 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
1131 1330 840 (, and incremental improvements) 840 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1494 22 (\250) 22 SB
gr
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
375 1480 196 (A very ) 196 SB
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
571 1477 224 (informal) 224 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
795 1480 1148 ( presentation \(this is an O'Reilly book!\)) 1148 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1644 22 (\250) 22 SB
gr
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
375 1630 56 (A ) 56 SB
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
431 1627 252 (practical) 252 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
683 1630 1316 ( book: not just a list of syntax/semantic rules) 1316 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1794 22 (\250) 22 SB
gr
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
375 1780 364 (Details on a ) 364 SB
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
739 1777 336 (need-to-know) 336 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
1075 1780 980 ( basis \(to understand the examples\)) 980 SB
32 0 0 25 25 0 0 1 22 /MSTT31c2b2 font
gs 322 3231 0 0 CB
300 1945 22 (\250) 22 SB
gr
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
375 1931 280 (Almost a ") 280 SB
32 0 0 46 46 1 0 0 39 /Courier-Oblique /font11 ANSIFont font
655 1928 476 (Python-by-example) 476 SB
32 0 0 46 46 0 0 0 36 /Courier /font0 ANSIFont font
1131 1931 728 (" book \(but not really...\)) 728 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2182 1772 (Some of these goals may turn out to be difficult.  For instance, "realistic" examples of ILU use, or WWW) 1772 SB
300 2232 1764 (scripting might be too complex or large for this book.  Still, we'll try to avoid using overly-artificial code) 1764 SB
300 2282 476 (samples, whenever possible.) 476 SB
EJ RS
%%PageTrailer
SS
0 0 25 11 798 1100 300 SM

%%BeginResource: font MSTT31c316
/MSTT31c316 [75.0 0 0 0 0 0] 106 -130 [-75.0 -75.0 75.0 75.0] [1 75 div 0 0 1 75 div 0 0] /MSTT31c316 GreNewFont
%%EndResource

32 0 0 75 75 0 0 1 71 /MSTT31c316 font

%%BeginResource: font MSTT31c316
/G22 [24.0 0.0 3.0 33.0 20.0 53.0]
/G22 {
    17 20 true [1 0 0 -1 -3.0 53.0] {<fc1f80fc1f80fc1f80fc1f80fc1f80fc1f80fc1f80fc1f80fc1f80fc1f80fc1f80fc1f80fc1f80fc
1f80fc1f80fc1f80fc1f80fc1f80fc1f80fc1f80>} imagemask 
  }
  34 /G22 MSTT31c316 AddChar
%%EndResource

0 0 0 fC
670 447 25 (") 25 SB
669 447 25 (") 25 SB

%%BeginResource: font MSTT31c322
/MSTT31c322 [75.0 0 0 0 0 0] 106 -130 [-75.0 -75.0 75.0 75.0] [1 75 div 0 0 1 75 div 0 0] /MSTT31c322 GreNewFont
%%EndResource

32 0 0 75 75 1 0 1 71 /MSTT31c322 font

%%BeginResource: font MSTT31c322
/G55 [49.0 0.0 9.0 -1.0 61.0 52.0]
/G55 {
    52 53 true [1 0 0 -1 -9.0 52.0] {<00000000003fe000000000007ff000000000007fe00001fc0000ffe00007fe0000ffe0000ffc0000
ffc0000ffc0001ffc0001ffc0001ffc0001ffc0001ff80003ff80003ff80003ff80003ff80003ff0
0003ff00007ff00007ff00007ff00007fe00007fe00007fe0000ffe0000ffe0000ffe0000ffc0000
ffc0000ffc0001ffc0001ffc0001ffc0001ff80001ff80001ff80003ff80003ff00003ff80003ff0
0003ff00003ff00007ff00007fe00007ff00007fe00007fe0000ffe0000ffe0000ffc0000ffe0000
ffc0000ffc0001ffc0001ffc0001ff80001ffc0003ff80001ff80003ff80001ff80007ff00003ff8
0007ff00003ff8000ffe00003ff0000ffe00003ff0001ffe00007ff0003ffc00007ff0007ffc0000
7fe000fffc00007fe000fff800007fe001fff800007fe007fff800007fe00ffff000007ff01ffff0
00003ff07ffff000003fffffbfe000001fffff3fe000000ffffc7fe0000007fff87fc0000001ffe0
7fc00000007f007f800000>} imagemask 
  }
  85 /G55 MSTT31c322 AddChar
/G73 [34.0 0.0 4.0 -1.0 40.0 36.0]
/G73 {
    36 37 true [1 0 0 -1 -4.0 36.0] {<00000fe00000007ffc000001ffff000003ffff800007ffffc0001ffc3fe0003ff81fe0003ff01ff0
007fe01ff000ffc01ff000ff801ff001ff801ff001ff001ff001ff001fe003fe003fe003fe001f80
03fe00000003ff80000001fff8000000ffff8000003ffff0000007fffc0000007ffe000f800fff00
3fc007ff003fc003ff007fc003ff007fc003ff007fe007fe007fe00ffe007ff01ffc003ff87ff800
3ffffff0001fffffe0000fffff800003fffc000000ffc00000>} imagemask 
  }
  115 /G73 MSTT31c322 AddChar
/G69 [16.0 0.0 3.0 0.0 29.0 50.0]
/G69 {
    26 50 true [1 0 0 -1 -3.0 50.0] {<00001e0000007f800000ff800001ff800003ff800003ff800003ff000007ff000003fe000003fc00
0001f0000000000000000000000000000000000000000000000ff000001ff000001ff000003fe000
003fe000007fe000007fc000007fc000007f800000ff800000ff800000ff000001ff000001ff0000
01fe000003fe000003fe000003fc000007fc000007fc000007f800000ff800000ff800000ff00000
1ff000001fe000001fe000003fe000003fc000003fc000007fc000007f8000007f8000007f000000
>} imagemask 
  }
  105 /G69 MSTT31c322 AddChar
/G6e [39.0 0.0 3.0 -2.0 43.0 35.0]
/G6e {
    40 37 true [1 0 0 -1 -3.0 35.0] {<0007f00000000ff00000000ffffe00000fffffc0001fffffe0001ffffff8001ffffffc001fff83fe
003ffc01fe003ff801ff003fe001ff007fc001ff007f8001ff007f8001ff00ff0001ff00ff0003fe
01fe0003fe01fe0003fe01fe0007fc03fc0007fc03fc0007fc07fc000ff807f8000ff807f8000ff8
0ff8001ff00ff0001ff01ff0001fe01ff0003fe01fe0003fe03fe0007fc03fe0007fc07fc000ff80
7fc000ff807f8000ff80ff8001ff00000001ff00000000fe00>} imagemask 
  }
  110 /G6e MSTT31c322 AddChar
/G67 [38.0 0.0 -7.0 -18.0 46.0 42.0]
/G67 {
    53 60 true [1 0 0 -1 7.0 42.0] {<000000000001e0000000000003f0000000000007f800000000001ff800000000003fe00000000000
7fc000000007f0ff800000001ffffe000000003ffffc000000007ffff800000000fffffc00000001
fffffe00000003ffffff00000007ffc1ff00000007ff00ff8000000ffe00ff8000001ff800ff8000
001ff0007f8000003ff0007f8000003fe000ff8000007fc000ff8000007fc000ff8000007fc001ff
000000ff8001ff000000ff8003ff000000ff8007fe000000ff800ffe000000ff801ffc000000ff80
3ff8000000ffc1fff00000007fffffe00000003fffffc00000003fffff000000007ffffc00000001
ffffe000000007ff80000000001fff00000000001fff00000000003ffff0000000003fffff800000
001ffffff80000000ffffffe00000007ffffff8000001fffffffc00000ffffffffe00003fff01fff
e00007ffc001ffe0001fff00007fe0003ff800003fe0003ff000007fc0007fe00000ffc0007fe000
03ffc0007ff0007fff80007fffffffff00007ffffffffe00003ffffffff800001fffffffe000000f
ffffff80000003fffff8000000003ffe00000000>} imagemask 
  }
  103 /G67 MSTT31c322 AddChar
/G20 [24.0 0.0 0.0 0.0 0.0 0.0]
/G20 {
} 
  32 /G20 MSTT31c322 AddChar
/G50 [43.0 0.0 5.0 -1.0 55.0 52.0]
/G50 {
    50 53 true [1 0 0 -1 -5.0 52.0] {<00003fffe000000000ffffff00000000ffffffc0000001fffffff0000001fffffff8000001ffffff
fc000003fffffffe000003ffffffff000003ffe03fff000003ff800fff800007ff0007ff800007fe
0003ff800007fe0003ffc00007fe0003ffc0000ffc0003ffc0000ffc0003ffc0000ffc0003ffc000
1ff80007ff80001ff80007ff80001ff80007ff80003ff0000fff00003ff0001fff00003ff0003ffe
00003fe0007ffe00007fe000fffc00007fe003fff800007fe00ffff80000ffe07ffff00000ffffff
ffe00000ffffffff800001ffffffff000001fffffffc000001fffffff0000003ffffffc0000003ff
fffe00000003ffffe000000007ff000000000007fe000000000007fe00000000000ffe0000000000
0ffc00000000000ffc00000000001ff800000000001ff800000000001ff800000000003ff0000000
00003ff000000000003ff000000000007fe000000000007fe000000000007fe00000000000ffc000
00000000ff800000000000>} imagemask 
  }
  80 /G50 MSTT31c322 AddChar
/G79 [39.0 0.0 3.0 -20.0 47.0 36.0]
/G79 {
    44 56 true [1 0 0 -1 -3.0 36.0] {<0003f80000000007f8000fe0000ff8001ff0001ff8001ff0001ff0001fe0003ff0003fe0003ff000
3fe0003fe0003fe0007fe0003fc0007fc0007fc0007fc0007fc000ffc0007f8000ff8000ff8000ff
8000ff8001ff0000ff0001ff0001ff0001ff0001fe0003fe0003fe0003fe0003fe0003fe0007fc00
07fc0007fc0007fc000ffc0007fc000ffc0007f8001ff8000ff8003ff8000ff8007ff0000ff8007f
f0000ff800fff0000ff801ffe0000ff807ffe0000ff80fffe0000ffc3fffc0000fffffffc00007ff
ff7fc00003fffeff800001fff8ff8000003fe0ff8000000000ff0000000001ff0000000001fe0000
000003fe00001fc003fc00003fc003fc00003fe007fc00007fc007f800007fe00ff000007fe01ff0
00007fe03fe000007fe07fc000007ff0ffc000003fffff0000003ffffe0000001ffffc0000000fff
f000000007ffc000000001fe00000000>} imagemask 
  }
  121 /G79 MSTT31c322 AddChar
/G74 [25.0 0.0 9.0 -1.0 36.0 49.0]
/G74 {
    27 50 true [1 0 0 -1 -9.0 49.0] {<00003fc00000ffe00000ffc00001ffc00001ff800001ff800003ff000003ff000003fe000007fe00
0007fe000007fc00000ffc00000ff800000ff800001ff800001ff000003ff00000ffffc00fffffc0
3fffff807fffff807fffff007ffffe007ffff0003cff800001ff800001ff000001ff000003ff0000
03fe000003fe000007fc000007fc000007fc00000ff800000ff800000ff800001ff800001ff00000
1ff000003ff000003ff000003fe000003fe000007fe000007fe000007fc00000ffc000007f000000
>} imagemask 
  }
  116 /G74 MSTT31c322 AddChar
/G68 [38.0 0.0 3.0 -2.0 44.0 56.0]
/G68 {
    41 58 true [1 0 0 -1 -3.0 56.0] {<00001ff0000000003ff0000000003ff0000000003fe0000000007fe0000000007fc000000000ffc0
00000000ff8000000000ff8000000001ff8000000001ff0000000001ff0000000003ff0000000003
fe0000000003fe0000000003fe0000000007fc0000000007fc0000000007fc000000000ff8000000
000ff8000000000fffff0000001fffffe000001ffffff000001ffffffc00003ffffffc00003fffff
fe00007fff03fe00007ffc03fe00007ff801fe0000fff001fe0000ffe001fe0000ffc001fe0001ff
c003fe0001ff8003fe0001ff0003fe0003ff0003fc0003ff0007fc0003fe0007fc0007fe0007f800
07fc000ff80007fc000ff8000ffc000ff0000ff8001ff0000ff8001ff0001ff8001fe0001ff0003f
e0001ff0003fe0003fe0003fc0003fe0007fc0003fe0007fc0007fc000ff80007fc000ff80007fc0
00ff0000ffc000ff0000ff8000fe0000ff0000000000fc0000000000>} imagemask 
  }
  104 /G68 MSTT31c322 AddChar
/G6f [40.0 0.0 5.0 -1.0 46.0 36.0]
/G6f {
    41 37 true [1 0 0 -1 -5.0 36.0] {<00001ff000000000fffe00000003ffffc0000007fffff000000ffffff800001fff07fc00003ffc03
fe00007ff001ff0000ffe001ff0001ffc001ff0001ff8001ff0003ff0001ff0007ff0001ff0007fe
0001ff000ffe0001ff000ffc0001ff000ffc0003fe001ff80003fe001ff80003fe001ff80007fc00
3ff00007fc003ff00007fc003ff0000ff8003fe0000ff8003fe0001ff0003fe0003ff0003fe0007f
e0003fe000ffc0003fe001ffc0003fe003ff80001ff007ff00001ff83ffe00000ffffff8000007ff
fff0000003ffffc0000000ffff000000001ff8000000>} imagemask 
  }
  111 /G6f MSTT31c322 AddChar
%%EndResource

695 447 436 (Using Python) 436 SB
694 447 436 (Using Python) 436 SB
32 0 0 75 75 0 0 1 71 /MSTT31c316 font

%%BeginResource: font MSTT31c316
/G3a [25.0 0.0 6.0 -1.0 20.0 36.0]
/G3a {
    14 37 true [1 0 0 -1 -6.0 36.0] {<07c01ff03ff83ffc7ffc7ffc7ffc7ffc3ff83ff81ff007c000000000000000000000000000000000
000000000000000000000f803fe07ff07ff8fff8fff8fff8fff8fff87ff03fe00f80>} imagemask 
  }
  58 /G3a MSTT31c316 AddChar
/G20 [24.0 0.0 0.0 0.0 0.0 0.0]
/G20 {
} 
  32 /G20 MSTT31c316 AddChar
/G61 [36.0 0.0 2.0 -1.0 32.0 36.0]
/G61 {
    30 37 true [1 0 0 -1 -2.0 36.0] {<003fe00000fffe0001ffff8003ffffe007fffff00fff1ff80ffc07f81ff807f81ff003fc3ff003fc
3fe003fc7fe003fc7fc003fc7fc003fc3f8003fc000007fc0007fffc00fffffc03fffffc0ffffffc
1fff87fc3ffe07fc7ff807fc7ff007fcffe007fcffc007fcffc007fcff800ffcff801ffcff803ffc
7f807ffc7fc1fffc3ffffffc1ffffffc0ffff7fc03ffe3fc00ff01f8>} imagemask 
  }
  97 /G61 MSTT31c316 AddChar
/G42 [44.0 0.0 5.0 -3.0 43.0 52.0]
/G42 {
    38 55 true [1 0 0 -1 -5.0 52.0] {<03fff800003fffff80007ffffff000fffffffc00ffffffff00ffffffff80ffffffffc0ffffffffe0
fff007fff0ffe000fff0ffe0003ff8ffe0000ff8ffe0000ffcffe00007fcffc00007fcffc00007fc
ffc00007fcffc0000ffcffc0001ffcffc0003ff8ffc000fff8ffc003fff0ffc01ffff0ffe0ffffe0
ffffffff80ffffffff00fffffffc00fffffff000fffffff000fffffffe00ffffffff80ffffffffe0
fffffffff0ffe007fff0ffc000fff8ffc0003ff8ffc0001ffcffc0001ffcffc0001ffcffc0001ffc
ffc0003ffcffc0003ffcffc0007ff8ffc001fff8ffc003fff0ffc01ffff0ffc0ffffe0ffffffffc0
ffffffff80ffffffff00fffffffc00fffffff000ffffff8000fffffc00003fff800000>} imagemask 
  }
  66 /G42 MSTT31c316 AddChar
/G6f [40.0 0.0 2.0 -1.0 38.0 36.0]
/G6f {
    36 37 true [1 0 0 -1 -2.0 36.0] {<003fe0000000fffe000003ffffc00007fffff0000ffffffc001fff03fe001ffe01ff003ffc00ff80
3ff8007fc07ff0007fc07ff0003fe07fe0003fe07fe0003fe0ffe0001ff0ffe0001ff0ffc0001ff0
ffc0001ff0ffc0001ff0ffc0001ff0ffc0001ff0ffc0001ff0ffc0001ff0ffc0001ff07fc0003ff0
7fc0003fe07fe0003fe03fe0007fe03fe0007fc01ff000ffc01ff001ffc00ff803ff8007fe0fff00
03fffffe0001fffffc00007ffff800001fffe0000003ff0000>} imagemask 
  }
  111 /G6f MSTT31c316 AddChar
/G6b [36.0 0.0 2.0 -1.0 35.0 56.0]
/G6b {
    33 57 true [1 0 0 -1 -2.0 56.0] {<7f80000000ffc0000000ffc0000000ffc0000000ffc0000000ffc0000000ffc0000000ffc0000000
ffc0000000ffc0000000ffc0000000ffc0000000ffc00000007fc00000007fc00000007fc0000000
7fc00000007fc00000007fc00000007fc00000007fc00000007fc0003f007fc001ff807fc007ff00
7fc00ffe007fc01ffe007fc03ffc007fc07ff8007fc0fff0007fc0ffe0007fc1ffc0007fc3ff8000
7fc7ff00007fcffe00007fcffc00007fdff800007ffff000007fffe000007fffc000007fffe00000
7fffe000007ffff000007ffff800007ffffc00007ffffe00007fe7fe00007fc3ff00007fc1ff8000
7fc0ffc0007fc07fe0007fc03ff0007fc01ff8007fc01ffc007fc00ffe007fc007fe007fc003ff00
3fc000fe00>} imagemask 
  }
  107 /G6b MSTT31c316 AddChar
/G50 [43.0 0.0 4.0 -1.0 43.0 52.0]
/G50 {
    39 53 true [1 0 0 -1 -4.0 52.0] {<3fffe00000ffffff0000ffffffe000fffffff800fffffffe00ffffffff00ffffffff80ffffffffc0
fff807ffe07ff001fff07fe000fff07fe0007ff87fe0003ff87fe0003ffc7fe0001ffc7fe0001ffe
7fe0001ffe7fe0001ffe7fe0001ffe7fe0001ffe7fe0003ffe7fe0003ffe7fe0003ffe7fe0007ffc
7fe000fffc7fe001fffc7fe007fff87fe03ffff07ffffffff07fffffffe07fffffffc07fffffff00
7ffffffe007ffffff8007fffffc0007ffffc00007ff00000007ff00000007fe00000007fe0000000
7fe00000007fe00000007fe00000007fe00000007fe00000007fe00000007fe00000007fe0000000
7fe00000007fe00000007fe00000007fe00000003fc0000000>} imagemask 
  }
  80 /G50 MSTT31c316 AddChar
/G72 [25.0 0.0 3.0 -1.0 24.0 36.0]
/G72 {
    21 37 true [1 0 0 -1 -3.0 36.0] {<7f8000ff8000ff87e0ff8ff0ff9ff0ff9ff8ffbff8ffbff8ffbff8fffff8fffff8fff3f8fff3f8ff
e3f8ffe3f8ffe1f0ffc0e0ffc000ffc000ffc000ffc000ff8000ff8000ff8000ff8000ff8000ff80
00ff8000ff8000ff8000ffc000ffc000ffc000ffc000ffc000ffc0007f8000>} imagemask 
  }
  114 /G72 MSTT31c316 AddChar
/G65 [36.0 0.0 3.0 -1.0 35.0 36.0]
/G65 {
    32 37 true [1 0 0 -1 -3.0 36.0] {<003f800000fff80003ffff0007ffffc00fffffe00ffe1ff01ffc0ff81ff807f83ff007fc3ff003fc
7fe003fe7fe003fe7fc003fe7fc003ffffc007ffffc0fffffffffffffffffffffffffffffffffffe
fffffff8fffffc00fffe0000ffc00000ffc0007f7fc000ff7fc001ff7fc003fe3fe003fc3fe007fc
1ff00ff81ff83ff00fffffe003ffffc001ffff80003fff000003f800>} imagemask 
  }
  101 /G65 MSTT31c316 AddChar
/G76 [34.0 0.0 0.0 0.0 35.0 35.0]
/G76 {
    35 35 true [1 0 0 -1 0.0 35.0] {<ff00001fe0ff80003fe0ff80003fe07fc0007fc07fc0007fc07fc0007f803fe000ff803fe000ff80
3fe000ff001ff001ff001ff001fe001ff003fe000ff003fe000ff803fc000ff807fc0007f807f800
07fc0ff80007fc0ff80003fc0ff00003fe1ff00003fe1fe00001fe1fe00001ff3fc00001ff3fc000
00ff3fc00000ff3f800000ffff8000007fff0000007fff0000007fff0000003ffe0000003ffe0000
003ffc0000001ffc0000000ff80000>} imagemask 
  }
  118 /G76 MSTT31c316 AddChar
/G69 [16.0 0.0 2.0 0.0 13.0 50.0]
/G69 {
    11 50 true [1 0 0 -1 -2.0 50.0] {<1f003f807fc0ffe0ffe0ffe0ffe0ffe07fc07f801f00000000000000000000003f807fc07fc07fc0
7fc07fc07fc07fc07fc07fc07fc07fc07fc07fc07fc07fc07fc07fc07fc07fc07fc07fc07fc07fc0
7fc07fc07fc07fc07fc07fc07fc07fc07f803f80>} imagemask 
  }
  105 /G69 MSTT31c316 AddChar
/G77 [51.0 0.0 0.0 -1.0 51.0 36.0]
/G77 {
    51 37 true [1 0 0 -1 0.0 36.0] {<fc000000000fc0ff000000001fe0ff8001f0001fe0ff8003fc003fe07f8003fc003fc07fc003fe00
3fc07fc003fe007fc07fc007fe007f803fc007fe007f803fe007ff007f803fe007ff00ff003fe00f
ff00ff001fe00fff00ff001fe00fff00ff001ff01fff81fe001ff01fff81fe000ff01fff81fe000f
f01fff81fc000ff83fff83fc000ff83f3f83fc0007f83f3fc3fc0007f83e3fc3f80007f87e3fc7f8
0007fc7e3fc7f80003fc7e1fc7f00003fc7c1feff00003fcfc1ffff00001fffc1fffe00001fffc1f
ffe00001fff80fffe00001fff80fffe00000fff80fffc00000fff00fffc00000fff007ffc00000ff
f007ff8000007ff001ff0000003fe000000000>} imagemask 
  }
  119 /G77 MSTT31c316 AddChar
%%EndResource

1131 447 600 (":  a Book Preview) 600 SB
1130 447 600 (":  a Book Preview) 600 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
1050 736 300 (May 13, 1995) 300 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1110 879 180 (Mark Lutz) 180 SB
1044 929 311 (Boulder, Colorado) 311 SB
1060 979 279 (lutz@kapre.com) 279 SB
1001 1029 398 (\(303\) 546-8848  [work]) 398 SB
1002 1079 395 (\(303\) 684-9565 [home]) 395 SB
32 0 0 50 50 0 0 1 48 /MSTT31c29a font

%%BeginResource: font MSTT31c29a
/G49 [16.0 0.0 2.0 0.0 14.0 35.0]
/G49 {
    12 35 true [1 0 0 -1 -2.0 35.0] {<fff0fff0fff0fff0fff0fff0fff0ffe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe0
7fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe07fe0>} imagemask 
  }
  73 /G49 MSTT31c29a AddChar
/G64 [37.0 0.0 2.0 0.0 36.0 35.0]
/G64 {
    34 35 true [1 0 0 -1 -2.0 35.0] {<fffff00000ffffff0000ffffffc000ffffffe000fffffff000fffffff8007ffffffc007ffffffe00
7ffffffe007fe1ffff007fe07fff007fe01fff807fe00fff807fe007ff807fe003ffc07fe001ffc0
7fe001ffc07fe000ffc07fe000ffc07fe001ffc07fe001ffc07fe003ff807fe007ff807fe00fff80
7fe01fff007fe07fff007fe1fffe007ffffffe007ffffffc007ffffff8007ffffff0007fffffe000
7fffffc0007fffff0000fffffc0000>} imagemask 
  }
  100 /G64 MSTT31c29a AddChar
%%EndResource

301 1959 419 (Introduction.) 419 SB
300 1959 419 (Introduction.) 419 SB
255 255 255 fC
/fm 256 def
1819 3 290 1955 B
1 F
n
0 0 0 fC
2 2 287 1952 B
1 F
n
2 2 287 1952 B
1 F
n
1819 2 290 1952 B
1 F
n
2 2 2110 1952 B
1 F
n
2 2 2110 1952 B
1 F
n
255 255 255 fC
1819 3 290 2019 B
1 F
n
0 0 0 fC
2 2 287 2023 B
1 F
n
2 2 287 2023 B
1 F
n
1819 2 290 2023 B
1 F
n
2 2 2110 2023 B
1 F
n
2 2 2110 2023 B
1 F
n
2 67 287 1955 B
1 F
n
2 67 2110 1955 B
1 F
n
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
300 2178 1709 (This paper is a brief overview of the upcoming Python O'Reilly book I'm writing.  I received a formal) 1709 SB
300 2228 1071 (contract for the book in April.  Roughly, the book will be some ) 1071 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
1371 2228 169 (400 pages) 169 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
1540 2228 548 (, and should be ready \(at least in) 548 SB
300 2278 236 (beta form\) by ) 236 SB
32 0 0 42 42 1 0 0 38 /Times-Roman /font32 ANSIFont font
536 2278 162 (fall, 1995) 162 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
698 2278 11 (.) 11 SB
300 2378 1790 (Although we've spent quite a bit of time developing the current outline, everything mentioned here should) 1790 SB
300 2428 249 (be considered ') 249 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font31 ANSIFont font
549 2428 166 (pre-alpha) 166 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
715 2428 1320 (' material at best.  In particular, the outline is prone to frequent change \(it will) 1320 SB
300 2478 1776 (probably change by the time you read this!\), and my editor and reviewers will have a big influence on the) 1776 SB
300 2528 1402 (book's final structure.  So please take all this with a reasonably large 'grain-of-salt'.) 1402 SB
300 2628 1721 (Some of what gets covered in the book is still open to input; in fact, this is one reason I'm making this) 1721 SB
300 2678 1727 (information public right now.  If you have suggestions, I'd be happy to listen.  I may also be asking for) 1727 SB
300 2728 1137 (comments from experts in some of the domains the book addresses.) 1137 SB
EJ RS
%%PageTrailer
%%Trailer
SVDoc restore
end
% TrueType font name key:
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT31c281 = 2d1fDTimes New RomanF0000002a000001900000
%    MSTT31c28e = 2d1fDCourier NewF00000026000001900000
%    MSTT31c29a = 2d1fDInformal011 BTF00000032000002bc0000
%    MSTT31c2a7 = 2d1fDArialF0000002a000002bc0000
%    MSTT31c2b2 = 2d1fDWingdingsF00000019000001900000
%    MSTT31c2be = 2d1fDTimes New RomanF0000002a000001900001
%    MSTT31c2cb = 2d1fDTimes New RomanF00000032000001900001
%    MSTT31c2d8 = 2d1fDTimes New RomanF0000002a000002bc0000
%    MSTT31c2e5 = 2d1fDCourier NewF0000002e000001900000
%    MSTT31c2f1 = 2d1fDCourier NewF0000002e000001900001
%    MSTT31c2fd = 2d1fDArialF00000032000002bc0000
%    MSTT31c308 = 2d1fDArialF00000043000002bc0000
%    MSTT31c316 = 2d1fDImpress BTF0000004b000002bc0000
%    MSTT31c322 = 2d1fDImpress BTF0000004b000002bc0001
%    MSTT31c32e = 2d1fDArialF0000002a000001900000
%    MSTT31c339 = 2d1fDCourier NewF0000002a000001900000
%%DocumentSuppliedResources: procset Win35Dict 3 1
%%+ font MSTT31c29a
%%+ font MSTT31c2b2
%%+ font MSTT31c316
%%+ font MSTT31c322

%%DocumentNeededResources: font Courier
%%+ font Courier-Oblique
%%+ font Helvetica-Bold
%%+ font Times-Italic
%%+ font Times-Roman

%%EOF
                                                                                                   