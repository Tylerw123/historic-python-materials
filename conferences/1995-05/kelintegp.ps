%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
%
% Modified by sjk 12/22/94 - changed false to true
%
/FMPrintAllColorsAsBlack             true def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 22 FMDOCUMENT
0 0 /AvantGarde-Book FMFONTDEFINE
1 0 /Helvetica-Bold FMFONTDEFINE
2 0 /AvantGarde-Demi FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
5 0 /Times-Bold FMFONTDEFINE
6 0 /Helvetica FMFONTDEFINE
7 0 /Helvetica-Oblique FMFONTDEFINE
8 0 /Times-BoldItalic FMFONTDEFINE
9 0 /AvantGarde-DemiOblique FMFONTDEFINE
10 0 /Helvetica-BoldOblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "29" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(29) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
1 11 Q
(################################################################) 108 712.67 T
1.22 (# 2\051 embedded code attached to a database object as a character string;) 108 699.67 P
1.22 (# - \324segment\325 is preset by C++ to pass-in the key string) 108 686.67 P
1.22 (# - \324segmentV) 108 673.67 P
1.22 (alue\325 is set here to send the result back to C++) 181.36 673.67 P
(################################################################) 108 660.67 T
1.22 (def trace\050text\051:) 108 634.67 P
1.22 (    import fkstuff) 108 621.67 P
1.22 (# a local module) 324 621.67 P
1.22 (    if fkstuff.debug == \324all\325: print text) 108 608.67 P
1.22 (# or send a message, gui,...) 324 608.67 P
1.22 (# legal values) 108 569.67 P
1.22 (fqaOrgs1 = [ \322999\323 ]) 108 556.67 P
1.22 (fqaOrgs2 = [ \3221) 108 543.67 P
1.22 (1) 190.23 543.67 P
1.22 (1\323, \322213\323 ]) 195.74 543.67 P
1.22 (fqaOrgs3 = [ \322122\323, \322224\323 ]) 108 530.67 P
1.22 (fqaTbs1 = [ \3221) 108 504.67 P
1.22 (1) 184.12 504.67 P
1.22 (1) 189.63 504.67 P
1.22 (1\323, \3221) 195.14 504.67 P
1.22 (1) 225.1 504.67 P
1.22 (12\323, \3221) 230.62 504.67 P
1.22 (120\323, \3221) 266.7 504.67 P
1.22 (130\323, \3221210\323, \3221220\323, \32221) 308.89 504.67 P
1.22 (10\323,) 442.82 504.67 P
1.22 (    \3222120\323, \3222210\323, \3223100\323, \3223200\323, \3223300\323 ]) 108 491.67 P
1.22 (fqaTbs2 = [ \3224100\323, \3224500\323, \3225100\323, \3225200\323, \3225310\323, \3225320\323, \3225330\323,) 108 465.67 P
1.22 (    \3225340\323, \3226100\323, \0506500, 7000\051, 7510]) 108 452.67 P
1.22 (fqaTbs3 = [ \3224100\323, \3224500\323, \3225100\323, \3225200\323, \3225310\323, \3225320\323, \3225330\323 ]) 108 426.67 P
1.22 (org = segment[ :3 ]) 108 387.67 P
1.22 (# split the key string) 266.4 387.67 P
1.22 (tb) 108 374.67 P
1.22 (= segment[ 3: ]) 131.23 374.67 P
1.22 (# some inter-key constraints...) 108 335.67 P
1.22 (segmentV) 108 322.67 P
1.22 (alid = 1) 159.96 322.67 P
1.22 (if validateSegment\050 org, fqaOrgs1 \051:) 108 296.67 P
1.22 (    if not validateSegment\050 tb, fqaTbs1 \051:) 108 283.67 P
0.96 (        trace\050\322T) 108 270.67 P
0.96 (rial balance %s is not valid for organization %s\323 % \050tb, org\051\051) 181.71 270.67 P
1.22 (        segmentV) 108 257.67 P
1.22 (alid = 0) 194.21 257.67 P
1.22 (elif validateSegment\050 org, fqaOrgs2 \051:) 108 231.67 P
1.22 (    if not validateSegment\050 tb, fqaTbs1 + fqaTbs3\051:) 108 218.67 P
0.96 (        trace\050\322T) 108 205.67 P
0.96 (rial balance %s is not valid for organization %s\323 % \050tb, org\051\051) 181.71 205.67 P
1.22 (        segmentV) 108 192.67 P
1.22 (alid = 0) 194.21 192.67 P
1.22 (elif validateSegment\050 org, fqaOrgs3 \051:) 108 166.67 P
1.22 (    if not validateSegment2\050 tb, fqaTbs2 \051:) 108 153.67 P
0.96 (        trace\050\322T) 108 140.67 P
0.96 (rial balance %s is not valid for organization %s\323 % \050tb, org\051\051) 181.71 140.67 P
1.22 (        segmentV) 108 127.67 P
1.22 (alid = 0) 194.21 127.67 P
(else:) 108 101.67 T
1.22 (    trace\050\322%s is not a valid organization\323 % org\051) 108 88.67 P
1.22 (    segmentV) 108 75.67 P
1.22 (alid = 0) 177.09 75.67 P
FMENDPAGE
%%EndPage: "29" 1
%%Page: "28" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(28) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
503.72 709.38 108 709.38 2 L
V
1.26 H
0 Z
N
2 14 Q
-0.12 0.28 (Appendix B: KaPRE\325s account-key rule system \050\324\337exkey\325\051) 108 710.67 B
3 11 Q
0.03 (Here\325) 108 675.67 P
0.03 (s an example of one way KEL is currently being used in KaPRE\325) 132.43 675.67 P
0.03 (s \336nancial systems.) 418.7 675.67 P
0.63 (Roughly) 108 662.67 P
0.63 (, our general-ledger system allows users/sites to specify rules about account key) 145.18 662.67 P
1.1 (validity) 108 649.67 P
1.1 (, along with sets of legal values for a key\325) 140.9 649.67 P
1.1 (s components. For instance,) 334.11 649.67 P
1 F
1.22 (\322Given an account key \324type:name:center) 122.4 623.67 P
1.22 (\325:) 344.1 623.67 P
1.22 (If this is an \324asset\325 type account, and the name is \324Guido\325,) 136.8 610.67 P
1.22 (Then the center must be in [\324spam\325, \324eggs\325, \324hash\325].\323) 136.8 597.67 P
3 F
3.4 (These rules are associated with nodes in an account-hierarchy model, and applied) 108 567.67 P
1.77 (whenever a new account is created \050statically or dynamically\051. Originally) 108 554.67 P
1.77 (, this system) 445.77 554.67 P
0.59 (used a proprietary language parser/interpreter) 108 541.67 P
0.59 (. By moving to embedded Python code, we) 310.13 541.67 P
1.49 (were able to provide a much richer con\336guration language, achieve a radical speedup,) 108 528.67 P
0.69 (and eliminate yet another parser module. For instance, rules can pop-up Tkinter dialogs.) 108 515.67 P
1.1 (This is fairly representative of our current KEL applications:) 108 493.67 P
(\245) 108 471.67 T
(Code is stored as multi-line C++ character strings on persistent \050database\051 objects) 118.8 471.67 T
(\245) 108 458.67 T
(Global \050module\051 variables are set by C++ as input to the embedded Python code) 118.8 458.67 T
(\245) 108 445.67 T
(Global variables are set in Python, and fetched by C++ as the code\325) 118.8 445.67 T
(s result.) 415.02 445.67 T
3.24 (The enclosing C++ program calls: KEL_make_dummy_module\050\051, KEL_set_global\050\051,) 108 419.67 P
0.11 (KEL_run_statements\050\051, KEL_get_global\050\051. This KEL application does not \050yet\051 make use) 108 406.67 P
0.49 (of the \324generic-access\325 interface for using passed-in C++ instances in Python. Embedded) 108 393.67 P
1.1 (\337exkey code just uses a passed-in string, and returns an integer result.) 108 380.67 P
0.41 (A support \336le, \324\337exkey) 108 358.67 P
0.41 (.py\325, is automatically pre-imported into the \337exkey module/name-) 210.57 358.67 P
0.56 (space by the C++ system [it runs a \322from \337exkey import *\323 string in the created module) 108 345.67 P
0.08 (where embedded strings are run]. This \336le, and an example of \337exkey code appear below) 108 332.67 P
0.08 (.) 501.25 332.67 P
1 F
(################################################################) 108 284.67 T
1.22 (# 1\051 Support \336le \324\337exkey) 108 271.67 P
1.22 (.py\325 \050user-con\336gurable\051:) 238.62 271.67 P
(################################################################) 108 258.67 T
1.22 (def validateSegment\050 segment, validV) 108 232.67 P
1.22 (alues \051:) 308.51 232.67 P
1.22 (# simple membership) 381.6 232.67 P
1.22 (return segment in validV) 136.8 219.67 P
1.22 (alues:) 268.23 219.67 P
1.22 (def validateSegment2\050 segment, validV) 108 193.67 P
1.22 (alues \051:) 314.63 193.67 P
1.22 (# allow ranges: tuples) 381.6 193.67 P
1.22 (for test in validV) 136.8 180.67 P
1.22 (alues:) 225.44 180.67 P
1.22 (if type\050test\051 == type\050\322\322\051:) 165.6 167.67 P
1.22 (if segment != test:) 194.4 154.67 P
1.22 (return 0) 216 141.67 P
(else:) 165.6 128.67 T
1.22 (if not \050 test[0] < segment < test[1] \051:) 194.4 115.67 P
1.22 (return 0) 216 102.67 P
1.22 (return 1) 136.8 89.67 P
FMENDPAGE
%%EndPage: "28" 2
%%Page: "27" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(27) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
1 11 Q
(/*******************************************************************************) 108 699.67 T
1.22 ( * misc. stuff) 108 686.67 P
1.22 ( ******************************************************************************/) 108 673.67 P
1.22 (extern void) 108 634.67 P
1.22 (KEL_save_object\050void *pobj\051;) 108 621.67 P
1.22 (// \324O\325 format: inc ref count) 295.2 621.67 P
1.22 (extern void) 108 582.67 P
1.22 (KEL_drop_object\050void *pobj\051;) 108 569.67 P
1.22 (// \324O\325 format: dec ref count manually) 295.2 569.67 P
1.22 (extern int) 108 530.67 P
1.22 (KEL_run_command_result\050char *expression, char *resfmt,  void *cresult\051;) 108 517.67 P
1.22 (extern int) 108 478.67 P
1.22 (KEL_run_command_line\050char *prompt\051;     // goto interactive loop) 108 465.67 P
1.22 (extern int) 108 426.67 P
1.22 (KEL_unpack_object\050void *pyobj, char *cnvfmt, ... /* &cval\050s\051 */\051;) 108 413.67 P
1.22 (extern void *) 108 374.67 P
1.22 (KEL_pack_object\050char *cnvfmt, ... /* cval\050s\051 */\051;) 108 361.67 P
1.22 (extern void *) 108 322.67 P
(KEL_fetch_None\050\051;) 108 309.67 T
1.22 (// get \324None\325: python\325) 266.4 309.67 P
1.22 (s void) 378.45 309.67 P
FMENDPAGE
%%EndPage: "27" 3
%%Page: "26" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(26) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
1 11 Q
(/*******************************************************************************) 108 712.67 T
1.22 ( * run a python expression string; bind \050global\051 variables \336rst;) 108 699.67 P
1.22 ( ******************************************************************************/) 108 686.67 P
1.22 (extern int) 108 647.67 P
(KEL_run_expression\050) 108 634.67 T
1.22 (char *modname,) 223.2 634.67 P
1.22 (char *expression,) 324 634.67 P
1.22 (char *resfmt,) 223.2 621.67 P
1.22 (void *cresult,) 324 621.67 P
1.22 (...    /* \322name\323, \322fmt\323, val,...  NULL */ \051;) 223.2 608.67 P
1.22 (extern int) 108 582.67 P
(KEL_run_statements\050) 108 569.67 T
1.22 (char *modname,) 223.2 569.67 P
1.22 (char *statements,) 324 569.67 P
1.22 (...    /* \322name\323, \322fmt\323, val,...  NULL */ \051;) 223.2 556.67 P
(/*******************************************************************************) 108 504.67 T
1.22 ( * get/set values of global \050module\051 python variables) 108 491.67 P
1.22 ( ******************************************************************************/) 108 478.67 P
1.22 (extern int) 108 439.67 P
(KEL_get_global\050) 108 426.67 T
1.22 (char *modname,) 194.79 426.67 P
1.22 (char *varname,) 295.2 426.67 P
1.22 (char *valfmt,) 194.4 413.67 P
1.22 (void *cval\051;) 295.2 413.67 P
1.22 (extern int) 108 374.67 P
(KEL_set_global\050) 108 361.67 T
1.22 (char *modname,) 194.4 361.67 P
1.22 (char *varname,) 295.2 361.67 P
1.22 (char *valfmt,  ... /* cval\050s\051 */\051;) 194.4 348.67 P
(/*******************************************************************************) 108 296.67 T
1.22 ( * run object\325) 108 283.67 P
1.22 (s executable method, fetch/set attr \050no module\051) 177.89 283.67 P
1.22 ( ******************************************************************************/) 108 270.67 P
1.22 (extern int) 108 231.67 P
(KEL_run_method\050) 108 218.67 T
1.22 (void *pobject,) 208.8 218.67 P
1.22 (char *method,) 295.2 218.67 P
1.22 (char *resfmt,) 208.8 205.67 P
1.22 (void *cresult,) 295.2 205.67 P
1.22 (char *argfmt,) 208.8 192.67 P
1.22 (... /* arg, arg... */ \051;) 295.2 192.67 P
1.22 (extern int) 108 153.67 P
(KEL_get_member\050) 108 140.67 T
1.22 (void *pobject,) 208.8 140.67 P
1.22 (char *member) 295.2 140.67 P
1.22 (,) 369.18 140.67 P
1.22 (char *valfmt,) 208.8 127.67 P
1.22 (void *cval\051;) 295.2 127.67 P
1.22 (extern int) 108 101.67 P
(KEL_set_member\050) 108 88.67 T
1.22 (void *pobject,) 208.8 88.67 P
1.22 (char *member) 295.2 88.67 P
1.22 (,) 369.18 88.67 P
1.22 (char *valfmt,) 208.8 75.67 P
1.22 (... /* cval\050s\051 */\051;) 295.2 75.67 P
FMENDPAGE
%%EndPage: "26" 4
%%Page: "25" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(25) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
1 11 Q
(/*******************************************************************************) 108 699.67 T
1.22 ( * converters for the \324O&\325 format code) 108 686.67 P
1.22 ( ******************************************************************************/) 108 673.67 P
1.22 (// pass C++ instance in/out directly \050unconverted\051; same as \324K\325 code) 108 634.67 P
1.22 (extern void *) 108 608.67 P
1.22 (PythonThing\050void *cxxObj\051;) 108 595.67 P
1.22 (// C->Python) 352.8 595.67 P
1.22 (extern int) 108 569.67 P
1.22 (CxxThing\050void *pythonObj, void **target\051;) 108 556.67 P
1.22 (// Python -> C) 352.8 556.67 P
1.22 (// convert C++ cltn <--> Python list) 108 517.67 P
1.22 (extern void *) 108 491.67 P
1.22 (PythonList\050void *cxxObj\051;) 108 478.67 P
1.22 (extern int) 108 452.67 P
1.22 (CxxList\050void *pythonObj, void **target\051;) 108 439.67 P
(/*******************************************************************************) 108 387.67 T
1.22 ( * create a dummy \050non-\336le\051 module for get/set_global, strings) 108 374.67 P
1.22 ( ******************************************************************************/) 108 361.67 P
1.22 (extern int) 108 322.67 P
1.22 (KEL_make_dummy_module\050char *modname\051;) 108 309.67 P
(/*******************************************************************************) 108 257.67 T
1.22 ( * run a python function \050or class constructor) 108 244.67 P
1.22 (, or method, or) 353.11 244.67 P
1.22 (...\051) 433.18 244.67 P
1.22 ( ******************************************************************************/) 108 231.67 P
1.22 (extern int) 108 192.67 P
(KEL_run_function) 108 179.67 T
(\050) 203.34 179.67 T
1.22 (char *modname,) 208.8 179.67 P
1.22 (char *funcname,) 309.6 179.67 P
1.22 (char *resfmt,) 208.8 166.67 P
1.22 (void *cresult,) 309.6 166.67 P
1.22 (char *argfmt,) 208.8 153.67 P
1.22 (... /* arg, arg... */ \051;) 309.6 153.67 P
1.22 (extern int) 108 114.67 P
(KEL_run_procedure\050) 108 101.67 T
1.22 (char *modname,) 223.2 101.67 P
1.22 (char *procname,) 324 101.67 P
1.22 (char *argfmt,) 223.2 88.67 P
1.22 (... /* arg, arg... */ \051;) 324 88.67 P
FMENDPAGE
%%EndPage: "25" 5
%%Page: "24" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(24) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
473.39 709.38 108 709.38 2 L
V
1.26 H
0 Z
N
2 14 Q
0.28 (Appendix A: The embedded-call API \050KELembed.h\051.) 108 710.67 S
4 11 Q
1.1 (W) 108 683.67 P
1.1 (arning: extr) 116.15 683.67 P
1.1 (emely pr) 169.7 683.67 P
1.1 (one to change...) 208.57 683.67 P
1 F
(//*******************************************************************************) 108 639.67 T
1.22 ( * execution-mode switches \050bit patterns\051) 108 626.67 P
1.22 ( ******************************************************************************/) 108 613.67 P
1.22 (#de\336ne KEL_DEBUG_FUNCTIONS) 108 574.67 P
1.22 (1) 309.6 574.67 P
1.22 (#de\336ne KEL_DEBUG_ST) 108 561.67 P
1.22 (A) 237.99 561.67 P
1.22 (TEMENTS) 245.12 561.67 P
(2) 309.6 561.67 T
1.22 (#de\336ne KEL_DEBUG_EXPRESSIONS) 108 548.67 P
(4) 309.6 548.67 T
1.22 (#de\336ne KEL_DEBUG_STRINGS) 108 535.67 P
(6) 309.6 535.67 T
1.22 (#de\336ne KEL_DEBUG_ALL) 108 522.67 P
(7) 309.6 522.67 T
1.22 (#de\336ne KEL_RELOAD_ALL) 108 496.67 P
(1) 309.6 496.67 T
1.22 (extern int KEL_RELOAD_MODE;) 108 470.67 P
1.22 (extern int KEL_DEBUG_MODE;) 108 457.67 P
1.22 (extern void KEL_set_debug\050int modebits\051;) 108 431.67 P
1.22 (extern void KEL_clear_debug\050int modebits\051;) 108 418.67 P
1.22 (extern void KEL_set_reload\050int modebits\051;) 108 392.67 P
1.22 (extern void KEL_clear_reload\050int modebits\051;) 108 379.67 P
(/*******************************************************************************) 108 327.67 T
1.22 ( * selective reload/debug) 108 314.67 P
1.22 ( ******************************************************************************/) 108 301.67 P
1.22 (extern void KEL_set_spypoint\050char *modname, char *funcname\051;) 108 262.67 P
1.22 (extern void KEL_clear_spypoint\050char *modname, char *funcname\051;) 108 249.67 P
1.22 (extern void KEL_set_reload_name\050char *modname\051;) 108 223.67 P
1.22 (extern void KEL_clear_reload_name\050char *modname\051;) 108 210.67 P
(/*******************************************************************************) 108 158.67 T
1.22 ( * message-handling) 108 145.67 P
1.22 ( ******************************************************************************/) 108 132.67 P
1.22 (extern int   KEL_VERBOSE;) 108 93.67 P
1.22 (extern char *KEL_LASTMSG;) 108 80.67 P
FMENDPAGE
%%EndPage: "24" 6
%%Page: "23" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(23) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
181.08 709.38 108 709.38 2 L
V
1.26 H
0 Z
N
2 14 Q
0.28 (Caveats \050r) 108 710.67 S
253.62 709.38 180.83 709.38 2 L
V
N
0.28 (oom for gr) 180.83 710.67 S
297.05 709.38 253.37 709.38 2 L
V
N
0.28 (owth\051.) 253.37 710.67 S
3 11 Q
(\245) 108 670.67 T
(Generic-access is simpler) 118.8 670.67 T
(, but not as general as a wrapper) 230.77 670.67 T
(-code generation scheme:) 372.28 670.67 T
(\245) 126 651.67 T
(KEL code can only create \324) 136.8 651.67 T
4 F
(default) 257.45 651.67 T
3 F
(\325 new instances \050and set members manually\051.) 288.01 651.67 T
(\245) 126 632.67 T
(Indexing/method-calls need a member name: can\325) 136.8 632.67 T
(t pass-in a \324Cltn\325 at the top-level.) 356.86 632.67 T
(\245) 126 613.67 T
(Only works on \324generic-access\325 classes \050under \324gT) 136.8 613.67 T
(ype\325/\325gThing\325; persistence ok\051.) 359.01 613.67 T
(\245) 126 594.67 T
(Need to manually register class\325) 136.8 594.67 T
(s) 277.94 594.67 T
4 F
(methods) 284.97 594.67 T
3 F
( for generic use \050a better way?\051.) 321.63 594.67 T
(\245) 126 575.67 T
1.84 (W) 136.8 575.67 P
1.84 (ithout stub classes,) 146.74 575.67 P
4 F
1.84 (all) 237.84 575.67 P
3 F
1.84 ( public members visible to generic-access are exposed:) 249.45 575.67 P
(extra features needed to limit exposure.) 136.8 562.67 T
(\245) 126 543.67 T
2.76 (W) 136.8 543.67 P
2.76 (ithout stub-classes, there\325) 146.74 543.67 P
2.76 (s no) 263.79 543.67 P
4 F
2.76 (documentation) 290.09 543.67 P
3 F
2.76 ( on what members/methods are) 355.47 543.67 P
(available to KEL code: need extra documentation.) 136.8 530.67 T
(\245) 126 511.67 T
(Not as \324) 136.8 511.67 T
4 F
(seamless) 171.63 511.67 T
3 F
(\325 as wrapper) 210.73 511.67 T
(-code scheme \050but more in synch with KaPRE++\051.) 264.87 511.67 T
(\245) 126 492.67 T
(Not) 136.8 492.67 T
4 F
(symmetric) 156.05 492.67 T
3 F
(: Python uses C++ classes, but C++ can\325) 201.26 492.67 T
(t use Python classes, as is.) 379.26 492.67 T
(\245) 108 451.67 T
0.16 (KELembed.c should be a C++ all-static class, not a C \336le \050the only real \324C\325 module we) 118.8 451.67 P
(need is the generated \324con\336g.c\325, which doesn\325) 118.8 438.67 T
(t compile under C++ in release 1.1\051.) 320.83 438.67 T
(\245) 108 397.67 T
-0.12 (The next Python release \0501.2\051 may make some of our local patches obsolete. It may also) 118.8 397.67 P
0.86 (make some of the embedded-call API, and registration of new conversion codes \050like) 118.8 384.67 P
-0.25 (our \324K\325\051 standard Python features. [Guido mentioned something about trying to reverse-) 118.8 371.67 P
(engineer some of these features].) 118.8 358.67 T
(\245) 108 317.67 T
(A number of Python shortcomings were identi\336ed \050again, may be \336xed in 1.2\051:) 118.8 317.67 T
(\245) 126 298.67 T
1.76 (Overloading \324__cmp__\325 method only catches \322KapreThing <cmp> KapreThing\323) 136.8 298.67 P
3.8 (cases. Mixed cases \0501 operand not a \322KapreThing\323 instance\051 don\325) 136.8 285.67 P
3.8 (t use the) 459.74 285.67 P
0.5 (\324__cmp__\325 method. This will be \336xed in 1.2. For now) 136.8 272.67 P
0.5 (, KEL coders can cast-down) 377.68 272.67 P
(manually in comparisons: \322int\050KT\051 > 1000\323, \322999 < asPython\050KT\051\323, etc.) 136.8 259.67 T
(\245) 126 240.67 T
2.77 (Python doesn\325) 136.8 240.67 P
2.77 (t always automatically coerce class instances down to primitive) 202.62 240.67 P
0.7 (types, even if \324__coerce__\325, \324__int__\325, etc., methods are overloaded. For instance,) 136.8 227.67 P
2.2 (\322KapreThing\323 instances used in range\050\051, as indexes, etc., must be casted-down) 136.8 214.67 P
(manually) 136.8 201.67 T
(, as for comparisons.) 177.03 201.67 T
(\245) 108 160.67 T
1.06 (The stand-alone \324python\325 executable is built without any C++ libraries \050cxx is a stub) 118.8 160.67 P
0.72 (module\051. This may be an issue if/when a UI needs to) 118.8 147.67 P
4 F
0.72 (spawn) 361.31 147.67 P
3 F
0.72 ( a command-line process,) 389.43 147.67 P
(instead of calling it as a function.) 118.8 134.67 T
(\245) 108 93.67 T
0.38 (Some issues remain open: UI issues \050spawning python shells, interactive boxes\051, using) 118.8 93.67 P
(wrapped HashDict\325) 118.8 80.67 T
(s like Python dictionaries,...) 204.03 80.67 T
FMENDPAGE
%%EndPage: "23" 7
%%Page: "22" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(22) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
138.24 709.38 108 709.38 2 L
V
1.26 H
0 Z
N
2 14 Q
0.28 (Sour) 108 710.67 S
290.74 709.38 137.86 709.38 2 L
V
N
0.28 (ces of additional infor) 137.86 710.67 S
344.01 709.38 290.81 709.38 2 L
V
N
0.28 (mation.) 290.81 710.67 S
5 12 Q
(\245) 108 648 T
(KEL use \050sour) 118.8 648 T
(ce \336les\051:) 193.26 648 T
1 11 Q
(/development/projects/stuff/project/src/kel/*) 122.4 627.67 T
6 F
1.22 (the embedding/extension interfaces code, API header \336le,...) 136.8 614.67 P
1 F
(/development/projects/stuff/project/test/keltest/*) 122.4 588.67 T
6 F
1.22 (test programs, more examples, linkage speci\336cations) 136.8 575.67 P
1.22 (Also: see \324) 122.4 549.67 P
7 F
1.22 (KEL: An Overview) 175.59 549.67 P
6 F
1.22 (\325 for background information.) 267.29 549.67 P
5 12 Q
(\245) 108 488 T
(Python use:) 118.8 488 T
1 11 Q
(/development/python-1.1/Doc/POSTSCRIPT/*) 122.4 467.67 T
6 F
1.22 (standard manuals/tutorial:) 136.8 454.67 P
1.22 (tut.ps: a Python tutorial) 151.2 441.67 P
(ref.ps:) 151.2 428.67 T
1.22 ( language reference) 181.77 428.67 P
(lib.ps) 151.2 415.67 T
1.22 (: library modules/services) 180 415.67 P
1.22 (ext.ps: C embedding/extensions) 151.2 402.67 P
1.22 (life-preserver) 151.2 389.67 P
1.22 (.ps: tkpython GUI module manual) 214.77 389.67 P
1.22 (Also: an \324alpha\325 version of a book tutorial section \050see me\051.) 122.4 363.67 P
5 12 Q
(\245) 108 302 T
(Python code examples on-line:) 118.8 302 T
1 11 Q
(/home/lutz/public/python/Apps/*) 122.4 281.67 T
6 F
1.22 (shell-scripts, a class-based application framework,...) 136.8 268.67 P
1 F
1.22 (/home/lutz/public/python/{Demo2, Gui}/*) 122.4 242.67 P
6 F
1.22 (an expert system, command-line shell, set classes, Tkinter stuf) 136.8 229.67 P
1.22 (f...) 452.04 229.67 P
1 F
1.22 (/development/python-1.1/{Lib, Demo}/*) 122.4 203.67 P
6 F
1.22 (examples in the standard python distribution) 136.8 190.67 P
1 F
(/development/projects/stuff/project/src/kel/KEL.py) 122.4 164.67 T
6 F
1.22 (the wrapper class for passed-in kapre C++ objects) 136.8 151.67 P
1 F
(/development/projects/stuff/project/test/keltest/*.py) 122.4 125.67 T
6 F
1.22 (some simple embedded python code examples) 136.8 112.67 P
0.47 (Note: \324/development\325 paths are prone to change \050especially the python-1.1 path\051.) 108 77.67 P
FMENDPAGE
%%EndPage: "22" 8
%%Page: "21" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(21) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
263.4 632.38 108 632.38 2 L
V
1.26 H
0 Z
N
2 14 Q
0.28 (Local Python patches.) 108 633.67 S
3 11 Q
2.12 (T) 108 615.67 P
2.12 (o support KEL, the Python language system was changed locally) 113.95 615.67 P
2.12 (. All patches were) 418.23 615.67 P
1.67 (minor) 108 602.67 P
1.67 (, and there were relatively few \050roughly a half-dozen\051. A \336le documenting what) 133.84 602.67 P
1.1 (was changed is maintained at:) 108 589.67 P
1 F
(/development/python-1.1/KAPREMODS) 165.6 563.67 T
134.88 466.38 108 466.38 2 L
V
N
2 14 Q
0.28 (Mor) 108 467.67 S
238.09 466.38 134.77 466.38 2 L
V
N
0.28 (e examples?...) 134.77 467.67 S
3 11 Q
1.44 (See \336les \324) 108 449.67 P
4 F
1.44 (testapp1.c) 154.26 449.67 P
3 F
1.44 (\325, and \324) 199.18 449.67 P
4 F
1.44 (testapp2.C) 233.52 449.67 P
3 F
1.44 (\325 in the \324keltest\325 directory) 280.88 449.67 P
1.44 (, for more examples of) 398.35 449.67 P
3.2 (embedded-calls, and KEL extension code. These KEL test cases will be expanded) 108 436.67 P
(periodically) 108 423.67 T
(.) 159.83 423.67 T
1.02 (One interesting example of a complex Python application: KEL has been considered as) 108 401.67 P
1.38 (an alternative implementation for the equations in the \324N-amounts\325 system. N-amounts) 108 388.67 P
-0.14 ('dependency' links can be implemented by coding N-Amounts as simple Python functions.) 108 375.67 P
1.1 (For instance, at an invoice header/detail, a list of function statements:) 108 362.67 P
1 F
1.22 (def A\050\051: return B\050\051 + C\050\051) 136.8 340.67 P
1.22 (def B\050\051: return D\050\051 + 99) 136.8 327.67 P
1.22 (def C\050\051: return B\050\051 + taxrate\050"Boulder"\051) 136.8 314.67 P
1.22 (D = 24) 136.8 301.67 P
3 F
1.12 (where 'taxrate' is coded in Python or C++ \050in a dynamically-loaded .so\051. Function calls) 108 284.67 P
1.04 (serve to recalculate dependant 'N-amounts'. Circular dependencies will loop, \050but aren\325) 108 271.67 P
1.04 (t) 500.94 271.67 P
1.1 (trapped currently [?]\051.) 108 258.67 P
0.92 (By running these as statements, an N-amount can be recalculated, by calling the named) 108 236.67 P
3.06 (function, after re-setting global variables. This system is still somewhat rough, but) 108 223.67 P
1.1 (illustrates the sort of application-speci\336c structuring some KEL clients may require.) 108 210.67 P
FMENDPAGE
%%EndPage: "21" 9
%%Page: "20" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(20) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
3 11 Q
(\245) 108 690.67 T
-0.23 (Python) 118.8 690.67 P
212.98 689.61 152.49 689.61 2 L
V
0.53 H
0 Z
N
4 F
-0.23 (meta-class-pr) 152.49 690.67 P
244.35 689.61 212.57 689.61 2 L
V
N
-0.23 (otocols) 212.57 690.67 P
3 F
-0.23 ( are used to intercept wrapped C++ object access, and route) 244.35 690.67 P
0.09 (it to the KELextend.C C++ extension module. Python knows nothing about C++ object) 118.8 677.67 P
0.81 (layout, member) 118.8 664.67 P
0.81 (-names, etc. When a class instance is quali\336ed \050\322object.member\323\051, the) 188.44 664.67 P
1.45 (special method \322__getattr__\050self, name\051\323 is called, if the member does not exist: by) 118.8 651.67 P
(rede\336ning this, we intercept all KapreThing quali\336cations.) 118.8 638.67 T
(\245) 108 597.67 T
1.43 (Python) 118.8 597.67 P
192.66 596.61 154.16 596.61 2 L
V
N
4 F
1.43 (operator) 154.16 597.67 P
249.26 596.61 192.44 596.61 2 L
V
N
1.43 (-overloading) 192.44 597.67 P
3 F
1.43 ( is used to make KapreThing's look like normal python) 249.26 597.67 P
3.16 (objects. They can be used in arithmetic expressions, comparisons, etc. For most) 118.8 584.67 P
0.15 (purposes, KEL coders can treat them like other Python objects.In most cases, operators) 118.8 571.67 P
(cast KapreThing\325) 118.8 558.67 T
(s down to native Python objects.) 194.87 558.67 T
(\245) 108 517.67 T
0.09 (Python\325) 118.8 517.67 P
0.09 (s \324for) 153.03 517.67 P
0.09 (\325 loop iterator can also be applied to wrapped C++ instances: iteration just) 177.05 517.67 P
2.93 (uses the overloaded index operator method \050\324__getitem__\325\051, which creates a new) 118.8 504.67 P
(KapreThing, for each loop iteration.) 118.8 491.67 T
(\245) 108 450.67 T
1.18 (Some operations on a KapreThing instance return another KapreThing \050quali\336cation,) 118.8 450.67 P
2.44 (indexing, method calls...\051, while some convert down to a Python object \050addition,) 118.8 437.67 P
(slicing, etc.\051 thereby breaking the C++ connection.) 118.8 424.67 T
(\245) 108 383.67 T
181.14 382.61 118.8 382.61 2 L
V
N
4 F
0.65 (Quali\336cations) 118.8 383.67 P
3 F
0.65 ( \050\322object.member\323\051 are not evaluated immediately) 181.14 383.67 P
0.65 (, but are recorded in a) 404.84 383.67 P
-0.19 (list on the KapreThing; a complete quali\336cation list is evaluated only when the wrapped) 118.8 370.67 P
0.12 (object is used in a Python context. The structure of generic-access currently requires us) 118.8 357.67 P
(to have access to the last member name, for indexing and method calls.) 118.8 344.67 T
(\245) 108 303.67 T
0.04 (There is exactly 1 Python \322) 118.8 303.67 P
282.19 302.61 239.06 302.61 2 L
V
N
4 F
0.04 (stub class) 239.06 303.67 P
3 F
0.04 (\323: KapreThing, in KEL.py) 282.19 303.67 P
0.04 (. Because the KaPRE++) 397.38 303.67 P
1.53 (framework allows for generic member/method access by-name, this single class can) 118.8 290.67 P
0.95 (represent all possible C++ classes. This is better than the code-generation scheme \050in) 118.8 277.67 P
1.24 (the prior paper\051, which requires 1 stub class per C++ class. However) 118.8 264.67 P
1.24 (, it makes KEL) 433.68 264.67 P
3.24 (heavily dependant on generic-access facilities, and the approach is not generally) 118.8 251.67 P
(applicable to other frameworks \050without generating code to simulate generic-access\051.) 118.8 238.67 T
FMENDPAGE
%%EndPage: "20" 10
%%Page: "19" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(19) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
3 11 Q
2.12 (For now) 108 712.67 P
2.12 (, given a method call in Python, \322object.method\050ar) 146.37 712.67 P
2.12 (gs\051\323, KEL will run a Fxn) 383.42 712.67 P
2.31 (accessible by calling the \324operation\050\322method\323\051\325 method of the wrapped C++ object\325) 108 699.67 P
2.31 (s) 499.72 699.67 P
0.27 (class. Installing the Fxn at the class is the C++ programmer) 108 686.67 P
0.27 (\325) 372.54 686.67 P
0.27 (s responsibility) 375.6 686.67 P
0.27 (, until a better) 442.08 686.67 P
-0.44 (policy emer) 108 673.67 P
-0.44 (ges. Registered methods are sometimes an alternative to writing C++ extension) 159.6 673.67 P
1.1 (modules for Python.) 108 660.67 P
308.1 612.84 108 612.84 2 L
V
0.88 H
0 Z
N
6 12 Q
1.33 (Creating C++ instances in KEL code) 108 614 P
3 11 Q
0.93 (Python code can create new C++ instances by class-name, by calling the \322KapreThing\323) 108 590.67 P
-0.38 (class constructor) 108 577.67 P
-0.38 (, with the C++ class-name as its ar) 180.8 577.67 P
-0.38 (gument \050\322x= KapreThing\050\324Account\325\051\323\051.) 329.64 577.67 P
2.26 (But only \324default\325 new instances can be constructed using the current generic-access) 108 564.67 P
2.88 (interface: no C++ constructor ar) 108 551.67 P
2.88 (guments are used, and the Python creator must set) 260.65 551.67 P
4.22 (members manually) 108 538.67 P
4.22 (, after the instance is made \050\322x.balance=1000,...\323\051. The Python) 195.52 538.67 P
1.58 (\324KapreThing\325 wrapper owns the created C++ instance; it\325) 108 525.67 P
1.58 (s automatically deleted when) 371.26 525.67 P
1.1 (the original KapreThing wrapper instance is no longer referenced.) 108 512.67 P
276.06 464.84 108 464.84 2 L
V
N
6 12 Q
1.33 (Application-speci\336c extensions.) 108 466 P
3 11 Q
1.25 (As mentioned earlier) 108 442.67 P
1.25 (, C++ programmers can expose additional functionality to Python,) 202.32 442.67 P
0.71 (as registered generic-access methods, or C/C++ extension modules \050using .so\325) 108 429.67 P
0.71 (s, or static) 457.67 429.67 P
0.17 (linking\051. There\325) 108 416.67 P
0.17 (s also a growing library of Python extensions in the public domain, which) 177.21 416.67 P
1.1 (can be used to make KEL code more powerful.) 108 403.67 P
1.07 (For instance, Python has an optional object-oriented interface to TCL) 108 381.67 P
1.07 (\325) 422.09 381.67 P
1.07 (s Tk GUI library) 425.15 381.67 P
1.07 (,) 501.25 381.67 P
2.47 (\324t) 108 368.67 P
4 F
2.47 (kpython) 114.72 368.67 P
3 F
2.47 (\325. By binding this module \050and Tk libraries\051 into Python executables, KEL) 149.55 368.67 P
-0.16 (programmers would have a means of rapidly building GUI interfaces on X, MS-W) 108 355.67 P
-0.16 (indows,) 469.47 355.67 P
1.1 (and other platforms, apart from the KaPRE++ models hierarchy) 108 342.67 P
1.1 (.) 397.02 342.67 P
1.47 (Similar extensions exist for database access \050Sybase, Oracle,...\051, client/server protocols) 108 320.67 P
1.51 (\050ILU/CORBA\051, and more. When considering exposing portions of the KaPRE++ tools) 108 307.67 P
2.98 (framework to KEL code, one should also consider functionally-similar) 108 294.67 P
2.98 (, but simpler) 442.73 294.67 P
1.1 (extensions which already exist.) 108 281.67 P
180.71 235.84 108 235.84 2 L
V
N
6 12 Q
1.33 (KEL.py notes) 108 237 P
3 11 Q
0.7 (The \322KapreThing\323 wrapper) 108 213.67 P
0.7 (-class de\336nes a number of methods available to KEL coders.) 230.73 213.67 P
1.36 (T) 108 200.67 P
1.36 (o fully understand its utility) 113.95 200.67 P
1.36 (, we\325d \336rst need to document Python in general. Because) 240.92 200.67 P
1.36 (this is beyond our scope here, the interested reader is referred to the \322KEL.py\323 source) 108 187.67 P
1.1 (\336le instead. Here\325) 108 174.67 P
1.1 (s some notes on how \322KEL.py\323 is used by the KEL system.) 188.1 174.67 P
(\245) 108 130.67 T
0.21 (A Python class \050\322) 118.8 130.67 P
219.34 129.61 196.73 129.61 2 L
V
0.53 H
N
4 F
0.21 (Kapr) 196.73 130.67 P
249.49 129.61 218.94 129.61 2 L
V
N
0.21 (eThing) 218.94 130.67 P
3 F
0.21 (\323, in KEL.py\051 wraps an unconverted C++ instance. When) 249.49 130.67 P
2.42 (we pass-in an unconverted C++ instances, we make a new Python \322KapreThing\323,) 118.8 117.67 P
1.13 (passing in the C++ instance pointer to its constructor) 118.8 104.67 P
1.13 (. The C++ pointer is saved as a) 359.64 104.67 P
0.88 (member in the KapreThing, for later access to the wrapped C++ object. \322KapreThing) 118.8 91.67 P
(also knows how to create a) 118.8 78.67 T
4 F
(new) 240.38 78.67 T
3 F
( C++ instance.) 258.1 78.67 T
FMENDPAGE
%%EndPage: "19" 11
%%Page: "18" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(18) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
271.8 709.38 108 709.38 2 L
V
1.26 H
0 Z
N
2 14 Q
0.28 (The C++ extension inter) 108 710.67 S
308.73 709.38 272.33 709.38 2 L
V
N
0.28 (face.) 272.33 710.67 S
3 11 Q
0.94 (T) 108 692.67 P
0.94 (o allow Python programs to use passed-in C++ class instances, KEL also provides the) 113.95 692.67 P
0.25 (logic needed to route C++ object manipulation back to C++ logic, and allow C++ objects) 108 679.67 P
1.1 (to be treated like normal Python objects, in KEL code.) 108 666.67 P
0.04 (The basic approach uses a Python wrapper class, and KaPRE++ generic-access, to expose) 108 640.67 P
1.1 (C++ object internals to Python. There\325) 108 627.67 P
1.1 (s 2 pieces to the) 282.95 627.67 P
4 F
1.1 (Python=>C++) 361.47 627.67 P
3 F
1.1 ( interface:) 429.67 627.67 P
1 F
(\245) 108 601.67 T
(KEL.py) 118.8 601.67 T
3 F
(A Python module, de\336ning a stub class used to \324wrap\325 unconverted C++ instances,) 118.8 582.67 T
(passed-in to \050or created in\051 Python.) 118.8 569.67 T
1 F
(\245) 108 543.67 T
(KELextend.C) 118.8 543.67 T
3 F
(A normal C/C++ extension module, with entry points for access to C++ services:) 118.8 524.67 T
(generic-access, etc. The KELextend.C module is statically bound-in to the executable.) 118.8 511.67 T
0.7 (KEL.py uses Python) 108 485.67 P
4 F
0.7 (operator) 203.6 485.67 P
0.7 (-overloading) 241.88 485.67 P
3 F
0.7 ( to make C++ objects act like Python objects,) 298.7 485.67 P
2.32 (and Python) 108 472.67 P
4 F
2.32 (meta-class-pr) 165.2 472.67 P
2.32 (otocol) 225.28 472.67 P
3 F
2.32 ( to intercept member accesses, and route them to the) 252.78 472.67 P
0.36 (KELextend.C extension module. KELextend.C is only called from KEL.py logic: it\325) 108 459.67 P
0.36 (s not) 482.55 459.67 P
1.1 (meant to be used directly by Python or C++ programmers.) 108 446.67 P
1.57 (Since most of the KEL extension interface isn\325) 108 424.67 P
1.57 (t intended for direct access, there\325) 325.02 424.67 P
1.57 (s not) 481.34 424.67 P
0.72 (much that needs to be documented on it here. See the source \336les for more information.) 108 411.67 P
0.02 (Here, we\325ll take a look at a few random issues, and then take a better look at how KEL.py) 108 398.67 P
1.1 (works, since this is the most unusual aspect of the scheme.) 108 385.67 P
223.36 337.84 108 337.84 2 L
V
0.88 H
N
6 12 Q
1.33 (Data-member access) 108 339 P
3 11 Q
0.05 (KEL \050Python\051 code accesses data members of wrapped C++ objects using generic-access.) 108 315.67 P
0.36 (This means that everything \324public\325, and visible in the generic-access sense, is accessible) 108 302.67 P
1.1 (to Python. This includes most \050all?\051 persistent objects.) 108 289.67 P
2.38 (T) 108 267.67 P
2.38 (o KEL coders, wrapped C++ objects act like generic Python objects. When one is) 113.95 267.67 P
-0.53 (quali\336ed \050\322object.member\323\051, C++ fetches the corresponding member) 108 254.67 P
-0.53 (. When one is indexed) 408.06 254.67 P
0.84 (\050\322object.member[i]\323\051, KEL veri\336es that the member is a collection, and calls C++ to do) 108 241.67 P
1.14 (the indexing. When used in Python expressions, the C++ object is converted to Python) 108 228.67 P
1.1 (form \050usually\051.) 108 215.67 P
224.71 167.84 108 167.84 2 L
V
N
6 12 Q
1.33 (Class method access) 108 169 P
3 11 Q
0.75 (So far) 108 145.67 P
0.75 (, we\325ve only looked at C++ data members. KEL also has access to class methods,) 134.89 145.67 P
0.51 (but only if they\325ve been \324registered\325 to generic-access. This registration process involves) 108 132.67 P
1.51 (setting up a static member equivalent, and registering a \324Fxn\325 variant to the class. W) 108 119.67 P
1.51 (e) 499.12 119.67 P
1.4 (won\325) 108 106.67 P
1.4 (t cover this process here, since C++ method-registration is considered beyond the) 130.41 106.67 P
1.1 (scope of KEL, and is likely to change.) 108 93.67 P
FMENDPAGE
%%EndPage: "18" 12
%%Page: "17" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(17) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
280.76 688.84 108 688.84 2 L
V
0.88 H
0 Z
N
6 12 Q
1.33 (Shipping/installing Python code.) 108 690 P
3 11 Q
0.28 (Python extensions can exist as strings, or functions in a module \336le. For strings, shipping) 108 666.67 P
1.03 (isn\325) 108 653.67 P
1.03 (t a concern: they live in C++ code, or in the database, etc. For module \336les, there\325) 124.3 653.67 P
1.03 (s) 499.72 653.67 P
1.1 (3 ways to ship:) 108 640.67 P
1 F
(\245) 126 618.67 T
(\324.py\325 source-code \336les) 136.8 618.67 T
3 F
-0.05 (This form is required for \336le-based extensions that are meant for on-site customiza-) 136.8 599.67 P
(tion. Such \336les will be installed in a standard directory) 136.8 586.67 T
(, which will be added to the) 376.24 586.67 T
(default Python module search path.) 136.8 573.67 T
1 F
(\245) 126 554.67 T
(\324.pyc\325 pre-compiled \336les) 136.8 554.67 T
3 F
(This form is useful for Python-\336les which we don\325) 136.8 535.67 T
(t want on-site users to view or) 359.64 535.67 T
(change. These are roughly equivalent to \324.o\325 object modules, but must also be) 136.8 522.67 T
(installed in a directory on Python\325) 136.8 509.67 T
(s module search-path \050dynamically loaded\051.) 286.21 509.67 T
1 F
(\245) 126 490.67 T
(frozen module \336les) 136.8 490.67 T
3 F
(Python has a feature which allows module-\336les to be \324frozen\325 as C object \336les,) 136.8 471.67 T
(which can then be bound-in with the executable. In this case, there\325) 136.8 458.67 T
(s no associated) 432.82 458.67 T
(module \336le, and no search-path requirements.) 136.8 445.67 T
-0.02 (Of these, the \324.py\325 source-\336le medium will likely be most common. Unchangeable Python) 108 419.67 P
-0.41 (code will probably be rare \050what good is an extension that users can\325) 108 406.67 P
-0.41 (t change?\051. Minimally) 405.32 406.67 P
-0.41 (,) 501.25 406.67 P
0.77 (KEL clients will require 1 \324.py\325 \336le, if they pass-in C++ objects to Python unconverted:) 108 393.67 P
1.1 (the \324KEL.py\325 wrapper) 108 380.67 P
1.1 (-class \336le we ship \050see below\051.) 207.42 380.67 P
290.08 312.84 108 312.84 2 L
V
N
6 12 Q
1.33 (The Embedded-call API functions) 108 314 P
3 11 Q
1.21 (The current API de\336nition is included at the end of this paper) 108 290.67 P
1.21 (, in an) 391.3 290.67 P
4 F
1.21 (appendix) 424.88 290.67 P
3 F
1.21 ( \050despite) 465.21 290.67 P
1.12 (my better judgement\051.) 108 277.67 P
1.12 (It\325) 211.56 277.67 P
1.12 (s extremely prone to change, expansion, etc., so take it with a) 221.34 277.67 P
0.05 (reasonably lar) 108 264.67 P
0.05 (ge grain-of-salt. For a complete, and) 169.86 264.67 P
4 F
0.05 (up-to-date) 333.31 264.67 P
3 F
0.05 ( de\336nition of the embedded-) 379.14 264.67 P
1.1 (call API, see \336le KELembed.h.) 108 251.67 P
1.44 (An implicit goal of the embedded-call API is to isolate as much Python interaction as) 108 229.67 P
0.47 (possible, in a common place. C++ programmers can use low-level Python interfaces, but) 108 216.67 P
1.52 (this is discouraged: if the API doesn\325) 108 203.67 P
1.52 (t support an embedding need, the API should be) 280.09 203.67 P
1.1 (changed, to make the addition generally available, make upgrading simpler) 108 190.67 P
1.1 (, etc.) 448.32 190.67 P
1.62 (Of course, lower) 108 168.67 P
1.62 (-level Python interfaces are necessary in some contexts. In particular) 184.64 168.67 P
1.62 (,) 501.25 168.67 P
1.37 (coders of additional) 108 155.67 P
4 F
1.37 (C++ extension modules) 202.22 155.67 P
3 F
1.37 ( will need to make use of data-conversion) 310.84 155.67 P
3.32 (routines minimally) 108 142.67 P
3.32 (, and possibly much more. There\325) 194.03 142.67 P
3.32 (s no good way to \324wrap\325 this) 358.2 142.67 P
(functionality) 108 129.67 T
FMENDPAGE
%%EndPage: "17" 13
%%Page: "16" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(16) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
251.37 686.84 108 686.84 2 L
V
0.88 H
0 Z
N
6 12 Q
1.33 (Compile/link requirements.) 108 688 P
3 11 Q
1.1 (T) 108 664.67 P
1.1 (o build and link an executable that uses KEL/Python, use:) 113.95 664.67 P
6 F
(\245) 126 623.67 T
(the KELembed.h header \336le in the tools tree) 136.8 623.67 T
(\245) 126 604.67 T
(the .libs/.ld\337ags in the tools stuf) 136.8 604.67 T
(f/project/test/keltest directory) 289.46 604.67 T
3 F
0.9 (KEL initializes itself when \336rst called, so there are no special \324main\325 considerations for) 108 568.67 P
-0.04 (C++. Python currently exists as 4 static libraries, and a separate command-line interpreter) 108 555.67 P
-0.04 (.) 501.25 555.67 P
2.28 (Although Python can be built as a shareable library) 108 542.67 P
2.28 (, its code-space requirements are) 351 542.67 P
1.1 (negligible, and will only be incurred in executables that use KEL:) 108 529.67 P
(\245) 126 507.67 T
0.98 (A\324C\323 executable using Python \050keltest/testapp1.c\051 took 442K, when built without) 136.8 507.67 P
(KaPRE libraries, and Python\325) 136.8 494.67 T
(s command-line interpreter takes some 418K.) 266.96 494.67 T
(\245) 126 475.67 T
1.07 (A Python client executable with our C++ tools libraries took some 8.7M; adding) 136.8 475.67 P
(basic GL libraries increased its size to 1) 136.8 462.67 T
(1.8M.) 312.05 462.67 T
-0.05 (When we build a C++ executable which uses Python, we pull in our \324libKel\325 and Python\325) 108 443.67 P
-0.05 (s) 499.72 443.67 P
-0.43 (libraries, but replace a stubbed-out C++ extension module, with our generic-access module) 108 430.67 P
0.81 (\050KELextend.C; see below\051. It\325) 108 417.67 P
0.81 (s important to use the \324.libs\325 \336le\325) 243.32 417.67 P
0.81 (s contents in the order in) 391.49 417.67 P
2.84 (which it appears; we also need to pull in a tailored-version of a generated Python) 108 404.67 P
1.1 (con\336guration \336le.) 108 391.67 P
355.44 323.84 108 323.84 2 L
V
N
6 12 Q
1.33 (Running the Python command-line interpreter) 108 325 P
358.11 323.84 354.78 323.84 2 L
V
N
1.33 (.) 354.78 325 P
3 11 Q
0.77 (T) 108 301.67 P
0.77 (o use the python stand-alone interpreter) 113.95 301.67 P
0.77 (, add the following to a \324.login\325 or \324.chsrc\325 \336le:) 291.79 301.67 P
6 F
(\245) 126 260.67 T
(alias python /development/python-1.1/python) 136.8 260.67 T
(\245) 126 241.67 T
(setenv PYTHONST) 136.8 241.67 T
(AR) 231.35 241.67 T
(TUP "~/.PythonInit") 246.43 241.67 T
(\245) 126 222.67 T
(setenv PYTHONP) 136.8 222.67 T
(A) 224.62 222.67 T
(TH ".:/development/python-1.1/Lib") 231.15 222.67 T
3 F
4.46 (None of these are strictly needed; for instance, the default module search path) 108 186.67 P
0.12 (\050$PYTHONP) 108 173.67 P
0.12 (A) 166.87 173.67 P
0.12 (TH\051 is as shown in the \324setenv\325 command, and the start-up \336le is optional.) 173.59 173.67 P
0.86 (Also note that the stand-alone interpreter is not currently built with any C++ extensions) 108 151.67 P
1.41 (or libraries \050since C++ objects aren\325) 108 138.67 P
1.41 (t passed-in\051; when KEL runs the command-line, it) 273.57 138.67 P
1.9 (actually uses a bound-in version, not the stand-alone interpreter \050so C++ libraries are) 108 125.67 P
1.1 (available\051. The stand-alone interpreter is useful for testing Python code outside KEL.) 108 112.67 P
FMENDPAGE
%%EndPage: "16" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(15) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
3 11 Q
1.42 ([Python modules can return) 108 712.67 P
4 F
1.42 (compound) 238.34 712.67 P
3 F
1.42 ( values, as tuples \050or lists, dictionaries, classes\051,) 284.16 712.67 P
1.77 (and may expect compound values passed-in. For) 108 699.67 P
4 F
1.77 (inputs) 337.28 699.67 P
3 F
1.77 (, tuples can be passed using a) 364.17 699.67 P
2.39 (possibly-nested parenthesized substring -- \322\050i\050fs\051K\051\323. Alternatively) 108 686.67 P
2.39 (, KEL will provide) 413.73 686.67 P
0.72 (standard conversion functions, which can be invoked with the \324O&\325 convert code, using) 108 673.67 P
1.91 (the varar) 108 660.67 P
1.91 (gs mechanism -- ..., \322\050O&\051\323, convertFunc, source/tar) 148.49 660.67 P
1.91 (get... \051. The \324K\325 convert) 391.9 660.67 P
1.1 (code is just a convenience for \324O&\325, with \324PythonThing\325/\325CxxThing\325 converters.) 108 647.67 P
0.43 (Since) 108 625.67 P
4 F
0.43 (outputs) 135.62 625.67 P
3 F
0.43 ( don\325) 168.01 625.67 P
0.43 (t support a \324varar) 191.15 625.67 P
0.43 (gs\325 list of tar) 267.68 625.67 P
0.43 (gets, compound outputs must be fetched) 324.67 625.67 P
7.17 (with the \324O\325 convert code \050raw Python object\051, and converted by calling) 108 612.67 P
0.03 (\324KEL_unpack_object\050<object>, <format-string>, tar) 108 599.67 P
0.03 (gets...\051\325. Use of compound inputs and) 338.57 599.67 P
1.1 (outputs in KEL will probably be rare, so we won\325) 108 586.67 P
1.1 (t dwell on them here]) 336.45 586.67 P
297.43 514.84 108 514.84 2 L
V
0.88 H
0 Z
N
6 12 Q
1.33 (Dynamic debugging and reloading.) 108 516 P
3 11 Q
0.85 (When) 108 492.67 P
4 F
0.85 (dynamic debugging) 137.87 492.67 P
3 F
0.85 ( is enabled, control stops in the Python debugger \050in the stdio) 225.18 492.67 P
2.71 (window\051, when debugged embedded-code is called from C++ \050functions, strings, or) 108 479.67 P
0.62 (methods\051. Once stopped, all normal Python debugger interactions can be used \050stepping,) 108 466.67 P
1.61 (break, prints, etc.\051. Control resumes with the return value, when the debugged Python) 108 453.67 P
1.1 (code returns/exits.) 108 440.67 P
0.51 (When) 108 418.67 P
4 F
0.51 (dynamic r) 137.52 418.67 P
0.51 (eloading) 181.92 418.67 P
3 F
0.51 ( is enabled, the enclosing module \336le is reloaded each time one) 220.42 418.67 P
1.84 (of the objects it contains is accessed \050functions, global variables\051. This is particularly) 108 405.67 P
1.1 (convenient for rapid-development/prototyping scenarios: KEL programmers can change) 108 392.67 P
1.15 (extension module \336les while the calling C++ application remains active. Their changes) 108 379.67 P
1.1 (will take ef) 108 366.67 P
1.1 (fect immediately) 159.49 366.67 P
1.1 (, without stopping or relinking the C++ executable.) 234.12 366.67 P
3.34 (Both debugging and reloading are available on a global basis \050using bit-\337ags\051, or) 108 344.67 P
2.2 (selectively \050by calling functions to set/clear debugging and reloading for a particular) 108 331.67 P
1.06 (module and function\051. For strings, dynamic debugging works, but dynamic reloading is) 108 318.67 P
1.84 (only useful to reload global variable de\336nitions \050if there\325) 108 305.67 P
1.84 (s a module \336le at all\051; since) 371.99 305.67 P
1.1 (strings are passed-in each time they\325re run, there\325) 108 292.67 P
1.1 (s no need to reload code.) 332.59 292.67 P
187.36 224.84 108 224.84 2 L
V
N
6 12 Q
(Error-handling.) 108 226 T
3 11 Q
1.47 (The embedded-API functions all return an integer status code; zero for success, -1 for) 108 202.67 P
1.65 (failure \050in keeping with Python conventions\051. On failure, the global \324) 108 189.67 P
4 F
1.65 (KEL_LASTMSG) 427.61 189.67 P
3 F
1.65 (\325) 500.34 189.67 P
5.43 (holds a string describing the error) 108 176.67 P
5.43 (. C++ programmers may also call Python\325) 282.71 176.67 P
5.43 (s) 499.72 176.67 P
2.01 (\324) 108 163.67 P
4 F
2.01 (print_err) 111.66 163.67 P
2.01 (or\050\051) 151.59 163.67 P
3 F
2.01 (\325 to print the Python stack at an error occurrence, \324) 168.7 163.67 P
4 F
2.01 (err_get\050\051) 410.91 163.67 P
3 F
2.01 (\325 to fetch a) 450.62 163.67 P
4 (Python-speci\336c string, etc. If the global \324) 108 150.67 P
4 F
4 (KEL_VERBOSE) 312.27 150.67 P
3 F
4 (\325 is set, KEL will print) 384.99 150.67 P
1.1 (KEL_LASTMSG and call print_error\050\051, to display the error on \324stderr) 108 137.67 P
1.1 (\325.) 425.64 137.67 P
1.06 (C++ extension-module writers communicate errors back to Python, by returning NULL) 108 115.67 P
1.12 (from the module function, and calling \324) 108 102.67 P
4 F
1.12 (err_setstr\050\051) 287.98 102.67 P
3 F
1.12 (\325, etc. to set Python\325) 338.08 102.67 P
1.12 (s error message.) 430.58 102.67 P
1.1 (See \324KELextend.C\325 for an example.) 108 89.67 P
FMENDPAGE
%%EndPage: "15" 15
%%Page: "14" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(14) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
3 11 Q
1.71 (When running statement strings, the \324\134n\325 character can be used to build-up compound) 108 712.67 P
0.85 (statements \050along with indentation if needed: N tabs \324\134t\325\051. The \324;\325 character can separate) 108 699.67 P
1.1 (multiple simple statements, on a single line.) 108 686.67 P
258.07 618.84 108 618.84 2 L
V
0.88 H
0 Z
N
6 12 Q
1.33 (Modules and name-spaces.) 108 620 P
3 11 Q
0.61 (Most of the API functions expect a module-name to be passed-in as their \336rst ar) 108 596.67 P
0.61 (gument.) 468.25 596.67 P
0.12 (In Python, code objects always exist \050and run\051 in a named name-space, called a \324module\325.) 108 583.67 P
1.58 (This is a convenient feature for KEL, since it allows us to partition functions, global-) 108 570.67 P
0.31 (variables, etc., according to the calling application\325) 108 557.67 P
0.31 (s needs \050versus a single global scope\051.) 334.41 557.67 P
1.72 (In many cases, the module-name corresponds to a real Python source \336le, which gets) 108 535.67 P
0.31 (loaded \050imported\051 when any of its items are \336rst accessed. This works well for functions,) 108 522.67 P
1.76 (but doesn\325) 108 509.67 P
1.76 (t really apply when running raw code strings: there may be no real python) 155.7 509.67 P
-0.32 (source \336le. For these cases, KEL clients can create a \324) 108 496.67 P
4 F
-0.32 (dummy) 341.83 496.67 P
3 F
-0.32 (\325 module, which just becomes) 373.6 496.67 P
1.1 (a name-space without a source-\336le. Use \324KEL_make_dummy_module\050\051\325.) 108 483.67 P
0.1 (In all cases, if the module-name is passed-in as \324NULL) 108 461.67 P
0.1 (\325, it defaults to \322__main__\323, which) 350.44 461.67 P
2.17 (is the name of the interactive command-line\325) 108 448.67 P
2.17 (s name-space \050roughly\051. This allows for) 317.78 448.67 P
0.81 (names that are truly \324global\325 to the entire process \050not recommended\051. It also allows for) 108 435.67 P
0.49 (interactive users to communicate directly with a KEL program: a KEL client can run the) 108 422.67 P
1.1 (interactive) 108 409.67 P
4 F
1.1 (command-line) 158.28 409.67 P
3 F
1.1 (, and get/set user) 221.21 409.67 P
1.1 (-visible variables in \324__main__\325.) 298.22 409.67 P
205.37 341.84 108 341.84 2 L
V
N
6 12 Q
1.33 (Data conversions.) 108 343 P
3 11 Q
1.84 (The API uses a \324) 108 319.67 P
4 F
1.84 (printf) 188.66 319.67 P
3 F
1.84 (\325-style conversion-code string to convert inputs/outputs to/from) 213.72 319.67 P
2.86 (Python form automatically) 108 306.67 P
2.86 (. For function ar) 230.95 306.67 P
2.86 (guments, and variable bindings, a list of) 310.83 306.67 P
1.1 (\324varar) 108 293.67 P
1.1 (gs\325 is passed in, corresponding to the conversion code strings.) 134.06 293.67 P
0.59 (The \324printf) 108 271.67 P
0.59 (\325-style conversion system is really just a convenient wrapper around Python\325) 157.15 271.67 P
0.59 (s) 499.72 271.67 P
-0.54 (standard conversion routines. Because of that, KEL supports all primitive-type conversions) 108 258.67 P
2.69 (Python does [integers, \337oats, characters, strings, raw-objects; see python\325) 108 245.67 P
2.69 (s extension) 452.12 245.67 P
-0.01 (manual, for an exhaustive list]. C++ callers can cast-down as needed to use these standard) 108 232.67 P
1.1 (conversion codes.) 108 219.67 P
1.52 (For KEL, we\325ve patched Python to support a \324K\325 conversion code, which allows C++) 108 197.67 P
0.27 (instances to be passed in unconverted. The \324K\325 code wraps/unwraps a C++ object pointer) 108 184.67 P
2.02 (in a \324KapreThing\325 instance \050see below\051. KEL will also eventually support other non-) 108 171.67 P
1.1 (standard conversions; for instance, mappings between collections and Python lists, etc.) 108 158.67 P
-0.45 (When using the embedded-call functions, function ar) 108 136.67 P
-0.45 (gument-list conversion strings always) 338.82 136.67 P
1.97 (have surrounding parenthesis -- \322\050iKs\051\323; other conversion strings usually don\325) 108 123.67 P
1.97 (t -- \322i\323.) 468.6 123.67 P
1.65 (T) 108 110.67 P
1.65 (echnically) 113.95 110.67 P
1.65 (, we need to build a Python \324tuple\325 of values for ar) 158.45 110.67 P
1.65 (gument lists, hence the) 398.22 110.67 P
1.1 (parenthesis. Empty ar) 108 97.67 P
1.1 (gument lists are just \322\050\051\323.) 205.62 97.67 P
FMENDPAGE
%%EndPage: "14" 16
%%Page: "13" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(13) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
282.72 709.38 108 709.38 2 L
V
1.26 H
0 Z
N
2 14 Q
0.28 (The embedded-call inter) 108 710.67 S
319.65 709.38 283.25 709.38 2 L
V
N
0.28 (face.) 283.25 710.67 S
3 11 Q
1.62 (T) 108 692.67 P
1.62 (o make it easier to run embedded-code, KEL implements a high-level API for using) 113.95 692.67 P
1.1 (Python, on top of the existing Python run-time interface. Among the API\325) 108 679.67 P
1.1 (s features:) 444.28 679.67 P
(\245) 126 641.67 T
(no) 136.8 641.67 T
237.33 640.47 150.55 640.47 2 L
V
0.54 H
N
(python include \336les) 150.55 641.67 T
( needed \050Python\325) 237.33 641.67 T
(s 'object*' is hidden\051) 311.88 641.67 T
(\245) 126 625.67 T
(high-level interfaces for) 136.8 625.67 T
323.15 624.47 245.24 624.47 2 L
V
N
(running functions) 245.24 625.67 T
( by name) 323.15 625.67 T
(\245) 126 609.67 T
(high-level interfaces for) 136.8 609.67 T
335.06 608.47 245.24 608.47 2 L
V
N
(running code strings) 245.24 609.67 T
(\245) 126 593.67 T
(simple access to module-level \050'global'\051) 136.8 593.67 T
353.08 592.47 313.37 592.47 2 L
V
N
(variables) 313.37 593.67 T
( by name) 353.08 593.67 T
(\245) 126 577.67 T
(high-level interfaces for calling/accessing) 136.8 577.67 T
393.1 576.47 323.14 576.47 2 L
V
N
(object members) 323.14 577.67 T
( by name) 393.1 577.67 T
(\245) 126 561.67 T
(simple) 136.8 561.67 T
230.28 560.47 168.89 560.47 2 L
V
N
(error message) 168.89 561.67 T
( interface) 230.28 561.67 T
(\245) 126 545.67 T
(automatic) 136.8 545.67 T
252.28 544.47 182.93 544.47 2 L
V
N
(data conversion) 182.93 545.67 T
( to/from python form) 252.28 545.67 T
(\245) 126 529.67 T
(automatic) 136.8 529.67 T
270.01 528.47 182.93 528.47 2 L
V
N
(dynamic debugging) 182.93 529.67 T
( of embedded python code) 270.01 529.67 T
(\245) 126 513.67 T
(automatic) 136.8 513.67 T
265.11 512.47 182.93 512.47 2 L
V
N
(dynamic reloading) 182.93 513.67 T
( of python modules) 265.11 513.67 T
1.1 (The embedded-call interface is de\336ned in source \336les:) 108 470.67 P
1 F
(\245) 108 444.67 T
(KELembed.h) 118.8 444.67 T
3 F
(The external de\336nition of the API \050the only header \336le you need\051.) 118.8 425.67 T
1 F
(\245) 108 399.67 T
(KELembed.c) 118.8 399.67 T
3 F
(The API implementation, on-top of low-level Python interfaces.) 118.8 380.67 T
1.1 (Some general usage notes:) 108 354.67 P
282.08 286.84 108 286.84 2 L
V
0.88 H
N
6 12 Q
1.33 (Strings, Functions, and Objects.) 108 288 P
3 11 Q
1.53 (The API supports running Python code using strings, functions, or methods of Python) 108 264.67 P
1.78 (objects. For strings, it distinguishes between \324expressions\325 and \324statements\325 \050no return) 108 251.67 P
0.96 (value\051. Similarly) 108 238.67 P
0.96 (, functions may be run as \324functions\325 or \324procedures\325 \050no return value\051.) 182.18 238.67 P
2.86 (Object method calls assume an object has been exported from Python directly \050for) 108 225.67 P
2.29 (instance, by calling a class constructor as a function\051. V) 108 212.67 P
2.29 (ariables may be accessed as) 372.67 212.67 P
0.7 (\324globals\325 \050which are at the top-level of some module\051 or \324members\325 of a Python object.) 108 199.67 P
1.1 (The main extension forms are strings and functions; from a functional perspective:) 108 177.67 P
(\050KEL_set_global + KEL_run_statements + KEL_get_global\051 == KEL_run_function) 118.8 155.67 T
0.7 (Representing extensions a functions provides a more direct mapping for C++ inputs and) 108 129.67 P
2.82 (results \050via ar) 108 116.67 P
2.82 (gument-lists and \324return\325 statements\051. However) 173.32 116.67 P
2.82 (, functions may be less) 392.2 116.67 P
0.95 (convenient in some cases, since they usually require an external Python code \336le [\324def) 108 103.67 P
0.95 (\325) 500.34 103.67 P
1.1 (statements can be run as strings outside a \336le, in a \324dummy\325 module, if needed].) 108 90.67 P
FMENDPAGE
%%EndPage: "13" 17
%%Page: "12" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(12) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
222.3 711.5 108 711.5 2 L
V
0.8 H
0 Z
N
1 11 Q
1.22 (The conversion ports) 108 712.67 P
3 F
2.36 (Ports \0501\051 and \0504\051 take the form of the \324) 108 690.67 P
4 F
2.36 (printf) 297.52 690.67 P
3 F
2.36 (\325-style conversion speci\336cations, in the) 322.57 690.67 P
-0.02 (embedded-call API\325) 108 677.67 P
-0.02 (s functions. The header \336le, \324KELembed.h\325 de\336nes the functions used) 196.26 677.67 P
1.1 (to invoke embedded Python operations.) 108 664.67 P
1.3 (Ports \0502\051 and \0503\051 are implemented in the C++ extension module KEL provides \050and in) 108 642.67 P
2.28 (any application-speci\336c extensions\051. More precisely) 108 629.67 P
2.28 (, KEL provides a Python class to) 345.82 629.67 P
0.81 (represent \050\324wrap\325\051 passed-in C++ objects, and route manipulations to the C++ extension) 108 616.67 P
1.57 (module. Objects are converted to and from C++ form, according to type signatures in) 108 603.67 P
5.12 (registered C++ methods, or using a generic C++ type protocol \050gT) 108 590.67 P
5.12 (ype/gThing,) 450.53 590.67 P
(LatentProtocol\051.) 108 577.67 T
1.35 (When) 108 555.67 P
4 F
1.35 (strings) 138.37 555.67 P
3 F
1.35 ( are executed instead of) 168.32 555.67 P
4 F
1.35 (functions) 281.69 555.67 P
3 F
1.35 (, this picture changes slightly: then port) 322.03 555.67 P
-0.02 (\0501\051 roughly depicts bindings to global variables, before or during an embedded call, rather) 108 542.67 P
1.1 (than ar) 108 529.67 P
1.1 (gument passing. Ports \0502\051 through \0504\051 behave the same as for functions.) 139.14 529.67 P
227.8 484.5 108 484.5 2 L
V
N
1 F
1.22 (Recursive control-\337ow) 108 485.67 P
3 F
0.89 (KEL uses both Python embedding and extending facilities, to implement a bidirectional) 108 463.67 P
(control-\337ow:) 108 450.67 T
(\245) 126 428.67 T
4 F
(C++ => Python) 136.8 428.67 T
3 F
(: embedded calls) 210.5 428.67 T
(\245) 126 409.67 T
4 F
(Python => C++) 136.8 409.67 T
3 F
(: using C++ objects and extensions) 210.5 409.67 T
0.75 (Python execution occurs nested in at least 1 C++ execution level: \324) 108 390.67 P
4 F
0.75 (main) 410.06 390.67 P
3 F
0.75 (\325 is in C++, and) 432.06 390.67 P
0.91 (Python only runs) 108 377.67 P
4 F
0.91 (on-demand) 188.65 377.67 P
3 F
0.91 ( from a C++ module. In general, there may any number of) 238.13 377.67 P
0.5 (C++ and Python execution levels active at any time: it\325) 108 364.67 P
0.5 (s possible that a call from Python) 354.35 364.67 P
0.91 (to a C++ extension [port \0502\051] may trigger another recursive embedded-Python call [port) 108 351.67 P
1.1 (\0501\051]... KEL \050and Python\051 support arbitrarily deep nesting of embedded calls.) 108 338.67 P
1.1 (Recursive embedding also occurs inside KEL itself. For instance:) 108 316.67 P
(\245) 126 298.67 T
(debugged calls invoke the \050python-coded\051 debugger) 136.8 298.67 T
(\325) 366.02 298.67 T
(s API internally) 369.08 298.67 T
(\245) 126 285.67 T
(passing-in C++ instances calls a wrapper class\325) 136.8 285.67 T
(s constructor) 344.12 285.67 T
(\245) 126 272.67 T
(passing-out wrapped C++ instances calls a method in the wrapper class.) 136.8 272.67 T
204.59 232.5 108 232.5 2 L
V
N
1 F
1.22 (Basic architecture) 108 233.67 P
3 F
1.58 (The KEL system really just provides the \324) 108 211.67 P
4 F
1.58 (glue) 303.3 211.67 P
3 F
1.58 (\325 which implements the embedding and) 322.24 211.67 P
1.1 (extending ports on the diagram. Speci\336cally) 108 198.67 P
1.1 (, KEL consists of:) 307.1 198.67 P
6 F
(\245) 126 172.67 T
(a simpli\336ed embedded-call interface to Python) 136.8 172.67 T
(\245) 126 153.67 T
(an automatic mechanism for calling back to C++ generic access) 136.8 153.67 T
3 F
1.69 (plus a small number of patches to the Python language system. W) 108 127.67 P
1.69 (e\325ll look at both of) 415.36 127.67 P
1.31 (these next. The embedded-call API is more critical to KEL clients, since it de\336nes the) 108 114.67 P
2.13 (view from C++. For KEL extension coders, the view from Python is essentially just) 108 101.67 P
1.1 (Python\325) 108 88.67 P
1.1 (s normal semantics; the extension layer is transparent.) 142.23 88.67 P
FMENDPAGE
%%EndPage: "12" 18
%%Page: "11" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(11) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
210.48 709.38 108 709.38 2 L
V
1.26 H
0 Z
N
2 14 Q
0.28 (The \322big pictur) 108 710.67 S
230.8 709.38 210.37 709.38 2 L
V
N
0.28 (e\323.) 210.37 710.67 S
3 11 Q
0.5 (Let\325) 108 692.67 P
0.5 (s move on to a more complete description of the KEL integration. From a high-level) 125.72 692.67 P
1.1 (perspective, C++ and Python interact something like this:) 108 679.67 P
1.52 (In this picture, C++ and Python are depicted as separate systems; in reality) 108 301.67 P
1.52 (, Python is) 454.19 301.67 P
1.49 (bound-in to the C++ process/executable, so the distinction is only a logical one [more) 108 288.67 P
1.1 (dynamic communication structures are possible, but not planned]. Some notation:) 108 275.67 P
6 10 Q
(\245) 126 254.33 T
(solid lines represent argument passing) 136.8 254.33 T
(\245) 126 237.33 T
(dashed lines represent return values) 136.8 237.33 T
(\245) 126 220.33 T
(the lower portion represents calling embedded Python code from C++) 136.8 220.33 T
(\245) 126 203.33 T
2.29 (the upper part depicts what happens when Python code calls back to C++ to) 136.8 203.33 P
(manipulate passed-in C++ instances, or calls other exposed C++ functionality) 136.8 191.33 T
(.) 478.44 191.33 T
3 11 Q
1.25 (KEL implements the 4 communication ports across language boundaries \050the circles in) 108 156.67 P
1.1 (the diagram\051. Control typically \337ows between languages like this:) 108 143.67 P
6 10 Q
1.11 (\0501\051 embedded Python call) 122.4 122.33 P
(...) 239.68 122.33 T
1.11 (arguments converted from C++ to Python form) 266.4 122.33 P
1.11 (\0502\051 C++ extension call...) 122.4 110.33 P
1.11 (arguments converted from Python to C++ form) 266.4 110.33 P
1.11 (\0503\051 C++ extension return) 122.4 98.33 P
(...) 234.12 98.33 T
1.11 (C++ return value converted to Python form) 266.4 98.33 P
1.11 (\0504\051 embedded Python return) 122.4 86.33 P
(...) 250.8 86.33 T
1.11 (Python return value converted to C++ form.) 266.4 86.33 P
108 72 504 720 C
122.25 342 489.75 654 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
149.25 396 248.25 621 18 RR
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
383.25 495 473.25 540 18 RR
7 X
V
0 X
N
262.17 580.8 248.25 585 262.28 588.82 262.23 584.81 4 Y
V
0 84.76 153 45 248.25 540 A
J
455.75 553.01 455.24 540 448.78 551.31 452.27 552.16 4 Y
V
[7.344 6.365] 3.672 I
9.72 90 207 72 248.25 540 A
J
394.67 484.72 401.25 495 401.12 482.8 397.89 483.76 4 Y
V
270 347.98 153 54 248.25 495 A
J
261.08 401.49 248.25 405 260.99 408.82 261.03 405.16 4 Y
V
[7.49 6.491] 3.745 I
273.39 360 216 90 248.25 495 A
1 14 Q
(C++) 185.25 495 T
(Python) 401.25 516.07 T
3 12 Q
(4) 278.25 380.6 T
(1) 275.25 459.82 T
(2) 278.25 558.82 T
(3) 275.25 630.82 T
J
347.25 540 356.25 639 R
4 X
V
0 X
N
347.25 387 356.25 486 R
3 X
V
0 X
N
6 F
(Extending) 365.25 623.39 T
(Embedding) 368.53 397.5 T
90 450 13.5 13.5 279.75 562.5 A
90 450 13.5 13.5 279.75 634.5 A
90 450 13.5 13.5 279.75 382.5 A
90 450 13.5 13.5 279.75 463.5 A
108 72 504 720 C
0 -208 1000 792 C
FMENDPAGE
%%EndPage: "11" 19
%%Page: "10" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(10) 492.59 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
3 11 Q
(A C++ extension module can be added to Python just by compiling into a dynamically-) 118.8 712.67 T
-0.27 (loadable object \336le \050) 118.8 699.67 P
4 F
-0.27 (.so) 208.12 699.67 P
3 F
-0.27 (\051, and dropping it in a directory on Python\325) 220.65 699.67 P
-0.27 (s module search path.) 407.01 699.67 P
(It can also be statically bound-in to the executable, be built as combinations of Python) 118.8 686.67 T
(and C++ logic, etc. Once built and installed, a C++ module acts exactly like one coded) 118.8 673.67 T
(in Python. Here\325) 118.8 660.67 T
(s our KEL validation function again, using these 2 extensions:) 191.21 660.67 T
233.09 619.73 122.4 619.73 2 L
V
0.88 H
0 Z
N
1 12 Q
1.33 (File postmodule.py) 122.4 621 P
1 11 Q
1.22 (import tools) 122.4 594.67 P
1.22 (# our general tools C++ module) 266.4 594.67 P
1.22 (import postdefs) 122.4 581.67 P
1.22 (# our Python \050or C++\051 constants module) 266.4 581.67 P
1.22 (def accountV) 122.4 555.67 P
1.22 (alidation\050account, type, company\051:) 192.09 555.67 P
1.22 (if account.balance > 1000:) 151.2 542.67 P
0.31 (tools.warning\050\322account \324%s\325 balance\323 % account.nameString\051) 180 529.67 P
1.22 (account.balance = 1000) 180 516.67 P
1.22 (if type not in [postdefs.FINANCIAL, postdefs.BUDGET]:) 151.2 503.67 P
1.22 (tools.error\050\324account type \325 + type\051) 180 490.67 P
1.22 (return 0) 180 477.67 P
1.22 (if account.info.balanceT) 151.2 464.67 P
1.22 (ype not in company) 277.53 464.67 P
1.22 (.balanceT) 383.68 464.67 P
1.22 (ypes:) 433.61 464.67 P
1.22 (tools.error\050\324account balance type\325\051) 180 451.67 P
1.22 (return 0) 180 438.67 P
1.22 (for option in account.options:) 151.2 425.67 P
1.22 (if option not in company) 180 412.67 P
1.22 (.info[postdefs.CompOpts]:) 311.81 412.67 P
1.22 (tools.error\050\322account option:\323 + option\051) 208.8 399.67 P
1.22 (return 0) 208.8 386.67 P
1.22 (return 1) 151.2 373.67 P
3 F
(As this example shows, KEL programs can become arbitrarily complex, depending on) 118.8 341.67 T
(the application, and on how much C++ functionality is used. In the simplest case, KEL) 118.8 328.67 T
(provides for generic-access to C++ members and methods; in pathological cases, we) 118.8 315.67 T
-0.26 (might expose lar) 118.8 302.67 P
-0.26 (ge parts of the tools hierarchy) 191.41 302.67 P
-0.26 (, as generically-accessed methods, and/or) 320.47 302.67 P
(additional C++ extension modules. These are application-dependent decisions.) 118.8 289.67 T
8 14 Q
(\245) 108 227.67 T
(Other bells-and-whistles...) 118.8 227.67 T
3 11 Q
(KEL provides some other features that make life easier for both C++ and Python pro-) 118.8 204.67 T
(grammers, such as the ability to) 118.8 191.67 T
288.36 190.61 261.48 190.61 2 L
V
0.53 H
N
4 F
(debug) 261.48 191.67 T
3 F
( embedded Python code when it\325) 288.36 191.67 T
(s called from) 432.27 191.67 T
-0.09 (C++, and the ability to automatically) 118.8 178.67 P
287.4 177.61 283.12 177.61 2 L
V
N
4 F
-0.09 (r) 283.12 178.67 P
311.44 177.61 287 177.61 2 L
V
N
-0.09 (eload) 287 178.67 P
3 F
-0.09 ( changed Python modules without stopping) 311.44 178.67 P
(\050or relinking!\051 the C++ client application. C++ can even spawn the Python) 118.8 165.67 T
495.87 164.61 449.44 164.61 2 L
V
N
4 F
(command-) 449.44 165.67 T
135.3 151.61 118.8 151.61 2 L
V
N
(line) 118.8 152.67 T
3 F
( interpreter for interactive entry of code, etc.) 135.3 152.67 T
(For example, by setting a switch \050or a \324) 118.8 133.67 T
4 F
(spypoint) 291.41 133.67 T
3 F
(\325\051, embedded KEL code calls are auto-) 328.69 133.67 T
(matically routed to the \324) 118.8 120.67 T
4 F
(pdb) 224.51 120.67 T
3 F
(\325 Python debugger) 241.01 120.67 T
(. Execution stops in the application\325) 321.67 120.67 T
(s) 479.34 120.67 T
(\324) 118.8 107.67 T
4 F
(stdio) 122.46 107.67 T
3 F
(\325 window) 143.86 107.67 T
(, where programmers can step through Python code, set breakpoints,) 185 107.67 T
(inspect variables, etc. The C++ caller continues with the return value, after the) 118.8 94.67 T
(debugged embedded code exits.) 118.8 81.67 T
FMENDPAGE
%%EndPage: "10" 20
%%Page: "9" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(9) 497.57 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
3 11 Q
(W) 118.8 712.67 T
(e can expose additional C++ functionality to KEL code, by coding extensions in) 128.3 712.67 T
(Python and/or C++, or installing packages available in the public-domain. Some addi-) 118.8 699.67 T
(tional KaPRE extensions may eventually become standard in KEL \050general tools facili-) 118.8 686.67 T
(ties, Tkinter) 118.8 673.67 T
(, etc.\051; other application functionality can be exposed as needed. [It\325) 171.52 673.67 T
(s also) 469.99 673.67 T
(possible to register C++ class methods for direct use from Python; see ahead.]) 118.8 660.67 T
(For instance, in the example, we passed in a \324type\325 code, which the function compared) 118.8 641.67 T
(to integer 2. In practice, \324type\325 might be an \324enum\325; we can export its) 118.8 628.67 T
4 F
(symbolic) 425.51 628.67 T
3 F
( values) 464.62 628.67 T
(by providing another Python module, which the KEL function can import and use:) 118.8 615.67 T
215.09 587.73 122.4 587.73 2 L
V
0.88 H
0 Z
N
1 12 Q
1.33 (File postdefs.py) 122.4 589 P
1 11 Q
(FINANCIAL) 122.4 562.67 T
1.22 (= 1) 194.4 562.67 P
1.22 (BUDGET) 122.4 549.67 P
1.22 (= 2) 194.4 549.67 P
1.22 (# \336le installed on-site) 266.4 549.67 P
(SUMMAR) 122.4 536.67 T
(Y) 171.48 536.67 T
1.22 (= 3) 194.4 536.67 P
(CompOpts) 122.4 510.67 T
1.22 (= 2) 194.4 510.67 P
1.22 ([Asset, Liability) 122.4 484.67 P
1.22 (, Equity) 204.11 484.67 P
1.22 (, Revenue, Expense] = range\0505\051) 244.25 484.67 P
1.22 (# 0..4) 424.8 484.67 P
3 F
-0.04 (This module could also be written in C++, if we don\325) 118.8 452.67 P
-0.04 (t want to ship another Python \336le.) 352.73 452.67 P
(It\325) 118.8 439.67 T
(s also possible to expose entire API\325) 128.58 439.67 T
(s for use in KEL code, as C++ \050and/or Python\051) 288.07 439.67 T
(extension modules. For example, non-trivial KEL actions could make use of a general) 118.8 426.67 T
(C++ tools API module. W) 118.8 413.67 T
(e won\325) 233.91 413.67 T
(t go into the structure of C++ extension modules here) 263.96 413.67 T
(\050see Python\325) 118.8 400.67 T
(s extensions manual\051, but they roughly take the form of:) 173.49 400.67 T
231.09 372.73 122.4 372.73 2 L
V
N
1 12 Q
1.33 (File toolsmodule.C) 122.4 374 P
3 11 Q
(\245) 126 341.67 T
(N static wrapper functions \050convert to C++, call C++, convert to Python\051) 136.8 341.67 T
1 F
1.22 (static object* error_func\050object *self, object *args\051 { ... }) 151.2 322.67 P
1.22 (static object* warning_func\050object *self, object *args\051 { ... }) 151.2 309.67 P
3 F
(\245) 126 277.67 T
(a static name/function registration table) 136.8 277.67 T
1 F
1.22 ({) 151.2 258.67 P
1.22 ({\322error\323,) 165.6 258.67 P
(error_func},) 237.6 258.67 T
1.22 (// tools_table) 352.8 258.67 P
1.22 ({\322warning\323,) 165.6 245.67 P
(warning_func},) 237.6 245.67 T
1.22 ({NULL, NULL}) 165.6 232.67 P
1.22 ( }) 240.15 232.67 P
3 F
(\245) 126 200.67 T
(an initialization function, called when the module is \336rst imported in Python code.) 136.8 200.67 T
1 F
1.22 (extern \322C\323) 151.2 181.67 P
1.22 (void inittools\050\051) 151.2 168.67 P
1.22 ({ initmodule\050\322tools\323, tools_table\051;... }) 232.48 168.67 P
3 F
(Although modules export a) 118.8 136.67 T
4 F
(function) 241.63 136.67 T
3 F
(-based API, C++) 277.68 136.67 T
4 F
(methods) 354.86 136.67 T
3 F
( can also be exported as) 391.52 136.67 T
(functions, whose \336rst ar) 118.8 123.67 T
(gument is the subject C++ object; parallel Python stub classes) 224.31 123.67 T
(can make the API appear object-oriented \050see the prior paper) 118.8 110.67 T
(\325) 387.09 110.67 T
(s examples\051:) 390.15 110.67 T
1 F
1.22 (obj_method\050void *obj, ...\051 { return \050\050class*\051obj\051->method\050...\051; }) 136.8 84.67 P
FMENDPAGE
%%EndPage: "9" 21
%%Page: "8" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(8) 497.57 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
8 14 Q
(\245) 108 710.67 T
(User-de\336ned KEL actions) 118.8 710.67 T
3 11 Q
(In the \336rst example, we had a speci\336c validation context in mind, and could assign it a) 118.8 687.67 T
(name which was hard-coded in the C++ client. Since the module and function names) 118.8 674.67 T
-0.4 (are passed in as strings, the interface allows for more dynamic application. For instance,) 118.8 661.67 P
-0 (we could let the user schedule unforeseen KEL actions, by storing new function names) 118.8 648.67 P
(in the database, creating lists of action names or expressions, etc. Here\325) 118.8 635.67 T
(s an example:) 432.23 635.67 T
1 F
1.22 (for \050i = 0; i < pobject.actions\050\051.count\050\051; i++\051 {) 136.8 596.67 P
1.22 (stat =) 165.6 583.67 P
(KEL_run_function\050) 200.14 583.67 T
1.22 (pobject.actions[i].modname\050\051,) 223.2 570.67 P
1.22 (// user de\336ned) 410.4 570.67 P
(pobject.actions[i].funcname\050\051,) 223.2 557.67 T
1.22 (\322s\323, &stringResult,) 223.2 544.67 P
1.22 (\322\050sKs\051\323, \322Nee\323, company) 223.2 531.67 P
1.22 (, SP) 355.03 531.67 P
1.22 (AM.as_string\050\051\051;) 376.23 531.67 P
1.22 (if \050!strcmp\050stringResult, \322stop\323\051\051) 165.6 505.67 P
(break;) 194.4 492.67 T
(}) 136.8 479.67 T
3 F
(Of course, we could similarly evaluate lists of) 118.8 447.67 T
4 F
(strings) 323.8 447.67 T
3 F
(, stored in the database:.) 353.75 447.67 T
1 F
1.22 (stat = KEL_set_global\050NULL, \322UNITS\323, \322i\323, acct.balance\051;) 136.8 421.67 P
1.22 (stat = KEL_set_global\050NULL, \322BALANCE\323, \322f\323, 100.99\051;) 136.8 408.67 P
1.22 (for \050i = 0; i < pobject.actions\050\051.count\050\051; i++\051) 136.8 382.67 P
1.22 (stat = KEL_run_statements\050NULL, pobject.actions[i], NULL\051;) 165.6 369.67 P
1.22 (stat = KEL_get_global\050NULL, \322UNITS\323, \322i\323, &acct.balance\051;) 136.8 343.67 P
3 F
(Here, we bound some variables we wanted to give KEL access to, and used the default) 118.8 311.67 T
-0.37 (name-space \050NULL\051, which is just the interactive command-line\325) 118.8 298.67 P
-0.37 (s name-space. W) 403.4 298.67 P
-0.37 (e also) 476.63 298.67 P
(ran the strings as) 118.8 285.67 T
4 F
(statements) 195.79 285.67 T
3 F
(, not expressions: there\325) 242.23 285.67 T
(s no return value, but we fetched) 346.72 285.67 T
-0.09 (\324UNITS\325 as a result. The string list attached to \324pobject\325 might look something like this:) 118.8 272.67 P
1 F
1.22 (\322if UNITS > 15: print \324adjusting units\325; UNITS = 15\323) 136.8 240.67 P
1.22 (\322if BALANCE < 0 or BALANCE > 1000: print \324balance error) 136.8 227.67 P
1.22 (\325\323) 452 227.67 P
1.22 (\322import myModule; myModule.action\050UNITS, BALANCE\051\323) 136.8 214.67 P
1.22 (\322for x in range\0501000\051:\134n print \324shrubbery %i...\325 % x\323) 136.8 201.67 P
(...etc.) 136.8 188.67 T
8 14 Q
(\245) 108 152.67 T
(Exposing other functionality to KEL code.) 118.8 152.67 T
3 11 Q
(In the original example, we passed in 2 C++ objects directly \050\324acct\325, \324comp\325\051, and) 118.8 129.67 T
(manipulated them in the Python function. This exploits the C++ functionality we get) 118.8 116.67 T
(\324) 118.8 103.67 T
4 F
(for fr) 122.46 103.67 T
(ee) 144.98 103.67 T
3 F
(\325 with KEL: the generic-access interface, and Python operator overloading. In) 154.75 103.67 T
(short, KEL provides a C++ extension which calls-back to the C++ system, whenever) 118.8 90.67 T
(C++ instances are manipulated in Python code.) 118.8 77.67 T
FMENDPAGE
%%EndPage: "8" 22
%%Page: "7" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(7) 497.57 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
3 11 Q
1.02 (And that\325) 117 712.67 P
1.02 (s \050more or less\051 as complex as KEL extension use gets. Here\325) 159.27 712.67 P
1.02 (s some notes on) 439.96 712.67 P
1.1 (this example, before we get into a more formal description:) 117 699.67 P
8 14 Q
(\245) 117 653.67 T
(The view from C++) 127.8 653.67 T
3 11 Q
(In the C++ code of the \324post\325 system, we simply need to include the KEL header \336le,) 127.8 630.67 T
(call the functions it de\336nes, and link \324post\325 executables with Python\325) 127.8 617.67 T
(s libraries. W) 429.36 617.67 T
(e) 487.45 617.67 T
(don\325) 127.8 604.67 T
(t need to know anything about Python internals or header) 147.76 604.67 T
(-\336les, since data-conver-) 399.6 604.67 T
(sion is handled for us automatically by \324) 127.8 591.67 T
4 F
(printf) 304.7 591.67 T
3 F
(\325-style format strings, and \324varar) 329.76 591.67 T
(gs\325 lists.) 472.22 591.67 T
-0.24 (W) 127.8 578.67 P
-0.24 (e pass in 2 unconverted C++ objects and a C++ integer \050\324KiK\325\051, and get back an \324int\325;) 137.3 578.67 P
(both primitive data-types, and unconverted C++ instances, can be passed from/to C++.) 127.8 565.67 T
8 14 Q
(\245) 117 523.67 T
(The view from Python) 127.8 523.67 T
3 11 Q
(In the Python source \336le, we might pre-code a) 127.8 500.67 T
4 F
(default) 333.71 500.67 T
3 F
( validation function, which the) 364.27 500.67 T
(user can change on-site as appropriate. Alternatively) 127.8 487.67 T
(, we could leave the validation) 358.33 487.67 T
(function blank, as a) 127.8 474.67 T
4 F
(place-holder) 216.7 474.67 T
3 F
( for a user) 272.91 474.67 T
(-de\336ned extension. The Python source \336le) 316.98 474.67 T
(gets shipped and installed with our products, along a standard install search path.) 127.8 461.67 T
(In the Python function, C++ instances can be treated like normal Python data objects,) 127.8 442.67 T
(and can be used in arithmetic, comparisons, etc. They may also be) 127.8 429.67 T
4 F
(quali\336ed) 421.99 429.67 T
3 F
( arbitrarily) 460.49 429.67 T
(deep: Python quali\336cations \050\322object.member\323\051 are translated into C++ dereference) 127.8 416.67 T
-0.06 (operations \050member accesses\051 automatically) 127.8 403.67 P
-0.06 (, using generic-access. KEL also overloads) 321.5 403.67 P
(Python subscripting and slicing to work on passed-in C++ collections, allows Python) 127.8 390.67 T
(programs to create new C++ instances by class name, etc.) 127.8 377.67 T
8 14 Q
(\245) 117 335.67 T
(Extensions as strings) 127.8 335.67 T
3 11 Q
-0.32 (In this example, we called a) 127.8 312.67 P
4 F
-0.32 (function) 251.4 312.67 P
3 F
-0.32 ( coded in a module \336le. KEL also has interfaces for) 287.46 312.67 P
(running Python expressions and statements, passed in as C character) 127.8 299.67 T
4 F
(strings) 431.79 299.67 T
3 F
(. Code) 461.74 299.67 T
(strings can live in the database \050changeable by users\051, be computed on demand, etc.) 127.8 286.67 T
(And variables in expressions can be bound to values converted to Python form, just as) 127.8 273.67 T
(easy as ar) 127.8 260.67 T
(guments in function calls. For instance:) 170.36 260.67 T
1 F
1.22 (stat = KEL_run_expression\050) 145.8 234.67 P
(\322post\323,) 217.8 221.67 T
1.22 (// name-space) 405 221.67 P
1.22 (\322Lower < V) 217.8 208.67 P
1.22 (alue < 999.99\323,) 277.41 208.67 P
1.22 (// an expression) 405 208.67 P
1.22 (\322i\323, &intres,) 217.8 195.67 P
1.22 (// the result/output) 405 195.67 P
1.22 (\322Lower\323, \322f\323, 100.99,) 217.8 182.67 P
1.22 (// set variables) 405 182.67 P
1.22 (\322V) 217.8 169.67 P
1.22 (alue\323, \322f\323, acct.balance, NULL\051;) 230.03 169.67 P
3 F
(KEL also allows us to bind global variables for use in expressions individually too:) 127.8 143.67 T
1 F
1.22 (stat = KEL_set_global\050\322post\323, \322Lower\323, \322f\323, 100.99\051;) 145.8 111.67 P
1.22 (stat = KEL_set_global\050\322post\323, \322V) 145.8 98.67 P
1.22 (alue\323, \322f\323, acct.balance\051;) 320.32 98.67 P
-0.33 (stat = KEL_run_expression\050\322post\323, \322V) 145.8 85.67 P
-0.33 (alue < 1000\323, \322i\323, &intres, NULL\051;) 343.18 85.67 P
FMENDPAGE
%%EndPage: "7" 23
%%Page: "6" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(6) 497.57 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
3 11 Q
0.89 (For such cases, we could elect to ship customers all the C++ source-code for our \324post\325) 108 712.67 P
0.5 (system, along with all the required C++ tools code, and) 108 699.67 P
4 F
0.5 (hope) 359.45 699.67 P
3 F
0.5 ( that they can discover how) 380.83 699.67 P
0.94 (and where to change a default validation. But such a policy is not only dangerous from) 108 686.67 P
1.01 (a support perspective, it\325) 108 673.67 P
1.01 (s also hopelessly user) 219.2 673.67 P
1.01 (-) 317.04 673.67 P
4 F
1.01 (un) 320.7 673.67 P
3 F
1.01 (friendly) 331.7 673.67 P
1.01 (, given the relative complexity) 365.82 673.67 P
1.1 (of our systems.) 108 660.67 P
0.43 (Now) 108 638.67 P
0.43 (, suppose we\325re fortunate enough to have a powerful, full-blown extension language) 128.67 638.67 P
1 (such as Python at the ready) 108 625.67 P
1 (, integrated with our C++ framework. Here\325) 232.36 625.67 P
1 (s how we might) 431.02 625.67 P
1.1 (delegate the validation to user) 108 612.67 P
1.1 (-customizable code:) 244.16 612.67 P
224.68 562.73 108 562.73 2 L
V
0.88 H
0 Z
N
1 12 Q
1.33 (File \322postModule.C\323) 108 564 P
1 11 Q
1.22 (// C++ code in the kapre \324post\325 system) 122.4 537.67 P
1.22 (#include <KELembed.h>) 122.4 511.67 P
1.22 (int isV) 122.4 485.67 P
1.22 (alid, status;) 156.03 485.67 P
1.22 (AbstractAccount *acct;) 122.4 472.67 P
1.22 (// acct/comp are persistent objects) 295.2 472.67 P
1.22 (Company *comp;) 122.4 459.67 P
1.22 (status = KEL_run_function\050) 122.4 433.67 P
1.22 (// run a function) 381.6 433.67 P
(\322postmodule\323,) 223.2 420.67 T
1.22 (// name-space/\336le) 381.6 420.67 P
(\322accountV) 223.2 407.67 T
(alidation\323,) 277.61 407.67 T
1.22 (// function-name) 381.6 407.67 P
1.22 (\322i\323, &isV) 223.2 394.67 P
1.22 (alid,) 268.45 394.67 P
1.22 (// output/result) 381.6 394.67 P
1.22 (\322\050KiK\051\323, acct, type, comp\051;) 223.2 381.67 P
1.22 (// inputs/arguments) 381.6 381.67 P
1.22 (if \050status < 0\051) 122.4 355.67 P
(error\050KEL_LASTMSG\051;) 151.2 342.67 T
1.22 (if \050isV) 122.4 329.67 P
1.22 (alid\051) 152.97 329.67 P
1.22 (// do passed activity) 151.2 316.67 P
(else) 122.4 303.67 T
1.22 (// do failed activity) 151.2 290.67 P
230.69 244.73 108 244.73 2 L
V
N
1 12 Q
1.33 (File \322postmodule.py\323) 108 246 P
1 11 Q
1.22 (# customizable Python code) 122.4 219.67 P
1.22 (def accountV) 122.4 193.67 P
1.22 (alidation\050account, type, company\051:) 192.09 193.67 P
1.22 (if account.balance > 1000:) 151.2 180.67 P
1.22 (# fetch member) 410.4 180.67 P
1.22 (account.balance = 1000) 180 167.67 P
1.22 (# set member) 410.4 167.67 P
1.22 (if type < 2:) 151.2 154.67 P
1.22 (return 0) 180 141.67 P
1.22 (if account.info.balanceT) 151.2 128.67 P
1.22 (ype not in company) 277.53 128.67 P
1.22 (.balanceT) 383.68 128.67 P
1.22 (ypes:) 433.61 128.67 P
1.22 (return 0) 180 115.67 P
1.22 (for option in account.options:) 151.2 102.67 P
1.22 (if option not in company) 180 89.67 P
1.22 (.info[2]: return 0) 311.81 89.67 P
1.22 (return 1) 151.2 76.67 P
FMENDPAGE
%%EndPage: "6" 24
%%Page: "5" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(5) 497.57 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
225.32 709.38 108 709.38 2 L
V
1.26 H
0 Z
N
2 14 Q
0.28 (When to use KEL.) 108 710.67 S
3 11 Q
1.85 (Because of its \337exibility) 108 692.67 P
1.85 (, KEL) 220.09 692.67 P
1.85 (\325) 247.82 692.67 P
1.85 (s potential applicability is broad. Of course, there\325) 250.88 692.67 P
1.85 (s no) 484.12 692.67 P
1.1 (usage guidelines yet, but as a) 108 679.67 P
4 F
1.1 (rule-of-thumb) 245.66 679.67 P
3 F
1.1 (, if a component:) 306.77 679.67 P
6 F
(\245) 126 657.67 T
(may need to be altered on-site,) 136.8 657.67 T
(\245) 126 642.67 T
(is part of a rapid-prototyping ef) 136.8 642.67 T
(fort,) 285.78 642.67 T
(\245) 126 627.67 T
(needs an easily-programmable interface,) 136.8 627.67 T
(\245) 126 612.67 T
(requires a language parser) 136.8 612.67 T
(,) 267.64 612.67 T
(\245) 126 597.67 T
(or can\325t be conveniently implemented using our C++ tools,) 136.8 597.67 T
3 F
0.48 (then it\325) 108 574.67 P
0.48 (s probably a good candidate for KEL. T) 139.35 574.67 P
0.48 (o date, we\325ve identi\336ed a number of KEL) 317.32 574.67 P
0.31 (application areas, including report-writer customization, an alternative implementation of) 108 561.67 P
1.17 (\324N-amounts\325 equations, and various system-architecture components. A role as a rapid-) 108 548.67 P
1.1 (development language in the planned \324application-editor) 108 535.67 P
1.1 (\325 is also being explored.) 362.89 535.67 P
2.15 (In general, each KEL application area may have unique requirements, which will be) 108 513.67 P
1.15 (addressed on a case-by-case basis. The current integration system provides) 108 500.67 P
4 F
1.15 (tools) 451.58 500.67 P
3 F
1.15 ( to run) 472.97 500.67 P
1.1 (Python code from C++; the) 108 487.67 P
4 F
1.1 (structur) 236.82 487.67 P
1.1 (e) 271.25 487.67 P
3 F
1.1 ( of the integration may vary per KEL application.) 276.14 487.67 P
151.68 429.38 108 429.38 2 L
V
N
2 14 Q
0.28 (When) 108 430.67 S
174.08 429.38 151.68 429.38 2 L
V
N
9 F
0.28 (not) 151.68 430.67 S
251.92 429.38 174.08 429.38 2 L
V
N
2 F
0.28 ( to use KEL.) 174.08 430.67 S
3 11 Q
1.19 (Given Python\325) 108 412.67 P
1.19 (s ease-of-use, it might be tempting to use KEL in contexts where a C++) 173.06 412.67 P
0.78 (implementation would serve just as well, and perform) 108 399.67 P
4 F
0.78 (much) 354.07 399.67 P
3 F
0.78 ( better) 377.9 399.67 P
0.78 (. If a component does) 405.87 399.67 P
4 F
1.1 (not) 108 386.67 P
3 F
1.1 ( match any of the above criteria, there\325) 122.06 386.67 P
1.1 (s probably no reason to write it in KEL.) 299.6 386.67 P
0.61 (While some systems demand the dynamic-nature of a tool like Python, its poor run-time) 108 364.67 P
2.51 (performance \050shared by all dynamic languages\051 make it best suited for special-case,) 108 351.67 P
0.62 (limited use. C++ and Python have distinct strengths and roles; a) 108 338.67 P
4 F
0.62 (hybrid) 398.59 338.67 P
3 F
0.62 ( approach, where) 427.32 338.67 P
1.1 (Python is used for \324front-end\325 components, leverages the bene\336ts of both.) 108 325.67 P
0.81 (For instance, it\325) 108 303.67 P
0.81 (s reasonable to) 178.37 303.67 P
4 F
0.81 (pr) 248.93 303.67 P
0.81 (ototype) 258.3 303.67 P
3 F
0.81 ( components in KEL, and later re-code them in) 290.69 303.67 P
-0.47 (C++. But KEL is not intended as a) 108 290.67 P
4 F
-0.47 (delivery) 259.34 290.67 P
3 F
-0.47 ( medium for lar) 294.77 290.67 P
-0.47 (ge, static components. Similarly) 361.9 290.67 P
-0.47 (,) 501.25 290.67 P
0.17 (it\325) 108 277.67 P
0.17 (s reasonable to expose C++ API\325) 117.17 277.67 P
0.17 (s for use in Python. But if such an API doesn\325) 262.74 277.67 P
0.17 (t present) 466.25 277.67 P
0.47 (a) 108 264.67 P
4 F
0.47 (simpli\336ed) 116.11 264.67 P
3 F
0.47 ( view of the corresponding C++ framework, its complexity may negate much) 158.89 264.67 P
1.1 (of the advantage of using a simple OOP language such as Python.) 108 251.67 P
268.72 193.38 108 193.38 2 L
V
N
2 14 Q
0.28 (Some quick examples.) 108 194.67 S
3 11 Q
0.54 (Before we get mired in technical details, let\325) 108 176.67 P
0.54 (s take a quick look at KEL in action. Here\325) 306.68 176.67 P
0.54 (s) 499.72 176.67 P
1.2 (a hypothetical, but typical scenario: suppose we have a validation in the \324) 108 163.67 P
4 F
1.2 (post) 444.74 163.67 P
3 F
1.2 (\325 system,) 463.08 163.67 P
1.1 (which we\325re unable to fully implement in C++, here at KaPRE.) 108 150.67 P
1.7 (It may be that we can\325) 108 128.67 P
1.7 (t predict the sort of constraints that will exist at any particular) 214.34 128.67 P
2.38 (user site. Or it may be that we\325re simply interested in making the application more) 108 115.67 P
0.86 (powerful, by opening up strategic portions of its logic to the end-user) 108 102.67 P
0.86 (. In any event, it\325) 421.74 102.67 P
0.86 (s) 499.72 102.67 P
1.63 (been decided that this particular validation is best not) 108 89.67 P
4 F
1.63 (har) 360.1 89.67 P
1.63 (d-coded) 374.97 89.67 P
3 F
1.63 ( in the C++ code of) 410.4 89.67 P
1.1 (the libraries and executables we ship.) 108 76.67 P
FMENDPAGE
%%EndPage: "5" 25
%%Page: "4" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(4) 497.57 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
2 20 Q
1 (KEL: C++/Python Integration) 158.7 706.67 S
2 12 Q
0.24 (Mark Lutz) 277.68 668 S
0 F
0.24 (Copyright 1995 - K) 194.41 652 S
0 8 Q
0.16 (A) 304.08 652 S
0 12 Q
0.24 (PRE Softwar) 310.16 652 S
0.24 (e, Inc.) 380.34 652 S
130.12 581.38 108 581.38 2 L
V
1.26 H
0 Z
N
2 14 Q
0.28 (Intr) 108 582.67 S
196.79 581.38 129.87 581.38 2 L
V
N
0.28 (oduction.) 129.87 582.67 S
3 11 Q
1.58 (This paper presents KEL) 108 564.67 P
1.58 (\325) 221.41 564.67 P
1.58 (s current C++/Python integration system. It supersedes much) 224.47 564.67 P
1.78 (of the earlier \322) 108 551.67 P
268.26 550.61 177.18 550.61 2 L
V
0.53 H
N
4 F
1.92 0.22 (KEL: An Overview) 177.18 551.67 B
3 F
1.78 (\323 paper) 268.26 551.67 P
1.78 (\325) 302.51 551.67 P
1.78 (s technical material. In particular) 305.57 551.67 P
1.78 (, the prior) 457.36 551.67 P
-0.31 (paper) 108 538.67 P
-0.31 (\325) 132.84 538.67 P
-0.31 (s \324Appendix\325 presented an implementation scheme based on code-generation, which) 135.9 538.67 P
0.09 (was not ultimately used. That paper) 108 525.67 P
0.09 (\325) 265.88 525.67 P
0.09 (s \336rst half, dealing with KEL) 268.94 525.67 P
0.09 (\325) 396.7 525.67 P
0.09 (s) 399.75 525.67 P
4 F
0.09 (goals) 406.87 525.67 P
3 F
0.09 (, is still relevant.) 430.71 525.67 P
0.17 (This paper) 108 503.67 P
0.17 (\325) 155.31 503.67 P
0.17 (s main goal is to show how KEL can be used today) 158.37 503.67 P
0.17 (, in KaPRE-based systems.) 384.65 503.67 P
0.86 (Along the way) 108 490.67 P
0.86 (, we\325ll also look at some of the implementation. W) 173.77 490.67 P
0.86 (e should note up-front) 403.96 490.67 P
-0.23 (that the current KEL implementation is intended to) 108 477.67 P
4 F
-0.23 (evolve) 333.48 477.67 P
3 F
-0.23 (, as we gain experience applying) 361.58 477.67 P
1.1 (it; some of this paper may become arbitrarily out-of-date.) 108 464.67 P
253.88 406.38 108 406.38 2 L
V
1.26 H
N
2 14 Q
0.28 (Functional summary.) 108 407.67 S
3 11 Q
1.39 (As discussed in the \324overview\325 paper) 108 389.67 P
1.39 (, KEL \050the) 277.36 389.67 P
338.97 388.47 331.03 388.47 2 L
V
0.54 H
N
1.39 (K) 331.03 389.67 P
1.39 (apre) 338.97 389.67 P
368.77 388.47 362.05 388.47 2 L
V
N
1.39 (E) 362.05 389.67 P
1.39 (xtension) 368.77 389.67 P
416.92 388.47 410.2 388.47 2 L
V
N
1.39 (L) 410.2 389.67 P
1.39 (anguage\051 can serve) 416.92 389.67 P
1.1 (in a variety of) 108 376.67 P
4 F
1.1 (r) 176.55 376.67 P
1.1 (oles) 180.42 376.67 P
3 F
1.1 ( at KaPRE:) 198.15 376.67 P
(\245) 126 350.67 T
(as a mechanism for) 136.8 350.67 T
323.81 349.47 224.78 349.47 2 L
V
N
0.22 (on-site customization) 224.78 350.67 S
( \050without shipping C++ source code\051) 323.81 350.67 T
(\245) 126 331.67 T
(as a vehicle for implementing) 136.8 331.67 T
433.38 330.47 270.31 330.47 2 L
V
N
0.22 (rapid-development and prototyping) 270.31 331.67 S
(\245) 126 312.67 T
(as a basis for unifying the) 136.8 312.67 T
382.72 311.47 252.89 311.47 2 L
V
N
0.22 (language-based components) 252.89 312.67 S
( in KaPRE products) 382.72 312.67 T
(\245) 126 293.67 T
(as a) 136.8 293.67 T
266.63 292.47 156.35 292.47 2 L
V
N
0.22 (client/server integration) 156.35 293.67 S
( facility \050in conjunction with CORBA packages\051.) 266.63 293.67 T
1.39 (Ultimately) 108 267.67 P
1.39 (, KEL) 154.34 267.67 P
1.39 (\325) 181.61 267.67 P
1.39 (s scope will depend on the extent to which it is employed at KaPRE.) 184.66 267.67 P
-0.22 (This is a matter of company policy) 108 254.67 P
-0.22 (, which we won\325) 259.34 254.67 P
-0.22 (t attempt to debate here; the \324overview\325) 331.8 254.67 P
1.1 (paper discusses KEL) 108 241.67 P
1.1 (\325) 201.45 241.67 P
1.1 (s potential bene\336ts in some depth.) 204.5 241.67 P
0.44 (As also discussed earlier) 108 219.67 P
0.44 (,) 217.32 219.67 P
4 F
0.44 (Python) 223.25 219.67 P
3 F
0.44 (, a very-high-level object-oriented language, is the basis) 254.42 219.67 P
1.1 (for KEL. Integrating Python with C++ achieves KEL) 108 206.67 P
1.1 (\325) 348.9 206.67 P
1.1 (s goals by providing:) 351.96 206.67 P
(\245) 108 180.67 T
0.39 (a) 118.8 180.67 P
164.09 179.61 126.82 179.61 2 L
V
0.53 H
N
4 F
0.39 (dynamic) 126.82 180.67 P
3 F
0.39 ( programming language, for situations in which a C++ compile/link is either) 164.09 180.67 P
(impossible \050on-site customization\051 or inconvenient \050rapid-prototyping/development\051) 118.8 167.67 T
(\245) 108 148.67 T
0.5 (a powerful but) 118.8 148.67 P
215.93 147.61 187.21 147.61 2 L
V
N
4 F
0.5 (simple) 187.21 148.67 P
3 F
0.5 ( programming language, for situations in which C++ complexity) 215.93 148.67 P
(can be a liability \050prototyping, end-user coding\051) 118.8 135.67 T
(\245) 108 116.67 T
1.8 (a generalized) 118.8 116.67 P
245.21 115.61 183.49 115.61 2 L
V
N
4 F
1.8 (language-tool) 183.49 116.67 P
3 F
1.8 (, for situations where we might otherwise need to build) 245.21 116.67 P
(specialized parsers and interpreters.) 118.8 103.67 T
1.1 (The result is a highly \337exible extension tool, which enhances our C++-based toolset.) 108 77.67 P
FMENDPAGE
%%EndPage: "4" 26
%%Page: "3" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(3) 497.57 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
108 72 504 720 C
108 72 504 709 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
343.08 648.18 268.92 648.18 2 L
0 X
0 0 0 1 0 0 0 K
V
2.63 H
0 Z
N
1 36 Q
0.72 (KEL) 268.92 652 S
4 24 Q
2.4 (And now for something completely) 134.54 521 P
(differ) 256.78 492 T
(ent...) 307.9 492 T
108 72 504 703 C
113 79 499 388 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
%%BeginBinary:  14046    
374 297 374 297 0 119 79 BEGINBITMAPBWc
J"
O FC









J#
7EAABJ&
5F200000003I$9#
E00680000FI$9#
E4A788042DH+
F807FC00000118000C3FG,
FE0E7F782007DF7FFC0387G,H"
F187FF80007FE6FEFE00483CI"8$
773EE6FFG,G#
8E48F80001E1D9FB0001FFFEFCF%8(F"
F0703700BF3FE00181F607F8I"8$8#F#
40FF3EC0B687FADCF.F#
87C14E0008027FFFC000407803F9E4E0E#
FC3E000800000FDFD740007048007FF7DCE%8%8$E#
E0FE000003F00000380007CF24E";$8%E#
E10B700930180017CD2CE#:$8%E#
C480107000700600FBDEFCD#;#9"8#D#
FE3F0F807C807FBE3CE$9":"8"E"
3590010D54A8BCD)8(C#
E0C0000FF9F8001F03EC3C01C07F9FFE78D2D#
C6FD01FE0EFC00018006039C7C01F8FFFF76FCC3C#
FE1D20138001DC00BDC01AE375FC003B9DE3FDC1D&8'8#D"
1F2012800595801EE75CEC9FEBE1C4B#
F8D8007E0001A4006E4638DC73B800529FE07FFFC9C%8.B$
F21FE00838041FCFD77C6DF0001FFE03BFF3B73CC'8'8"E"
F01DE09C00055FCF5F3C6D70EF37C4B$
8967E0E00001DC00FBDFE53B9FF00007E0000FEE4FFCB5B#
4FE3FC002800009F801D1B9F9F7ADC400030000079C38C%8)8$C"
2F4900A0B000F3B9D0FF8DC080000F39B/8%B#
FC04FE1F80000EF8075E7FFEF773000000419077B0:"B#
E3FFD823EFCDDF3803723739FCEF800061CFB0;"@%
92F9F80C73B1FBE0037DCFDFDC7E003FFC97BF3CB0G"
93A9BA0573F1EFE00255DB5FFC7E4093A1;"A$
FC03F9F80773BDF9E000FDC7E73BFE000FEE7EFCA0<"@%
F06E6F1007FFB639C0000C7CDFE7FC07F38FFE3CC(8%8"G"
7E1805F7BEB9807EDAE7F4017CA08"9"@%
E3600A203F7FE3BF00001BB8FEFFF00001EF1DF83CA)8(9#@%
8FEC00003B6073F80FCF19FF0000383930937FF0FCA)8%<#@$
8D00010000003EF00247DF3C3FDEECFFC1A#:#9#9'
8F803BB055DB280008002F7EA$8$8.?$
1C0C8703CE0005FE27E00001890000000FFF3F0CFFCF@%8#9*8#>%
FC7C7F8F02FC0E4CDFC000004F001DFB1FFC7BF3B7A"8%8&8$8"@$
79400003F4200E4EDB404D001CBE2FF3A7@)8+8#>%
F810BD5F000000000003C8D9C00001FE0064F9C7FA6FFE0F@%9"9.>%
E183E1F702003F3F0001CDC0007F000D2927E49F8C3F@%9#9->$
C40FE1FE03B077C60005BC70001F8007F703E01F10C":"9':#>#
DA3067D70001B4607727E41E@%9#9->%
039F8C760DCE31E600024FF000986001F620D87C607F?&8$9->%
FE5B1E0FF0027DC60EC100018E7000EFE001F7C423F0E5FF@'8":"9$8"?$
1B3F0EB0000146C96000BF5722F0E1@+8.=$
DB0C027000001C23FE2006FE00007FC000836000FE647FE3F083?%9%8-=%
F8187C1C1D8E39E031380001FC70006700800EDCFEC7E303?&8%8.<%
F7F8701EF06BCD89F838FE0005CC0003FF8008F9C51FF11F830F?"9"8%9%8&>#
F5707F5D89D0D60001C8D78000F9C71787?&8%8.<%
CF03006FF001BE76C00EE60013B00004FFE000091C9FCF3C1C1F?&8%8&8'<%
880700E5506E09B724075E000E701FE0063BE38FBEFC737F?&8#:%9"8$=$
894500EDF04A4D05DC000C1B39AB0FBC733F@%8%8-<&
03005E2003BD4F3C01FE001D7C001C0360013F20FE79F0D0FF>'8%8.;%
FE483F0C83B01C4E3CDB0FB000E3F000E403F00037E12FF9F1C7F0>'8,;$<$
F849FC0FF3FE7063B7C698000618006E000FE463C75F83?&8%8"@"=$
C9FC0AF3AC6072BFD726E5C5DD93>'8+8$8#;%
FE71F81C7070625DED3AFC00FFD8000C0000B0E303F7C73F8F>'8+8(;$
F7C7E07F0F8E678C0F3DFFE1B93E00103C00F20049DCEDCF80FB>&8&8"8":$>#
E545607F2E80628C173FE952F3001802FA>58&<$
4CE0F200BF3CE00001052004000127FEA00738001FF800FFC0187DC1F>'8-8&;%
B78FC2EE1C48767FC20060004D9E001380077FC02D3891BE05FB7F>,8$:"8&:#
B38FC0EB1C580002727B40014FDA7CC10F39917FBA07>38(:&
A63F07FF91B6000093C00000E0000BF8006D840060000FFBF0FE7F8FFCFF=5:%
<FE7638077392760004FC44080001800138001D8006FF005FC01EFF60FFFE0FF3>*a.9%
30683F707E600007F2A60015F007FF807FF00FDC419FFDF07FE7>5;":"
534782E517E720017D2044000080080E6001CF015BF65F9=5:%
<FC7040E7FFC870003F00000003601FFE180019F03FDF207DC00FFFEDF3C1FF1F=*8&8,9$
FD87C0A7FCEE6E80C0011880FA411243BF179C7D824FFF800F9F87C8>(9%;#8%;"
8340E7A8EE7624091892DE3B1F800FFF90857";)808":$
DFF04600FB9C80740001F8C26775D7E0000EBC79DF9FFFD6F07F8E5E7";58'
E7=F3C407FA9C9DE63E00000E49001CDFFE00001E7FF1FEFFFFF01600FC6FE0FE01F9801F7";)8'8,8'
FCE246373F97FDFE107E76387BFE7F4E33CD39E77D80004BF2631FA03E6FFC00@&8"9#8,9&
359DF5D618EEB66B0E32C96CA7DB0001037267E03E7FFC807#:5
FB7FGED8A3F1FEC703C00000F7BF0E4E77FF64000F3CFFA07FFFFF000001E73FFF8FC7C3A3FFFEE807F7#:58%8*
E7EF68F8FD9FCCF47B8C0037E73D103879BBE0000EFFDF803C002020EE7C0E00001E07FFE008";'8(8#8"8%<%
CF8EF9FCEF63A87A73F90B8E8F3ECF7DD700008A53A06FFE927#:5
FC79H938FCFDF8C7281000772BFD6C578FFFE00E0EE79F00087FD8000020271FE1F07E0060007FF99FE047$958#8/
E7EF9F41DCBC8FF7F9E7E003F938DB8049FFC7600F8CDB10FE1100071F1FC2F807FFFE818000FFC7$9583
E81FE1469C67ED7771A0801FF9DCEAE17E7BFDF00FC638D1F00000018005D87F9FF0FFFF9FC000FC01C7#:'8)8"9":%;$
E01B4D846EFF5F5EEA9DDBBA07E7FEFF6B17407987F8845FC87%859/
FDE2960F76F8677E373F23007D8EF83D9189EF3AFC1FF6FBDC0000700007DFFE3FC1FC00007FCFF7F7C759#8+
=FC907EF823FC7C4676BD7FE1C01DC7FC73F63F3FDFF1BFFF9ABDF00008010CC7E0FC3E7FE07FF7FFFC9&858-
7BA926D4745EF5FA1401786EC73B4371FF571F6EF9FBD70000020000C75FF47E0F83E7DA15FFD759.
>FFF00E8FFDFC73C1E43D1381801EEF9E73E63FFFEE7EFF3F8AD380000800007D7EFFC7E1C000000CDFFF3C858-
?FF8000E7D89FB00013FE0200E73A73BC48CC7F7FFF7FFE6FCFC000000002C01E7FE03F8E000004008FBFFC759#8,
;E0DFF6000039BDB9B9C3100001273B11C070DBFFFFF7DEB913BD4009FE127E03DC003FFFFFE0007F8+9%8%8":"9&
FFDE5000289DB9398B3033114072EFFFD6FCC06E7C03F4002F759#8'8$
;FC5EF3FFE41BEFF9C138001001FFDCE78020FFE07EFFF9D802624007CE1E7FFFF80FFFFFE035758$:$:$
;DF1DBC0FF81B7E4FFFD8000001DEDC638031FF000001FFF801CF800279FEFBC0FFFF803C9$9#9&9#8";"B"
EE2BD0BED0DCD463003505FE4DB6C07+8(8#8#8$8%<#
E78363F7C0E4DDFE7AC007C6E3740001E7003FBE0003BEFF1FBFFC03FFFC7+8(9%9#9%
D7E07EDC03E3FBF7E6980E2E87CC8001E00118004E02791DBBE007749%9*
C01C000007E7FC0FBEC01F000DFE1B1C0031C00000007C7DC1B7C0001FBE201F71?";"
D09C004007455C0E9AD015000BFE5B1878E773="9%8$
E08B80061FC7F1C1F1201F000F21DBFC00017C5DC0CFE0FF80FF73A$9#
F820007FFFDB71C1C9386C000BBEDCC800796240F7C8078#9+8"<"9$8"
0052F1C3892968000FEED4AC80546650B71774<"8%8$
FF0261EFFFC6E3F1DADB6C000AFE27100001C07C03E3B0FF0C4FFF859"8%8"
5E00E3B001C6FF870F800000EE1FB92010940000FBE6C029FC03D0E:):%8"9"8"8"9"
2E249C6FE864F808908009C0AC78033FCF85
CFC0000FF1B4C7A17C700000FDBE6938131400072FF18C0005001E0029F708CE0020FC78+85
FFA073C31F9C703F246073D1CE24381C000FE7761DC003006A004FD803FF8018F7795
BFF809C249848093BE00007DE39764019C063EBBFB9F4100C0F3B07F38037F80E0381:*8%8%;"8$
00DC2494482933E0803C7240094FBEF9BCF2D80E82:5
AFE003B1C7837DF000001FFE0D23E01E0A4FD4F303B803007FC6779800FF80183F1:)85
FFF8231C7E3434A07371CFFB241609F9C46C738902C39F77A8E0007F803E3F9=&8+8+
146EA63CE03D1CFDB251E09E9C66D73829FF6B8F000FF806A3;(85
FC1C107E09E5007F8DF0D8E08B8FC8399E1DD7383BFBA9FEE4007BC03E278<5
@3F6C6D8F1B600000EEE39E3388ECFB91FEFEE71207FEECE577C009FC0D61BE1F<'85
2770778FFB408FFD891C006FCFBEA311C260DB3D1FF7BFDC00FDC0E53CC07<'85
2530668DABE07EFD8B1C924F4FBE2A15E275DB3F9AE7BBDC00DFC0A72CE<'85
D8E07E01E4008FF3E0F7C41FFFCF3B9D7DCF2C13FFCEFFF400FE40193FA23;'95
F824E0398018939DBF03E793FFF71FF27E76C7C4EFB9EEE40077C0663FE183F@";49"
1CF136691FFF55AD26E74C6CCEF39FEE4207FC027F<&95
E490C7800191FE70DC07624FFFFB9D9DA9E41CFE6E6738007CC03E14F071F<&:5
C8007E400073B6F8C00000776CE21D8EF8D3DDFFF1F80017C030DF700<%:%84
C3F07F8007DCFC0019FFF3397863C077FCFF1E4008FC0071F80003<"=$9+:"
9305DCF85B7EE739D872C0F6F4DD20<&9$94
E6A1C9400400E760046E71C618CDC44EBFFF1E7000FC01EDFFE00E<&:#9-9&
03E17048E73B80030E4EA5380DBDCFFFBC0FB0A857C0007F<&?"8(;&
8361F049CF02E7311DF54DBFECEC7FC0016F;(95
FBC0E1BF8F1B8091C0001FF0000E27621D80E7DFFFCF80BE000DC0061FF60000F<&8"85
C3E03FB6E606803FFF6E8007DF8EF980FD9FFE7E003C000FC019DFA000003;'848'
FAC3A1F1F8F80FE0200FFDF7FC001DFE20E00BCC4DDFA001F00061F9E00001;';":*9"8"8"
FBC3E1F1E8F90B59EE64E00ECC4FDFE0BCE911<5
CC7A3F6770300003618007E7FBCBF006F9EDEF8007C7FFE80007000FC01F1FFC000003F;59&
;FA04E3CFCE3F800039DF03FE7FCF3F8013FFC638003C7FBF8001F0ADBF000004;.9)<#8"
FB04C3CFC77DA00029DF13EE6B11DBC63000396FFEED3F00;58(8"
8F8C783BFB0FB80003FFE47BCF3EDFCE0004ED9D800307FFFF800FF0051CEE007;59#8#9"
7FBC782F9FE26000030E61E9FB3BFE7E0020F1EE7003EBFCE077C7F17;58,
8F8C661E04FDBE0002F383FEFFFBDBBF80007DF38F02E7FFDFE07FE01E87EA00010007F;'8"9$9'8+
F08761F54DCF3FEFBFEBDB38B03A7FFFF607FF01AC76E0000420;58.
6FBC3E1CFBFBFA00079C0FBFBF3BF9CF80C07D9D817CC6001F9CFFC001C7FB80000003F;"8/83
F80E79FCE00048E1FC5F7FFBFC7800DF9D0A2FFF800079F7E700743D000004040F>"<&8"82
AEDC7FFFFF74059F8E3DFFA0007BF7E6007C2F500000002F;'8%848#
FB028079F7F8B7063DFFFBEC00013BD6B64C00FF8001BFF9FF00103FF80107;58(9"
8F8C36077BFFC60023919E7FDDFFFFF7F0031F95F9FFE003F7FFFE0000C49D881?-9+8#9"
BDFC70027911C6F777FFF75EDD96FA023FA001EF7FE8697895;58#
AF982F18FDF780003C639FCFFFE0FFEF40001E9EB7F82004480007E3FDC00007F000739;58#
AFB07E1F9FBE080023E393FFFE0120FDC0031F8FBFC32000000002F0FC0000C7FF80070;58)9"
8F80781F7FE018003F1F9C7EE000004FB6020FFBFF002000A0F300000004DFCC43F<,9-9'
869177EB008002F1FBD7EADF6030F7F7F212000080000D044FF4CC0005<,8)8/
03704FB0030001B139DEE0077C0039FEA3100000000632800000773C050008761F;-8(;$8(
FAC3F1BFF0048001C7F9DF0003940250FF008000000031E40080004EC7;"9#8#:':%;&
F8702443A9029C0270FE4408000208408400CA87;,9(9%9(
FC02E17BF0E36001C1FBFFDBFC0008DE0000000000C078F80860024F03<-9$8";"9(
C3D1FE073C80010F1FDC01BE0C48C002003ED4C000018EEB<#8/B(
03013380003F39F001360138DC8046403784108C064118<3C#9"
02217E053B88003B31E801BA0328FC8044C0CC4238<29"?)
A3E07807D82000793FC00C0001077C01860039F8CC600037C07F<29":":(
00FFF0360000E07FFF186C0E06279801800C103EA030000030FC;"9#8"<&<":%8"
FD3440779C01008001002EE03824BC;5?)
6FF007FC008000C81BDDE00FC00060FF80186C003F1803E001F0007D91B1F=5?)
43FC0901B6383B9F003A000301CFC0008E0074DCC3BF900000FF91B0F=5?)
4004001269C0FA9E0008020701FF80D80F91C92702EE0406000773403<4A(
40014083278C0ABB60488008D21D7C0D82E9143EA0006010353C<59";)
5D8040000C2EC63DFC0070181F03BF88308FBDC93A2102723001006472507<58";)
6C10000080F70F3FE001703C3D027E803B8E75F7183C80009E7006E167DE003<"8.8"8"=#8%
C40A8550F2FB404602C3F027F812D54810197E065760<"84=*
C300000393DF00E00C02501FE001CEFEC31E53F9003F3AC00039CF1C80<"859":(
E0438000FF3CEC0001201B0E76081B0DE1B6F0CFFC0301FC0020877C30C<%829"8*
E46000007FF80700F03C401DE201F1C31C603DCF80000C3BC5A0011800FD8C>"8#8/=)
024F7D41E03D401FE80171873C60AD4FD02FC7E0000882BCA8<58#8+
7F81C000900937FC009008853C173800079F9218C7DB9F808F9003EC03811A60004807F=58$8"8&
693800003EC7FC119DF603EC0DEA02061282061FC77E03FFFC03F5040080383=":"8+8#9#8&
13EF56C0B782DF800071382275C05F803B40311048<5
FFC0C7E0004EF7E00DFC001BDC02700000511C003FDC8E018027FFAE0000239C0580240000003<58'9"
;FF0237F73F63FC0020A003CB47FF800007C4A41FFD89E07CFFFEFF003F000712301F=59'
;01403FFBFFF000260001FE0BFD00000496E07FFDC6C487FF8FE9F8C00080000820=(9$8$8"8$8#8%
14403BFBBFE002DE09DF06C6A8D4FE8BF9043784000960=5
F8277FEFEE0000000001F438FBC0020062403FFFDF7141791FFFBFC000038000000080780009F=&:*8'9)
E181A9DF007E7E1FE4040034005FFEE47F8E40F63FC0C02001F80403>'8$9$;%:'
89B9DF200040767E0F36001F8C40E4BC800001D85407=(8*8(8*
E0378924010000F1BE371A800027FFFFC9FBFF6E400FFC2B003C00080E04018F=&9):(8)
F0000F5B0003FC023FF8000035C6C298F1C00F2F0E001F2C0780E383@";%8":#:":'
1BF4002AD837C4C33D1B0C1702E282='8):(8*
FC0000E000041FFFF449F8400043C71CA7E78007DC1DC027E000780380EF='8):(8$8%
FF8000000000FFFFFC3EE0000047F627677F0007FB0FC03E4603006F>";"8%;4
C007FDFF2001F9F9F878E98004BF00200CC4E7F383F6E301EFH$;4
EF2000FDF97879ED8006FD00001E84E7D3A966E320CF>";"9&:(8*
F83FFFE000018FFFC3E3FC00079F0FC027E03800FF0F6F>#9#9"8#:(8*
FFC001FF3B034FFECC9CFB80053D0AC30671C03F448013G#9";,8%
F9AFCFC48CFF80073F00108E8307BDC0A083?"8#9#8#:3
FE027FF07E028FFF2767FE00057401818F0300F1498EA300E3?P9&:4
F1BFE0030FFC793B7CF20007FE01800E03C09C4804C460F3H%;*8(
FFE880033FC79BFDC008F40000E3EC3610DF0193I$;%8"8)
E080023DD79BF5FD9A02A3EC3C029B00G':(8*
C048F8E0020F06DCE6FD0007FC4F00E07E0076E4C3F3G%;4
80080000FE07E764FF8006F000018E01381400315B60D3G#@#8-
881945DEF80401AC00301C0131DB61F3F$8#:3
FE0040018F01E77F6E0007DC00024E00B8FA0004C740E3F(;2
FC4C000800000FFAFB7E700F3C0063CE00179D8E013B0373G':3
00002000018F001F85F3B83F18000180001C13800984E393I#=#8"8*
000817873705020058139289C463F"9$;2
F0000107047C9DEFF1F800124F001CA3C00E0403E3I%;&8+
03000E4702676F8FF900BE0014720609180393H"8#;&8+
100C5700E66F9FDB043E801D7226093026B3H&;2
0000001E4703787C760F3800028F00040FC001DC03F3J#9+8(
56A35FF8003E3E3F70CF80017030F8F81808F93F$8#<)8'
E000206C079C9E3F06E4000DCF0E06060C00E3H"8"<$:)
004C029C9A0F4F08030A041625J#;2
5723503D46DF7073C00001D0003E183B0FE1F73J#;2
57E3102FDEFC8019F00026F0403604181031F63F"8%;'8"8$
E408005A2303FCEB4A01DF3F400583F(:3
EC000200047E398F23E79E38011F00018B0000E03800D07F73F(:,8&
E0000000007031CFFFFF127800E380000F030680001FE3I%;2
08005C11E4F8E3B000E7000007C00001A00EC00383F(<"9#9$8#
E8000200087831F9A780200180438BF(;2
F000001800F001FBE48C30003BE000018400200841037FEFI%:3
0000B031F7DB7C7DF0003F600007C08001B9C0CBBC8FJ";2
5E0E7D35D75E0003DE00006C0080139C0C2F8J#:2
5A001F71CE7F27000FFF00007E080018608009FF"8%;2
F22000E031E0E7933000A3D00005E01890301200F30FJ";"8(8&
6B1E2B000E7F00007C0204021B38FI%:3
00038071F1E7781DF0001BF40005E00001B803078F9FF"9$:3
F00701E7F9FB5BE9F800EADC0007F8030028481FFF1FF#8$;1
FD801F8047FF9C8E3800DCFE00051C000381803B7EF"9#=%9)
F9178194CE38020718200305923A7BF#8$:2
FD00180607F8FF9D7E7800D4E20001FC000DBE00D8E3F#8#;)8)
FE40641EFEFEE7F3B801D8FEF800903001BBFC7FJ"<$9"=#
50EFFE7F1DAFBECG"8$:%8#8(
00600C0FFF3CFFE3E7FC9F0011C6015F80F#8$<'8(
FF80400C2F7BFFFE06B78CFCC061840707FCF#8$;'8*
FE40E091BFC47FFFFFFFFB00FF2000301147F4FFJ$<'9'
4A091AF3FFDFD7FDBAC6008300107FCG"8$;(8(
30E0103FC01FFFFEFF3F7C3F980000371F60G"9#<'9"8$
10627F00FFCFFFC7EC1C77BCF0G"E":&
30CF3C0080773CG"8$=&8(
0C1F6DFF7FFFF7DEE037FF81863F3463G&<(8(
08000307F1E00003FFFFFF801FFDFDB7FF3DE3F'<(8(
FFC1800304E3F800000FCFFC000437F279FFFE6FG"C"<#8"
C54DBFB2DFG&?$9(
F18004068F00002007FFF2D9CFFC8FH%<":"9'
881C070FFC4003FFFFFFC7B4H$B";"8"
801C0500BDECG&<">(
F0301C071FFF00FFF3F7FFFC1FG%G'
F1B810003FF3F9FEDC7FG&=">'
F04018047F801FEFCFBEC0FFH"8"H$
485F4FBEC8H%=":":%
58E01C7FE020FFFFFFE3H$>"9$8"9"
38C018F803F38002C3H$>":"9"8"
30E010E8B3037FH%="9$8&
480078FFF83E11E0007FFE7FC7H$?"8$9%
00C00080FB60101FFFF91FG%>(9%
FC09C003FC000037E4918801BFFE3FH"A'9%
0D540237A09180032FFE1FH$>(9%
060063FF03F9F8DB62600000003FH$?(:#
0000870030C80480044001FFJ#8"
?32CA02G"B(
F281060020620C80G%?';"
F181FF1FE00000C0807107G$B"8#
F081F6047304G%?(:"
FC3EFCFFF4001807020C000FG$@(:"
FF8007FC0000180210363FH#@*8"
F81FFE0080000060C100207FJ(
?80024048604501I"@-
3FFF80000302024900D80001FFJ+
?C000181C6C300000000FJ#
D7001H"B(8"
F9F80000020180003FJ"8(
?FE000000200001FFJ#9%
?FFC00200000FJ"
D00J"<"
@F81FJ#;"
@FFC0FF
J":"
AF807I"C#8#
1FFFF003FFI"D%
C7FFFFFFFFJ#
C5555H#E#
F603FFFFH$
F0007F
H$
F1E003H$
C7FFFFH"
8F
G#
FE3FG#
FC7F
G#
FFFF

ENDBITMAP
%%EndBinary
108 72 504 703 C
108 72 504 709 C
108 72 504 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "3" 27
%%Page: "2" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(KEL: C++/Python Integration) 108 750 T
(2) 497.57 750 T
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
2 14 Q
0.28 (Some experiences so far) 108 677.67 S
0.28 (.) 281.72 677.67 S
3 11 Q
0.02 (Since this paper was written \050March\051, we\325ve started applying its ideas. T) 108 659.67 P
0.02 (o date, embedded) 426.68 659.67 P
180.16 645.47 108 645.47 2 L
V
0.54 H
0 Z
N
-0.23 (character strings) 108 646.67 P
-0.23 ( of Python code seem to be the dominant integration structure, and Python) 180.16 646.67 P
179.06 632.47 108 632.47 2 L
V
N
1.1 (global variables) 108 633.67 P
1.1 ( are preferred for communicating data to/from Python code:) 179.06 633.67 P
(\245) 108 611.67 T
2.19 (Because we\325re a database environment, it\325) 118.8 611.67 P
2.19 (s convenient to attach code to persistent) 315.48 611.67 P
0.28 (database objects as strings, and allow them to be edited using our normal editing tools.) 118.8 598.67 P
1.25 (This provides a high-level of variability) 118.8 585.67 P
1.25 (, and makes issues of code loading/reloading) 299.42 585.67 P
5.29 (trivial. File references haven\325) 118.8 572.67 P
5.29 (t becomes as important \050so far\051, partly due to) 263.99 572.67 P
(administration complications when Python \336les must be managed.) 118.8 559.67 T
(\245) 108 540.67 T
1.57 (In general, inputs to embedded code are sent to Python by binding global \050module\051) 118.8 540.67 P
0.51 (variables, and outputs are fetched from global variables set by the embedded string. A) 118.8 527.67 P
(more direct scheme using function calls is supported, but hasn\325) 118.8 514.67 T
(t been utilized.) 396.01 514.67 T
3.11 (In retrospect, our use of embedded Python code is much simpler than anticipated.) 108 495.67 P
1.93 (However) 108 482.67 P
1.93 (, the present situation is based on KEL applications aimed at) 147.88 482.67 P
4 F
1.93 (end-users) 437.92 482.67 P
3 F
1.93 (, and) 480.69 482.67 P
0.84 (will change quickly) 108 469.67 P
0.84 (, if we apply KEL to more complex domains, such as general rapid-) 195.74 469.67 P
1.1 (development under our C++ framework.) 108 456.67 P
2 14 Q
0.28 (Disclaimer) 108 399.67 S
0.28 (.) 181.76 399.67 S
3 11 Q
2.88 (This paper was originally written for in-house distribution at KaPRE. All the code) 108 381.67 P
2.01 (examples are completely) 108 368.67 P
4 F
2.01 (hypothetical) 226.13 368.67 P
3 F
2.01 (, and do not represent the structure of KaPRE\325) 280.51 368.67 P
2.01 (s) 499.72 368.67 P
0.17 (\336nancial products. For instance, the \322post\323 system validation code names \336elds that don\325) 108 355.67 P
0.17 (t) 500.94 355.67 P
1.1 (even exist in our persistent object schema.) 108 342.67 P
1.1 (Further) 108 320.67 P
1.1 (, some of this paper) 139.94 320.67 P
1.1 (\325) 231.21 320.67 P
1.1 (s material has changed, since it was written in March:) 234.27 320.67 P
(\245) 108 298.67 T
(The embedded-call API is now a C++ \324module\325 \050all-static class\051.) 118.8 298.67 T
(\245) 108 279.67 T
0.71 (Tkinter is now part of the \324KEL) 118.8 279.67 P
0.71 (\325 system; this allows embedded code to put up simple) 261.99 279.67 P
(GUI objects, without exposing our C++ GUI framework.) 118.8 266.67 T
0.51 (This was actually the second of three KEL papers. The third dealt with Tkinter) 108 247.67 P
0.51 (. The \336rst) 460.5 247.67 P
0.1 (laid foundations for some of the ideas here; it included a code-generation proposal, which) 108 234.67 P
0.64 (wasn\325) 108 221.67 P
0.64 (t used. Unfortunately) 134.07 221.67 P
0.64 (, it\325) 227.81 221.67 P
0.64 (s 32 pages long, too big to include here. I\325ve appended an) 243.12 221.67 P
-0.3 (example \050again, hypothetical\051 from our account-generation-rule system, which is currently) 108 208.67 P
1.1 (based on embedded Python code strings.) 108 195.67 P
0.51 (Other material \050especially source-code for the wrapper class\051 would be helpful, but can\325) 108 173.67 P
0.51 (t) 500.94 173.67 P
1.16 (be released here. \050Hey) 108 160.67 P
1.16 (, we have to earn a living :-\051. Hopefully) 209.12 160.67 P
1.16 (, nothing in this paper is) 391.84 160.67 P
1.1 (too KaPRE-speci\336c to be understandable.) 108 147.67 P
2 14 Q
0.28 (On with the show...) 108 90.67 S
FMENDPAGE
%%EndPage: "2" 28
%%Page: "1" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Copyright K) 108 41.95 T
0 8 Q
(A) 159.09 41.95 T
0 9 Q
(PRE Softwar) 165.01 41.95 T
(e, Inc.) 215.67 41.95 T
(5/16/95) 475.52 41.95 T
2 20 Q
1 (KEL: C++/Python Integration) 158.7 706.67 S
2 12 Q
0.24 (Mark Lutz) 277.68 668 S
0 F
0.24 (Copyright 1995 - K) 194.41 652 S
0 8 Q
0.16 (A) 304.08 652 S
0 12 Q
0.24 (PRE Softwar) 310.16 652 S
0.24 (e, Inc.) 380.34 652 S
479.81 570.64 132.19 570.64 2 L
V
1.68 H
0 Z
N
10 16 Q
(Preface for the Python workshop distribution.) 132.19 572.33 T
2 14 Q
0.28 (Intr) 108 503.67 S
0.28 (oduction.) 129.87 503.67 S
3 11 Q
0.41 (The following paper chronicles some experiences I\325ve had using Python as an) 108 485.67 P
504 484.47 458.79 484.47 2 L
V
0.54 H
N
0.41 (embedded) 458.79 485.67 P
147.71 471.47 108 471.47 2 L
V
N
1.75 (language) 108 472.67 P
1.75 (, in C++ applications. At KaPRE, we\325re using Python as a general extension) 147.71 472.67 P
1.21 (tool, for on-site customization and con\336guration of C++ libraries, and as an alternative) 108 459.67 P
0.48 (to) 108 446.67 P
4 F
0.48 (home-gr) 119.79 446.67 P
0.48 (own) 156.65 446.67 P
3 F
0.48 ( parsers and interpreters. Other uses \050rapid-prototyping\051 are also foreseen.) 174.98 446.67 P
-0.36 (By integrating Python, we can accommodate on-site variations in our applications, without) 108 433.67 P
1.1 (shipping C++ source code. Python\325) 108 420.67 P
1.1 (s simplicity makes it ideal for end-user coding.) 267.5 420.67 P
0.22 (\322) 108 398.67 P
4 F
0.22 (KEL) 112.88 398.67 P
3 F
0.22 (\323 is just a \324glue\325 layer) 133.06 398.67 P
0.22 (, used to integrate our C++ framework with embedded Python) 228.72 398.67 P
1.1 (code. It currently consists of 2 components:) 108 385.67 P
(\245) 108 363.67 T
(An embedded-call API \050simpli\336ed access to Python run-time tools\051) 118.8 363.67 T
(\245) 108 350.67 T
(A C++ extension module and Python stub-class, for using passed-in C++ objects.) 118.8 350.67 T
1.55 (One notable feature of our C++ framework is the ability to access C++ class instance) 108 331.67 P
1.67 (members and methods by name \050called \324) 108 318.67 P
4 F
1.67 (generic-access) 296.46 318.67 P
3 F
1.67 (\325\051. This makes for a somewhat) 361.82 318.67 P
1.94 (unique integration strategy: complex C++ objects are passed in and out of Python as) 108 305.67 P
1.1 (generic pointers, wrapped in an instance of a single Python stub-class.) 108 292.67 P
0.95 (By overloading Python operators and quali\336cation \050__getattr__\051 in the stub class, we\325re) 108 270.67 P
0.88 (able to catch C++ object manipulations in embedded Python code, and route them back) 108 257.67 P
0.58 (to a C++ extension module. W) 108 244.67 P
0.58 (e don\325) 245.26 244.67 P
0.58 (t need to generate code for each exposed C++ class) 273.45 244.67 P
1.21 (\050but that scheme has some advantages; for instance, KEL supports C++ data members,) 108 231.67 P
1.1 (but) 108 218.67 P
4 F
1.1 ( methods) 122.06 218.67 P
3 F
1.1 ( must be registered\051.) 162.57 218.67 P
1.1 (Roughly) 108 196.67 P
1.1 (, there\325) 145.18 196.67 P
1.1 (s at least 4 ways to structure embedded Python programs:) 176.83 196.67 P
6 F
(\245) 108 174.67 T
(As character strings) 118.8 174.67 T
(\245) 108 161.67 T
(As \336le references \050module/function names\051) 118.8 161.67 T
(\245) 108 148.67 T
(As registered Python callable-objects) 118.8 148.67 T
(\245) 108 135.67 T
(As UNIX scripts) 118.8 135.67 T
3 F
1.02 (KEL supports the \336rst two of these \050strings and \336le references\051, since C++ is \322) 108 118.67 P
4 F
1.02 (on-top) 467.34 118.67 P
3 F
1.02 (\323:) 496.06 118.67 P
1.92 (no Python code gets executed until an embedded action is \336red. Because of this, it\325) 108 105.67 P
1.92 (s) 499.72 105.67 P
1.92 (inconvenient to register arbitrary Python objects. Of course, executed strings can still) 108 92.67 P
1.1 (run scripts, register and call objects, import site-speci\336c modules, etc., as needed.) 108 79.67 P
FMENDPAGE
%%EndPage: "1" 29
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Descend
%%Pages: 29
%%DocumentFonts: AvantGarde-Book
%%+ Helvetica-Bold
%%+ AvantGarde-Demi
%%+ Times-Roman
%%+ Times-Italic
%%+ Times-Bold
%%+ Helvetica
%%+ Helvetica-Oblique
%%+ Times-BoldItalic
%%+ AvantGarde-DemiOblique
%%+ Helvetica-BoldOblique
%%EOF
