<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./spcpaper-Dateien/filelist.xml">
<link rel=Edit-Time-Data href="./spcpaper-Dateien/editdata.mso">
<link rel=OLE-Object-Data href="./spcpaper-Dateien/oledata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Continuations And Stackless Python</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Christian Tismer</o:Author>
  <o:LastAuthor>Christian Tismer</o:LastAuthor>
  <o:Revision>16</o:Revision>
  <o:LastPrinted>1999-12-21T18:50:00Z</o:LastPrinted>
  <o:Created>1999-12-21T18:55:00Z</o:Created>
  <o:LastSaved>1999-12-21T21:22:00Z</o:LastSaved>
  <o:Pages>19</o:Pages>
  <o:Words>6664</o:Words>
  <o:Characters>37989</o:Characters>
  <o:Company>Professional Net Service GmbH</o:Company>
  <o:Lines>316</o:Lines>
  <o:Paragraphs>75</o:Paragraphs>
  <o:CharactersWithSpaces>46653</o:CharactersWithSpaces>
  <o:Version>9.2812</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:ActiveWritingStyle Lang="EN-US" VendorID="64" DLLVersion="131077"
   NLCheck="1">1</w:ActiveWritingStyle>
  <w:HyphenationZone>21</w:HyphenationZone>
  <w:ClickAndTypeStyle Number="66">Textkörper</w:ClickAndTypeStyle>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:16792199 0 0 0 65791 0;}
@font-face
	{font-family:StarBats;
	mso-font-alt:Symbol;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
h2
	{mso-style-next:Standard;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:none;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	mso-ansi-language:EN-US;
	font-style:italic;}
h3
	{mso-style-next:Standard;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:none;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:13.0pt;
	font-family:Arial;
	mso-ansi-language:EN-US;}
h6
	{mso-style-next:Standard;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:57.6pt;
	text-align:justify;
	text-indent:-57.6pt;
	mso-pagination:none;
	mso-outline-level:6;
	mso-list:l3 level6 lfo2;
	tab-stops:list 57.6pt;
	font-size:11.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Standard;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:64.8pt;
	text-align:justify;
	text-indent:-64.8pt;
	mso-pagination:none;
	mso-outline-level:7;
	mso-list:l3 level7 lfo2;
	tab-stops:list 64.8pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Standard;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:72.0pt;
	text-align:justify;
	text-indent:-72.0pt;
	mso-pagination:none;
	mso-outline-level:8;
	mso-list:l3 level8 lfo2;
	tab-stops:list 72.0pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	font-style:italic;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{mso-style-next:Standard;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:79.2pt;
	text-align:justify;
	text-indent:-79.2pt;
	mso-pagination:none;
	mso-outline-level:9;
	mso-list:l3 level9 lfo2;
	tab-stops:list 79.2pt;
	font-size:11.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{mso-style-update:auto;
	mso-style-next:Standard;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-update:auto;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-update:auto;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	mso-pagination:none;
	tab-stops:60.0pt right dotted 467.6pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-update:auto;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{mso-style-update:auto;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{mso-style-update:auto;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{mso-style-update:auto;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:72.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{mso-style-update:auto;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{mso-style-update:auto;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:96.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{mso-style-next:Standard;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	font-weight:bold;}
p.MsoTof, li.MsoTof, div.MsoTof
	{mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	text-indent:-24.0pt;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
span.MsoFootnoteReference
	{vertical-align:super;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	background:navy;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Tahoma;
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.DefinitionList, li.DefinitionList, div.DefinitionList
	{mso-style-name:"Definition List";
	mso-style-next:"Definition Term";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:14.2pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-14.2pt;
	mso-pagination:none;
	mso-list:l1 level1 lfo4;
	tab-stops:list 14.2pt 36.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.DefinitionTerm, li.DefinitionTerm, div.DefinitionTerm
	{mso-style-name:"Definition Term";
	mso-style-next:"Definition List";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.H1, li.H1, div.H1
	{mso-style-name:H1;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:21.6pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-21.6pt;
	mso-pagination:none;
	page-break-after:avoid;
	mso-outline-level:1;
	mso-list:l0 level1 lfo6;
	tab-stops:list 21.6pt;
	font-size:24.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.H2, li.H2, div.H2
	{mso-style-name:H2;
	mso-style-next:Standard;
	margin-top:18.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:21.75pt;
	margin-bottom:.0001pt;
	text-align:center;
	text-indent:-21.75pt;
	mso-pagination:widow-orphan lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	mso-list:l3 level1 lfo2;
	tab-stops:list 21.6pt;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.H3, li.H3, div.H3
	{mso-style-name:H3;
	mso-style-next:Standard;
	margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:29.25pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-29.25pt;
	mso-pagination:none;
	page-break-after:avoid;
	mso-outline-level:3;
	mso-list:l3 level2 lfo2;
	tab-stops:list 28.8pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.H4, li.H4, div.H4
	{mso-style-name:H4;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-36.0pt;
	mso-pagination:none;
	page-break-after:avoid;
	mso-outline-level:4;
	mso-list:l3 level3 lfo2;
	tab-stops:list 36.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.H5, li.H5, div.H5
	{mso-style-name:H5;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:43.2pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-43.2pt;
	mso-pagination:none;
	page-break-after:avoid;
	mso-outline-level:5;
	mso-list:l3 level4 lfo2;
	tab-stops:list 54.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.H6, li.H6, div.H6
	{mso-style-name:H6;
	mso-style-next:Standard;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:50.4pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-50.4pt;
	mso-pagination:none;
	page-break-after:avoid;
	mso-outline-level:6;
	mso-list:l3 level5 lfo2;
	tab-stops:list 72.0pt;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Address, li.Address, div.Address
	{mso-style-name:Address;
	mso-style-next:Standard;
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.Blockquote, li.Blockquote, div.Blockquote
	{mso-style-name:Blockquote;
	margin-top:0cm;
	margin-right:18.0pt;
	margin-bottom:0cm;
	margin-left:18.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:.05pt;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.Preformatted, li.Preformatted, div.Preformatted
	{mso-style-name:Preformatted;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:13.5pt;
	margin-bottom:.0001pt;
	text-indent:-13.5pt;
	mso-pagination:none;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.z-BottomofForm, li.z-BottomofForm, div.z-BottomofForm
	{mso-style-name:"z-Bottom of Form";
	mso-style-parent:"";
	mso-style-next:Standard;
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:none;
	mso-hyphenate:none;
	border:none;
	mso-border-top-alt:double black 2.25pt;
	padding:0cm;
	mso-padding-alt:0cm 0cm 0cm 0cm;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.z-TopofForm, li.z-TopofForm, div.z-TopofForm
	{mso-style-name:"z-Top of Form";
	mso-style-parent:"";
	mso-style-next:Standard;
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:none;
	mso-hyphenate:none;
	border:none;
	mso-border-bottom-alt:double black 2.25pt;
	padding:0cm;
	mso-padding-alt:0cm 0cm 0cm 0cm;
	font-size:8.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.TabellenInhalt, li.TabellenInhalt, div.TabellenInhalt
	{mso-style-name:"Tabellen Inhalt";
	mso-style-parent:Textkörper;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.Tabellenberschrift, li.Tabellenberschrift, div.Tabellenberschrift
	{mso-style-name:"Tabellen Überschrift";
	mso-style-parent:"Tabellen Inhalt";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;
	font-weight:bold;
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.re, li.re, div.re
	{mso-style-name:re;
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.Referenz, li.Referenz, div.Referenz
	{mso-style-name:Referenz;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-indent:-18.0pt;
	mso-pagination:widow-orphan lines-together;
	mso-list:l2 level1 lfo8;
	tab-stops:list 36.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.te, li.te, div.te
	{mso-style-name:te;
	mso-style-parent:Referenz;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:18.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan lines-together;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.gr, li.gr, div.gr
	{mso-style-name:gr;
	mso-style-parent:Preformatted;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:13.5pt;
	margin-bottom:.0001pt;
	text-indent:-13.5pt;
	mso-pagination:none;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.DefinitionNumbered, li.DefinitionNumbered, div.DefinitionNumbered
	{mso-style-name:"Definition Numbered";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:18.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-18.0pt;
	mso-pagination:none;
	mso-list:l4 level1 lfo10;
	tab-stops:list 18.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.co, li.co, div.co
	{mso-style-name:co;
	mso-style-parent:Textkörper;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.ci, li.ci, div.ci
	{mso-style-name:ci;
	mso-style-parent:Textkörper;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
span.WW-Absatz-Standardschriftart
	{mso-style-name:WW-Absatz-Standardschriftart;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;}
span.Definition
	{mso-style-name:Definition;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;}
span.WW-Definition
	{mso-style-name:WW-Definition;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	font-style:italic;}
span.CITE
	{mso-style-name:CITE;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	font-weight:bold;
	mso-bidi-font-style:italic;}
span.CODE
	{mso-style-name:CODE;
	mso-style-parent:"";
	mso-ansi-font-size:10.0pt;
	mso-ascii-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";
	mso-ansi-language:EN-US;}
span.WW-Emphasis
	{mso-style-name:WW-Emphasis;
	mso-style-parent:WW-Absatz-Standardschriftart;
	mso-ansi-font-size:12.0pt;
	font-style:italic;}
span.WW-Hyperlink
	{mso-style-name:WW-Hyperlink;
	mso-style-parent:WW-Absatz-Standardschriftart;
	mso-ansi-font-size:10.0pt;
	mso-ascii-font-family:"Times New Roman";
	mso-hansi-font-family:"Times New Roman";
	color:blue;
	text-decoration:underline;
	text-underline:single;}
span.WW-GesichteterHyperlink
	{mso-style-name:WW-GesichteterHyperlink;
	mso-style-parent:WW-Absatz-Standardschriftart;
	mso-ansi-font-size:12.0pt;
	color:purple;
	text-decoration:underline;
	text-underline:single;}
span.Keyboard
	{mso-style-name:Keyboard;
	mso-style-parent:"";
	mso-ansi-font-size:10.0pt;
	mso-ascii-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";
	font-weight:bold;}
span.Sample
	{mso-style-name:Sample;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	mso-ascii-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";}
span.Max
	{mso-style-name:"Max\.";
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	font-weight:bold;}
span.Typewriter
	{mso-style-name:Typewriter;
	mso-style-parent:"";
	mso-ansi-font-size:10.0pt;
	mso-ascii-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";}
span.Variabel
	{mso-style-name:Variabel;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	font-style:italic;}
span.HTMLMarkup
	{mso-style-name:"HTML Markup";
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	color:red;}
span.Kommentar
	{mso-style-name:Kommentar;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;}
span.InternetLink
	{mso-style-name:"Internet Link";
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	color:navy;
	text-decoration:underline;
	text-underline:single;}
span.Numerierungszeichen
	{mso-style-name:Numerierungszeichen;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;}
span.Aufzhlungszeichen1
	{mso-style-name:Aufzählungszeichen1;
	mso-style-parent:"";
	mso-ansi-font-size:9.0pt;
	mso-ascii-font-family:StarBats;
	mso-hansi-font-family:StarBats;}
span.green
	{mso-style-name:green;
	mso-style-parent:"";
	color:green;}
@page Section1
	{size:612.1pt 792.1pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;
	mso-header-margin:35.45pt;
	mso-footer-margin:35.45pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:29577670;
	mso-list-template-ids:-1350770834;}
@list l0:level1
	{mso-level-style-link:H1;
	mso-level-legal-format:yes;
	mso-level-text:%1;
	mso-level-tab-stop:21.6pt;
	mso-level-number-position:left;
	margin-left:21.6pt;
	text-indent:-21.6pt;}
@list l0:level2
	{mso-level-legal-format:yes;
	mso-level-text:"%1\.%2";
	mso-level-tab-stop:28.8pt;
	mso-level-number-position:left;
	margin-left:28.8pt;
	text-indent:-28.8pt;}
@list l0:level3
	{mso-level-legal-format:yes;
	mso-level-text:"%1\.%2\.%3";
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	margin-left:36.0pt;
	text-indent:-36.0pt;}
@list l0:level4
	{mso-level-legal-format:yes;
	mso-level-text:"%1\.%2\.%3\.%4";
	mso-level-tab-stop:54.0pt;
	mso-level-number-position:left;
	margin-left:43.2pt;
	text-indent:-43.2pt;}
@list l0:level5
	{mso-level-text:"%1\.%2\.%3\.%4\.%5";
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	margin-left:50.4pt;
	text-indent:-50.4pt;}
@list l0:level6
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6";
	mso-level-tab-stop:57.6pt;
	mso-level-number-position:left;
	margin-left:57.6pt;
	text-indent:-57.6pt;}
@list l0:level7
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7";
	mso-level-tab-stop:64.8pt;
	mso-level-number-position:left;
	margin-left:64.8pt;
	text-indent:-64.8pt;}
@list l0:level8
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8";
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	margin-left:72.0pt;
	text-indent:-72.0pt;}
@list l0:level9
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8\.%9";
	mso-level-tab-stop:79.2pt;
	mso-level-number-position:left;
	margin-left:79.2pt;
	text-indent:-79.2pt;}
@list l1
	{mso-list-id:310329249;
	mso-list-type:simple;
	mso-list-template-ids:-1139088876;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-style-link:"Definition List";
	mso-level-text:\F0B7;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l2
	{mso-list-id:999620610;
	mso-list-type:hybrid;
	mso-list-template-ids:-971965292 1138154366 67567641 67567643 67567631 67567641 67567643 67567631 67567641 67567643;}
@list l2:level1
	{mso-level-style-link:Referenz;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3
	{mso-list-id:1491481776;
	mso-list-template-ids:2094680858;}
@list l3:level1
	{mso-level-style-link:H2;
	mso-level-legal-format:yes;
	mso-level-text:%1;
	mso-level-tab-stop:21.6pt;
	mso-level-number-position:left;
	margin-left:21.6pt;
	text-indent:-21.6pt;}
@list l3:level2
	{mso-level-style-link:H3;
	mso-level-legal-format:yes;
	mso-level-text:"%1\.%2";
	mso-level-tab-stop:28.8pt;
	mso-level-number-position:left;
	margin-left:28.8pt;
	text-indent:-28.8pt;}
@list l3:level3
	{mso-level-style-link:H4;
	mso-level-legal-format:yes;
	mso-level-text:"%1\.%2\.%3";
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	margin-left:36.0pt;
	text-indent:-36.0pt;}
@list l3:level4
	{mso-level-style-link:H5;
	mso-level-legal-format:yes;
	mso-level-text:"%1\.%2\.%3\.%4";
	mso-level-tab-stop:54.0pt;
	mso-level-number-position:left;
	margin-left:43.2pt;
	text-indent:-43.2pt;}
@list l3:level5
	{mso-level-style-link:H6;
	mso-level-text:"%1\.%2\.%3\.%4\.%5";
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	margin-left:50.4pt;
	text-indent:-50.4pt;}
@list l3:level6
	{mso-level-style-link:"Überschrift 6";
	mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6";
	mso-level-tab-stop:57.6pt;
	mso-level-number-position:left;
	margin-left:57.6pt;
	text-indent:-57.6pt;}
@list l3:level7
	{mso-level-style-link:"Überschrift 7";
	mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7";
	mso-level-tab-stop:64.8pt;
	mso-level-number-position:left;
	margin-left:64.8pt;
	text-indent:-64.8pt;}
@list l3:level8
	{mso-level-style-link:"Überschrift 8";
	mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8";
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	margin-left:72.0pt;
	text-indent:-72.0pt;}
@list l3:level9
	{mso-level-style-link:"Überschrift 9";
	mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8\.%9";
	mso-level-tab-stop:79.2pt;
	mso-level-number-position:left;
	margin-left:79.2pt;
	text-indent:-79.2pt;}
@list l4
	{mso-list-id:2049453205;
	mso-list-type:simple;
	mso-list-template-ids:-1588139602;}
@list l4:level1
	{mso-level-style-link:"Definition Numbered";
	mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1074">
  <o:colormenu v:ext="edit" fillcolor="none"/>
 </o:shapedefaults></xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=DE link=blue vlink=purple style='tab-interval:32.25pt'>

<div class=Section1>

<p class=H1 align=center style='margin-left:0cm;text-align:center;text-indent:
0cm;mso-list:none;tab-stops:32.25pt'><a name="_Toc470443639"></a><a
name="_Toc470444049"><span style='mso-bookmark:_Toc470443639'><span lang=EN-US
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Continuations and Stackless
Python</span></span></a><span lang=EN-US style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'><o:p></o:p></span></p>

<p class=H3 align=center style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
0cm;margin-left:0cm;margin-bottom:.0001pt;text-align:center;text-indent:0cm;
mso-list:none;tab-stops:32.25pt'><a name="_Toc470443640"></a><a
name="_Toc470444050"><span style='mso-bookmark:_Toc470443640'><span lang=EN-US>Or
&quot;How to change a Paradigm of an existing Program&quot;</span></span></a></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>Christian
Tismer</span></p>

<p class=MsoNormal align=center style='text-align:center'><i><span lang=EN-US>Virtual
Photonics GmbH<o:p></o:p></span></i></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><a
href="mailto:tismer@tismer.com">mailto:tismer@tismer.com</a></span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<div align=center>

<table border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;
 border:none;mso-border-alt:solid windowtext .5pt;mso-padding-alt:0cm 3.5pt 0cm 3.5pt'>
 <tr>
  <td width=317 valign=top style='width:237.55pt;border:solid windowtext .5pt;
  padding:0cm 3.5pt 0cm 3.5pt'>
  <p class=H2 style='margin-left:0cm;text-indent:0cm;mso-list:none;tab-stops:
  32.25pt'><a name="_Toc470443641"></a><a name="_Toc470444051"><span
  style='mso-bookmark:_Toc470443641'><span lang=EN-US>Table of Contents</span></span></a></p>
  <p class=MsoNormal align=center style='text-align:center'><![if !supportEmptyParas]>&nbsp;<![endif]><span
  lang=EN-US><o:p></o:p></span></p>
  </td>
  <td width=317 valign=top style='width:237.55pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0cm 3.5pt 0cm 3.5pt'>
  <p class=H2 style='margin-left:0cm;text-indent:0cm;mso-list:none;tab-stops:
  32.25pt'><a name="_Toc470444052"><span lang=EN-US>Figures</span></a></p>
  <p class=MsoNormal align=center style='text-align:center'><![if !supportEmptyParas]>&nbsp;<![endif]><span
  lang=EN-US><o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=317 valign=top style='width:237.55pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0cm 3.5pt 0cm 3.5pt'>
  <p class=MsoToc2 style='tab-stops:right dotted 467.6pt'><!--[if supportFields]><span
  lang=EN-US><span style='mso-element:field-begin'></span><span
  style="mso-spacerun: yes"> </span>TOC \o &quot;1-3&quot; \n \h \z <span
  style='mso-element:field-separator'></span></span><![endif]--><span
  lang=EN-US><span class=MsoHyperlink><a href="#_Toc470444053"><span
  style='mso-bidi-font-size:14.0pt'>Abstract</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:36.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444054"><span
  style='mso-bidi-font-size:14.0pt'>1</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>      </span></span><span
  style='mso-bidi-font-size:14.0pt'>Introduction</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:36.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444055"><span
  style='mso-bidi-font-size:14.0pt'>2</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>      </span></span><span
  style='mso-bidi-font-size:14.0pt'>Continuations</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444056">2.1<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>What is a
  Continuation?</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:36.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444057"><span
  style='mso-bidi-font-size:14.0pt'>3</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>      </span></span><span
  style='mso-bidi-font-size:14.0pt'>Generators in Python</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444058">3.1<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>Generators expressed
  with Threads</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444059">3.2<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>Generators done with
  Continuations</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:36.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444060"><span
  style='mso-bidi-font-size:14.0pt'>4</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>      </span></span><span
  style='mso-bidi-font-size:14.0pt'>Continuation Module</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444061">4.1<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>The Problem</a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444062">4.2<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>How it Works</a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444063">4.3<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>How fast? Is it
  fast? Size?</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:36.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444064"><span
  style='mso-bidi-font-size:14.0pt'>5</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>      </span></span><span
  style='mso-bidi-font-size:14.0pt'>Stackless Python</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444065">5.1<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>What does it mean to
  be stackless?</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444066">5.2<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>Why the C stack
  should vanish</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444067">5.3<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>Targets Evolution
  and History</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:36.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444068"><span
  style='mso-bidi-font-size:14.0pt'>6</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>      </span></span><span
  style='mso-bidi-font-size:14.0pt'>The Paradigm Shift</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444069">6.1<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>Time of Frame
  Execution</a></span></span><span style='mso-bidi-font-size:12.0pt;mso-ansi-language:
  DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444070">6.2<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>Lifetime of
  Parameters</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444071">6.3<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>Third System State</a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:36.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444072"><span
  style='mso-bidi-font-size:14.0pt'>7</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>      </span></span><span
  style='mso-bidi-font-size:14.0pt'>Implementing Stackless Python</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444073">7.1<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>Problem analysis</a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444074">7.2<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>Problem solution</a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444075">7.3<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>The Frame Dispatcher</a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc3><span class=MsoHyperlink><span lang=EN-US><a
  href="#_Toc470444076">7.4<span lang=DE style='mso-bidi-font-size:12.0pt;
  color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>       </span></span>Extended Frame
  Compatibility</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:36.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444077"><span
  style='mso-bidi-font-size:14.0pt'>8</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>      </span></span><span
  style='mso-bidi-font-size:14.0pt'>The New C API</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:36.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444078"><span
  style='mso-bidi-font-size:14.0pt'>9</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>      </span></span><span
  style='mso-bidi-font-size:14.0pt'>Alternatives to &quot;The Token&quot;</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:48.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444079"><span
  style='mso-bidi-font-size:14.0pt'>10</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>        </span></span><span
  style='mso-bidi-font-size:14.0pt'>Future directions</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:48.0pt right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444080"><span
  style='mso-bidi-font-size:14.0pt'>11</span><span lang=DE style='mso-bidi-font-size:
  12.0pt;color:windowtext;mso-ansi-language:DE;text-decoration:none;text-underline:
  none'><span style='mso-tab-count:1'>        </span></span><span
  style='mso-bidi-font-size:14.0pt'>Acknowledgements</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444081"><span
  style='mso-bidi-font-size:14.0pt'>References</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoToc2 style='tab-stops:right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444082"><span
  style='mso-bidi-font-size:14.0pt'>Appendix: Code Examples</span></a></span></span><span
  style='mso-bidi-font-size:12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoNormal><!--[if supportFields]><span lang=EN-US><span
  style='mso-element:field-end'></span></span><![endif]--></p>
  </td>
  <td width=317 valign=top style='width:237.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0cm 3.5pt 0cm 3.5pt'>
  <p class=MsoTof style='tab-stops:right dotted 467.6pt'><!--[if supportFields]><span
  lang=EN-US><span style='mso-element:field-begin'></span><span
  style="mso-spacerun: yes"> </span>TOC \n \h \z \c &quot;Figure&quot; <span
  style='mso-element:field-separator'></span></span><![endif]--><span
  lang=EN-US><span class=MsoHyperlink><a href="#_Toc470444083">Figure 1:
  Multiple Return</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoTof style='tab-stops:right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444084">Figure 2: Frame
  Mutation</a></span></span><span style='mso-bidi-font-size:12.0pt;mso-ansi-language:
  DE'><o:p></o:p></span></p>
  <p class=MsoTof style='tab-stops:right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444085">Figure 3: Nodes
  Collect References</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoTof style='tab-stops:right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444086">Figure 4:
  Continuation Browser View</a></span></span><span style='mso-bidi-font-size:
  12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoTof style='tab-stops:right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444087">Figure 5: Standard
  Nested Call</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoTof style='tab-stops:right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444088">Figure 6:
  Minimizing Recursive Calls</a></span></span><span style='mso-bidi-font-size:
  12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoTof style='tab-stops:right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444089">Figure 7:
  PyEval_CallObjectWithKeywords</a></span></span><span style='mso-bidi-font-size:
  12.0pt;mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoTof style='tab-stops:right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444090">Figure 8:
  CALL_FUNCTION</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoTof style='tab-stops:right dotted 467.6pt'><span
  class=MsoHyperlink><span lang=EN-US><a href="#_Toc470444091">Figure 9:
  Stacklesssss Python</a></span></span><span style='mso-bidi-font-size:12.0pt;
  mso-ansi-language:DE'><o:p></o:p></span></p>
  <p class=MsoNormal><!--[if supportFields]><span lang=EN-US><span
  style='mso-element:field-end'></span></span><![endif]--></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal><span lang=EN-US><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=H2 style='margin-left:0cm;text-indent:0cm;mso-list:none;tab-stops:
32.25pt'><a name="_Toc470444053"><span lang=EN-US>Abstract</span></a></p>

<p class=MsoBodyText><span lang=EN-US>In this paper, an implementation of
&quot;Stackless Python&quot; (a Python which does not keep state on the C
stack) is presented. Surprisingly, the necessary changes affect just a small
number of C modules, and a major rewrite of the C library can be avoided. The
key idea in this approach is a paradigm change for the Python code interpreter
that is not easy to understand in the first place. Recursive interpreter calls
are turned into tail recursion, which allows deferring evaluation by pushing
frames to the frame stack, without the C stack involved.</span></p>

<p class=MsoBodyText><span lang=EN-US>By decoupling the frame stack from the C
stack, we now have the ability to keep references to frames and to do non-local
jumps. This turns the frame stack into a tree, and every leaf of the tree can
now be a jump target. While exploring this idea, we will recognize ordinary
function calls and returns to be just special cases of so-called continuations,
and we will learn about them as a really simple idea that covers all kinds of
program flow.</span></p>

<p class=MsoBodyText><span lang=EN-US>Instead of an implementation of
coroutines and generators as C extensions, we will see how they can be
expressed in Python, using the continuation module. Since the theory of
continuations is not very broadly known, a small introduction is given.</span></p>

<p class=H2><a name="_Toc470444054"><![if !supportLists]><span lang=EN-US>1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Introduction</span></a></p>

<p class=MsoBodyText><span lang=EN-US>There have been a few attempts to
implement generators and coroutines in Python. These were either of low
performance, since they were implemented using threads, or limited by Python's
recursive interpreter layout, which prevented switching between frames
liberally. Changing Python to become non-recursive was considered a major,
difficult task. Actually it was true, and I had to change truth before I could
continue. </span><span lang=EN-US style='font-family:Wingdings;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman";mso-char-type:symbol;
mso-symbol-font-family:Wingdings'><span style='mso-char-type:symbol;mso-symbol-font-family:
Wingdings'>J</span></span></p>

<p class=H2><a name="_Toc470444055"><![if !supportLists]><span lang=EN-US>2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Continuations</span></a></p>

<p class=H3><a name="_Toc470444056"><![if !supportLists]><span lang=EN-US>2.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>What is a Continuation?</span></a></p>

<p class=MsoBodyText><span lang=EN-US>Many attempts to explain continuations
can be found in the literature[<span style='mso-field-code:"REF _Ref469481502 \\r \\h"'>5<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400360039003400380031003500300032000000</w:data>
</xml><![endif]--></span>-<span style='mso-field-code:"REF _Ref470096246 \\r \\h"'>10<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400370030003000390036003200340036000000</w:data>
</xml><![endif]--></span>], more or less hard to understand. The following is
due to Jeremy Hylton, and I like it the best. Imagine a very simple series of
statements:</span></p>

<p class=MsoBodyText><span class=CODE><span lang=FR style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman";mso-ansi-language:
FR'>x = 2; y = x + 1; z = x * 2<o:p></o:p></span></span></p>

<p class=MsoBodyText><span lang=EN-US>In this case, the continuation of </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>x=2</span></span><span lang=EN-US> is </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>y=x+1; z=x*2</span></span><span
lang=EN-US>. You might think of the second and third assignments as a function
(forgetting about variable scope for the moment). That function is the
continuation. In essence, every single line of code has a continuation that
represents the entire future execution of the program.</span></p>

<p class=MsoBodyText><span lang=EN-US>Perhaps you remember the phrase &quot;<i>Goto
is considered harmful</i>&quot;. Functional programming's answer turns bad into
good and makes that goto into a key idea: A continuation is a means of
capturing the control flow of the program and manipulating it; it is a primitive
idea that can be used to synthesize any form of control flow.</span></p>

<p class=MsoBodyText><span lang=EN-US>Although we do not intend to re-invent
the existing control structures, a simple example might help. </span></p>

<table border=1 cellspacing=0 cellpadding=0 width=298 style='width:223.8pt;
 border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:4.5pt 3.5pt 4.5pt 3.5pt'>
 <tr>
  <td width=298 valign=top style='width:223.8pt;border:solid windowtext .5pt;
  padding:4.5pt 3.5pt 4.5pt 3.5pt'>
  <p class=Preformatted><span lang=EN-US>def looptest(n):</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>this = continuation.current()</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>k = this.update(n)</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">     
  </span># continuation at &quot;=&quot;</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>if k:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun:
  yes">        </span>this(k-1)</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun:
  yes">        </span># resuming at &quot;=&quot;</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>else:</span></p>
  <p class=Preformatted style='page-break-after:avoid'><span lang=EN-US><span
  style="mso-spacerun: yes">        </span>del this.link</span></p>
  </td>
 </tr>
</table>

<p class=MsoBodyText><span lang=EN-US>Without going into details, our
continuation </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>this</span></span><span
lang=EN-US> is prepared to jump into exactly the situation where the boxed
assignment takes place. The call </span><span class=CODE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>this(k-1)</span></span><span
lang=EN-US> moves us immediately back into the context of that assignment, just
with a new value for </span><span class=CODE><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>k</span></span><span
lang=EN-US>. This results in repeated execution of this piece of code, forming
a while loop.</span></p>

<p class=MsoBodyText><span lang=EN-US>In comparison to our first example, we
did not use a continuation at the bounds of a statement, but it was located in
the middle of a function call, in the situation of parameter passing. This kind
of continuation is most useful since we can provide a parameter and get a
result back. We will see more about this in the next chapter. In fact,
continuations are not limited to statements or function calls. Every opcode of
the (virtual) machine has a continuation.</span></p>

<p class=MsoBodyText><span lang=EN-US>&quot;The current continuation at any
point in the execution of a program is an abstraction of the <i>rest of the
program&quot; </i>[<span style='mso-field-code:"REF _Ref469481502 \\r \\h"'>5<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400360039003400380031003500300032000000</w:data>
</xml><![endif]--></span>]. Another wording is &quot;what to do next &quot;[<span
style='mso-field-code:"REF _Ref469481504 \\r \\h"'>6<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400360039003400380031003500300034000000</w:data>
</xml><![endif]--></span>]</span></p>

<p class=MsoBodyText><span lang=EN-US>But in terms of Python frames, a
continuation is nothing more than a frame object, together with its linked
chain of calling frames. In order to make this callable, handy, and to protect
frames from being run more than once at a time, we wrap them into continuation
objects, which take care about that. Before discussing the details in chapter <span
style='mso-field-code:"REF _Ref470114918 \\r \\h"'>4<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400370030003100310034003900310038000000</w:data>
</xml><![endif]--></span>, let's now build a really useful example.</span></p>

<p class=H2><a name="_Ref470115957"></a><a name="_Toc470444057"><span
style='mso-bookmark:_Ref470115957'><![if !supportLists]><span lang=EN-US>3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Generators in Python</span></span></a></p>

<p class=MsoBodyText><span lang=EN-US>Instead of a direct implementation of
coroutines and generators, I decided to use the most general approach:
Implement continuations as first class callable objects, and express generators
and coroutines in Python.</span></p>

<p class=H3><a name="_Toc470444058"><![if !supportLists]><span lang=EN-US>3.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Generators expressed with Threads</span></a></p>

<p class=MsoBodyText><span lang=EN-US>Few people might know that there is a
generator implementation using threads. It can be found in the source
distribution under demo/threads/Generator.py and has not been changed since
1994, when there was a longer discussion of generators on C.L.P [<span
style='mso-field-code:"REF _Ref469381970 \\r \\h"'>2<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400360039003300380031003900370030000000</w:data>
</xml><![endif]--></span>]. A slightly modified version for Python 1.5.2 can be
found in my distribution for comparison. The basic idea is to prove </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>get()</span></span><span lang=EN-US>
and </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>put()</span></span><span
lang=EN-US>functions which communicate with a consumer and a producer thread.</span></p>

<p class=H3><a name="_Toc470444059"><![if !supportLists]><span lang=EN-US>3.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Generators done with Continuations</span></a></p>

<p class=MsoBodyText><span lang=EN-US>Now we implement Generators using
continuations. </span></p>

<table border=1 cellspacing=0 cellpadding=0 width=500 style='width:375.25pt;
 border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:4.5pt 3.5pt 4.5pt 3.5pt'>
 <thead>
  <tr>
   <td width=500 valign=top style='width:375.25pt;border:solid windowtext .5pt;
   padding:4.5pt 3.5pt 4.5pt 3.5pt'>
   <p class=MsoNormal align=center style='margin-top:4.5pt;margin-right:0cm;
   margin-bottom:4.5pt;margin-left:0cm;text-align:center;page-break-after:avoid'><b><span
   lang=EN-US>Generators using Continuations</span></b><span lang=EN-US
   style='font-size:10.0pt'><o:p></o:p></span></p>
   </td>
  </tr>
 </thead>
 <tr>
  <td width=500 valign=top style='width:375.25pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:4.5pt 3.5pt 4.5pt 3.5pt'>
  <p class=Preformatted><span lang=EN-US>import continuation</span></p>
  <p class=Preformatted><span lang=EN-US>Killed = 'Generator.Killed'</span></p>
  <p class=Preformatted><span lang=EN-US>get_caller = continuation.caller</span></p>
  <p class=Preformatted><span lang=EN-US><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted><span lang=EN-US>class Generator:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes"> 
  </span>def __init__(self, func, *args, **kw):</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.func = func</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.args = args</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.kw = kw</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.done = 0</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.killed = 0</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.producer = self._start</span></p>
  </td>
 </tr>
 <tr>
  <td width=500 valign=top style='width:375.25pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:4.5pt 3.5pt 4.5pt 3.5pt'>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes"> 
  </span>def _start(self, dummy=None):</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>if not self.killed:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">     
  </span>try:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun:
  yes">        </span>apply(self.func, (self,) +</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun:
  yes">                      </span>self.args, self.kw)</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun:
  yes">        </span>raise EOFError, &quot;no more values&quot;</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">     
  </span>finally:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun:
  yes">        </span>self.kill()</span></p>
  </td>
 </tr>
 <tr>
  <td width=500 valign=top style='width:375.25pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:4.5pt 3.5pt 4.5pt 3.5pt'>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes"> 
  </span>def put(self, value):</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>if self.killed:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">     
  </span>raise TypeError, </span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun:
  yes">        </span>'put() called on killed generator'</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.producer = get_caller()</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.consumer(value)<span class=green><o:p></o:p></span></span></p>
  </td>
 </tr>
 <tr>
  <td width=500 valign=top style='width:375.25pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:4.5pt 3.5pt 4.5pt 3.5pt'>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes"> 
  </span>def get(self):</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>if self.killed:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">     
  </span>raise TypeError, </span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun:
  yes">        </span>'get() called on killed generator'</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.consumer = get_caller()</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.producer()<span class=green><o:p></o:p></span></span></p>
  </td>
 </tr>
 <tr>
  <td width=500 valign=top style='width:375.25pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:4.5pt 3.5pt 4.5pt 3.5pt'>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes"> 
  </span>def kill(self):</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>if self.killed:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">     
  </span>raise TypeError, 'kill() called on killed generator'</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>hold = self.func, self.args</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.__dict__.clear()</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.func, self.args = hold</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>self.killed = 1<span class=green><o:p></o:p></span></span></p>
  </td>
 </tr>
 <tr>
  <td width=500 valign=top style='width:375.25pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:4.5pt 3.5pt 4.5pt 3.5pt'>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes"> 
  </span>def clone(self):</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm'><span
  lang=EN-US><span style="mso-spacerun: yes">    </span>return
  Generator(self.func, self.args)</span></p>
  </td>
 </tr>
 <tr>
  <td width=500 valign=top style='width:375.25pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:4.5pt 3.5pt 4.5pt 3.5pt'>
  <p class=Preformatted><span lang=EN-US>def count(g, start=1, limit=0):</span></p>
  <p class=Preformatted><span class=green><span lang=EN-US><span
  style="mso-spacerun: yes">  </span># just to measure switching time<o:p></o:p></span></span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes"> 
  </span>i = start</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes"> 
  </span>while i != limit:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>g.put(i)</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>i = i+1</span></p>
  <p class=gr><span class=green><span lang=EN-US><span style="mso-spacerun:
  yes">    </span>#if i==42: g.kill()<o:p></o:p></span></span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes"> 
  </span>g.done = 1</span></p>
  </td>
 </tr>
</table>

<p class=MsoBodyText><span lang=EN-US>Instead of communicating with threads,
get() and put() jump directly into the context of the consumer/producer function.
The jumps are expressed by calls of continuations, which leave the current
context and jump over to the context that is stored in the continuation object.</span></p>

<p class=MsoBodyText><span lang=EN-US>Let us look at the </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>put</span></span><span lang=EN-US>
method. The call of </span><span class=CODE><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>get_caller</span></span><span
lang=EN-US> returns a continuation object, which is a snapshot of </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>put</span></span><span lang=EN-US>'s
current caller. This is saved away in </span><span class=CODE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>self.producer</span></span><span
lang=EN-US> and will be used later by the get method. A call of this object
performs by default a jump to the saved context.</span></p>

<p class=MsoBodyText><span lang=EN-US>It is crucial to understand how these
objects exchange values: A continuation objects always accepts a value as its
argument, and it returns a value as its result. It is just the question <i>where
or when</i> the value is returned. When </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>get_caller()</span></span><span lang=EN-US> is executed in </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>put()</span></span><span lang=EN-US>,
it catches the calling frame in a situation, where it has been supplied with a
value for the call.</span></p>

<p class=MsoBodyText><span lang=EN-US>In our </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>count() </span></span><span lang=EN-US>example, this is the
expression </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>g.put(i)</span></span><span
lang=EN-US>, and the continuation is saved as </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>producer()</span></span><span lang=EN-US> function, waiting
to run the next loop cycle. But the passed value is given to the </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>consumer()</span></span><span
lang=EN-US> function that was captured in the context of a </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>get()</span></span><span lang=EN-US>
call, and the value appears there as the function result. I admit that this is
a little hard to understand. Basically, you have understood the idea of a <i>coroutine</i>
switch, and in fact, this generator is made of two coroutines. More important:
You have understood how continuations act as the building block for new control
structures.</span></p>

<p class=H2><a name="_Ref470114918"></a><a name="_Toc470444060"><span
style='mso-bookmark:_Ref470114918'><![if !supportLists]><span lang=EN-US>4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Continuation Module</span></span></a></p>

<p class=MsoBodyText><span lang=EN-US>The continuation module was always my
real target application, and it has been rewritten the fifth time now. This was
like iteration, since I had to learn what continuations are, what they need,
and how Stackless Python must be to support it, without including it. Meanwhile
it has grown quite complicated and has undergone many optimizations, and there
is no chance to cover it all in this article.</span></p>

<p class=H3><a name="_Toc470444061"><![if !supportLists]><span lang=EN-US>4.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>The Problem</span></a></p>

<p class=MsoBodyText><span lang=EN-US>After you learned what a continuation is
and how easy this all is to understand, I have to disappoint you a little. The
implementation isn't easy at all, due to the fact that Pythons frames are not
safe when used as continuations. Python frames hold besides some other things
the local variables, exception state, current code location and the evaluation
stack for expressions.</span></p>

<p class=MsoBodyText><span lang=EN-US>And that is the problem. Whenever a frame
is run, its state changes, especially the expression stack and the code
location. But we wanted to <b>save</b> a continuation for later re-use. What we
have so far is just enough for the little coroutine idea which I sketched in
the beginning. But what happens if we are able to return to the same frame
twice, intended or not? (<span style='mso-field-code:"REF _Ref470115312 \\h"'>Figure
1<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400370030003100310035003300310032000000</w:data>
</xml><![endif]--></span>) We would need a copy of a frame. But a copy would
give a problem if some other structure were pointing to the frame. This was one
of the moments where I considered giving up. </span><span lang=EN-US
style='font-family:Wingdings;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-char-type:symbol;mso-symbol-font-family:
Wingdings'><span style='mso-char-type:symbol;mso-symbol-font-family:Wingdings'>J</span></span></p>

<p class=MsoBodyText style='page-break-after:avoid'><span lang=EN-US><!--[if gte vml 1]><v:shapetype
 id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t"
 path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:348.75pt;
 height:260.25pt' o:ole="" filled="t" fillcolor="black">
 <v:imagedata src="./spcpaper-Dateien/image001.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=465 height=347
src="./spcpaper-Dateien/image002.gif" v:shapes="_x0000_i1025"><![endif]><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="PowerPoint.Slide.8" ShapeID="_x0000_i1025"
  DrawAspect="Content" ObjectID="_1007320182">
 </o:OLEObject>
</xml><![endif]--></span></p>

<p class=MsoCaption><a name="_Ref470115312"></a><a name="_Toc470444083"><span
style='mso-bookmark:_Ref470115312'><span lang=EN-US>Figure <span
style='mso-field-code:"SEQ Figure \\* ARABIC"'>1</span></span></span><span
lang=EN-US>: Multiple Return</span></a></p>

<p class=MsoBodyText style='page-break-after:avoid'><span lang=EN-US><!--[if gte vml 1]><v:shape
 id="_x0000_i1026" type="#_x0000_t75" style='width:348.75pt;height:260.25pt'
 o:ole="" filled="t" fillcolor="black">
 <v:imagedata src="./spcpaper-Dateien/image003.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=465 height=347
src="./spcpaper-Dateien/image004.gif" v:shapes="_x0000_i1026"><![endif]><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="PowerPoint.Slide.8" ShapeID="_x0000_i1026"
  DrawAspect="Content" ObjectID="_1007320184">
 </o:OLEObject>
</xml><![endif]--></span></p>

<p class=MsoCaption><a name="_Ref470115359"></a><a name="_Toc470444084"><span
style='mso-bookmark:_Ref470115359'><span lang=EN-US>Figure <span
style='mso-field-code:"SEQ Figure \\* ARABIC"'>2</span></span></span><span
lang=EN-US>: Frame Mutation</span></a></p>

<p class=H3><a name="_Toc470444062"><![if !supportLists]><span lang=EN-US>4.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>How it Works</span></a></p>

<p class=MsoBodyText><span lang=EN-US>In order to solve this problem, I
introduced another kind of frames, continuation frames. The idea is simple: While
being of the same structure as an ordinary frame, it has a different execute
function. It is named </span><span class=CODE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>throw_continuation</span></span><span
lang=EN-US>, and that's exactly its only purpose: Restore the state of a real
frame and run it. (<span style='mso-field-code:"REF _Ref470115359 \\h"'>Figure 2<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400370030003100310035003300350039000000</w:data>
</xml><![endif]--></span>)</span></p>

<p class=MsoBodyText><span lang=EN-US>The other half of the solution is not to
insert a copy of the real frame in front of it into the frame chain, but to
create it <b>behind</b> the real frame, then turn the real frame into a
continuation frame, and make the pushed back version into the real one. </span></p>

<p class=MsoBodyText><span lang=EN-US><span style="mso-spacerun: yes"> </span>This
was fine for the first three versions of continuation module. But it turned
quickly into a problem to keep track of chain growth, and normalization of the
resulting mixture of real frames and continuation frames was necessary.</span></p>

<p class=MsoBodyText><span lang=EN-US>Furthermore, I needed more control over
the frame linkage and be able to predict necessary continuation frame creation
as much as possible. So here comes the third half of the solution(<span
style='mso-field-code:"REF _Ref470112919 \\h"'>Figure 3<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400370030003100310032003900310039000000</w:data>
</xml><![endif]--></span>)</span></p>

<p class=MsoBodyText style='page-break-after:avoid'><span lang=EN-US><!--[if gte vml 1]><v:shape
 id="_x0000_i1055" type="#_x0000_t75" style='width:348.75pt;height:259.5pt'
 o:ole="" filled="t" fillcolor="black">
 <v:imagedata src="./spcpaper-Dateien/image005.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=465 height=346
src="./spcpaper-Dateien/image006.gif" v:shapes="_x0000_i1055"><![endif]><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="PowerPoint.Slide.8" ShapeID="_x0000_i1055"
  DrawAspect="Content" ObjectID="_1007320185">
 </o:OLEObject>
</xml><![endif]--></span></p>

<p class=MsoCaption><a name="_Ref470112919"></a><a name="_Toc470444085"><span
style='mso-bookmark:_Ref470112919'><span lang=EN-US>Figure <span
style='mso-field-code:"SEQ Figure \\* ARABIC"'>3</span></span></span><span
lang=EN-US>: Nodes Collect References</span></a></p>

<p class=MsoBodyText><span lang=EN-US>This structure adds a level of
indirection, but the cost is very low. Adding a new continuation frame is not
much more than the old pushback scheme, together with some pointer and refcount
adjustment.</span></p>

<p class=H3><a name="_Toc470444063"><![if !supportLists]><span lang=EN-US>4.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>How fast? Is it fast? Size?</span></a></p>

<p class=MsoBodyText><b><span lang=EN-US>It is</span></b><span lang=EN-US>.
Some more advanced versions of the </span><span class=CODE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>get</span></span><span
lang=EN-US> and </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>put</span></span><span
lang=EN-US> functions in our example run three times faster than the threads
implementation. The following recursive call of one(!) frame has the same speed
as the proper implementation via functions:</span></p>

<table border=1 cellspacing=0 cellpadding=0 width=298 style='width:223.5pt;
 border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:4.5pt 3.5pt 4.5pt 3.5pt'>
 <tr>
  <td width=298 valign=top style='width:223.5pt;border:solid windowtext .5pt;
  padding:4.5pt 3.5pt 4.5pt 3.5pt'>
  <p class=Preformatted><span lang=EN-US>def rectest2(n):</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>this = continuation.current()</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>call = this.call</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>k = this.update(n)</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>if k:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun:
  yes">        </span>call(k-1)</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun: yes">   
  </span>else:</span></p>
  <p class=Preformatted><span lang=EN-US><span style="mso-spacerun:
  yes">        </span>del this.link</span></p>
  </td>
 </tr>
</table>

<p class=MsoBodyText><b><span lang=EN-US>On size</span></b><span lang=EN-US>:
The size of our continuation is just one frame, some 400 bytes maybe. You can easily
create 10000 of these objects. Threads come at the cost of an extra C stack
each, which is a megabyte on some machines.</span></p>

<p class=MsoBodyText><span lang=EN-US>We close the continuation story with a
look through PythonWin's Browser.</span></p>

<p class=MsoBodyText style='page-break-after:avoid'><span lang=EN-US><!--[if gte vml 1]><v:shape
 id="_x0000_i1028" type="#_x0000_t75" style='width:258pt;height:293.25pt'>
 <v:imagedata src="./spcpaper-Dateien/image007.png" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=344 height=391
src="./spcpaper-Dateien/image008.jpg" v:shapes="_x0000_i1028"><![endif]></span></p>

<p class=MsoCaption><a name="_Toc470444086"><span lang=EN-US>Figure <span
style='mso-field-code:"SEQ Figure \\* ARABIC"'>4</span>: Continuation Browser
View</span></a></p>

<p class=H2><a name="_Toc470444064"><![if !supportLists]><span lang=EN-US>5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Stackless Python</span></a></p>

<p class=MsoBodyText><span lang=EN-US>After we had continuations as the real
fruit of this work, let's come to Stackless Python and its implementation.
Continuations were the reason to build Stackless Python; without it there is no
chance to implement them in a machine independent manner.</span></p>

<p class=H3><a name="_Toc470444065"><![if !supportLists]><span lang=EN-US>5.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>What does it mean to be stackless?</span></a></p>

<p class=MsoBodyText><span lang=EN-US>The standard Python code interpreter is
written in C. Every Python action is somehow performed by some C code. Whenever
a piece of Python code is executed, a new incarnation of the interpreter loop
is created and executed by a recursive call.</span></p>

<p class=MsoBodyText><span lang=EN-US>First of all, let's see what it means to
have a C stack. Consider a Python function </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>a()</span></span><span lang=EN-US>, which calls a Python
function </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>b()</span></span><span
lang=EN-US>, which calls a Python function </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>c()</span></span><span lang=EN-US>. In the context of
function </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>c()</span></span><span
lang=EN-US>, the C interpreters of all three functions are still alive. They
are keeping their state on the C stack. When the Python functions come to an
end or an exception is raised, the C functions are popped off the C stack. This
is called &quot;unwinding the stack&quot;. </span></p>

<p class=MsoBodyText><span lang=EN-US>In that sense, Python is not so different
from other C programs, which are usually all stack based. But this is not the
full story, since Python does quite a lot more than using the C stack. </span></p>

<p class=MsoBodyText><span lang=EN-US>Every running piece of Python code also
has an associated Frame object. A Frame object is something like a running
instance of a code object. Frames are used to hold local and global variables,
to maintain the value stack of the byte code interpreter, and some other
housekeeping information. (<span style='mso-field-code:"REF _Ref470102459 \\h"'>Figure
5<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400370030003100300032003400350039000000</w:data>
</xml><![endif]--></span>)</span></p>

<p class=MsoBodyText><span lang=EN-US>These Frames are chained together in a
last-in/first-out manner. They make up a stack by themselves. And they do this
in a way quite similar to the C stack.</span></p>

<p class=H3><a name="_Toc470444066"><![if !supportLists]><span lang=EN-US>5.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Why the C stack should vanish</span></a></p>

<p class=MsoBodyText style='page-break-after:avoid'><span lang=EN-US><!--[if gte vml 1]><v:shape
 id="_x0000_i1029" type="#_x0000_t75" style='width:618.75pt;height:464.25pt'
 o:ole="">
 <v:imagedata src="./spcpaper-Dateien/image009.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=825 height=619
src="./spcpaper-Dateien/image010.gif" v:shapes="_x0000_i1029"><![endif]><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="PowerPoint.Slide.8" ShapeID="_x0000_i1029"
  DrawAspect="Content" ObjectID="_1007320187">
 </o:OLEObject>
</xml><![endif]--></span></p>

<p class=MsoCaption><a name="_Ref470102459"></a><a name="_Toc470444087"><span
style='mso-bookmark:_Ref470102459'><span lang=EN-US>Figure <span
style='mso-field-code:"SEQ Figure \\* ARABIC"'>5</span></span></span><span
lang=EN-US>: </span></a><a name="_Ref470102453"><span style='mso-bookmark:_Toc470444087'><span
lang=EN-US>Standard Nested Call</span></span></a></p>

<p class=MsoBodyText><span lang=EN-US>The C stack limits recursion depth. The C
stack has a fixed size, and therefore the stack cannot grow infinitely. The
frame stack is not limited. I think it is good to keep recursion depth limited,
but not as a matter of an implementation detail. This should be a user option.
The C stack should be reserved for C modules that really need it. </span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US>The C stack holds
references to objects.</span></span><span lang=EN-US> Well, </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>eval_code</span></span><span
lang=EN-US> is clean in this respect, but other C functions may pile up on the
stack as well. References to function parameters are kept on the C stack until
a function returns. </span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US>The C stack holds
execution state. </span></span><span lang=EN-US>Information of the frame's
current program and stack counter is hidden in variables on the C stack and
cannot be modified. The C stack therefore limits the possible order of
execution. </span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US>Removing the C stack is
cheap. </span></span><span lang=EN-US>As I try to show in this paper, the
implementation effort is much smaller than one would think. Execution speed is
nearly the same. But the new possibilities of having an explicit stack are
many, and they cannot even be tried in the moment. </span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US>Coroutines can be
incredibly fast. </span></span><span lang=EN-US>As we will see in the
following, by decoupling the frames from the C stack, coroutines can be
implemented so fast, that it might become feasible to use them for quite a
number of problems. Switching between two coroutine frames needs just a
built-in function call that is much cheaper than calling a Python function. </span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US>PERL has already no
longer a C stack. </span></span><span lang=EN-US>They will have some good
reasons for this. Python has no reason to be limited and stay behind. </span></p>

<p class=MsoBodyText><span lang=EN-US>To conclude: I want to provide the same
level of flexibility for the C API as we have already in Python, open Python
for new, efficient algorithmic approaches, at low implementation and runtime
cost. </span></p>

<p class=H3><a name="_Toc470444067"><![if !supportLists]><span lang=EN-US>5.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Targets Evolution and History</span></a></p>

<p class=MsoBodyText><span lang=EN-US>Everything started with a discussion of
coroutines in Python on the python-dev mailing list, initiated by Sam Rushing.
In turn, a series of requirements materialized as consequences.</span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US style='mso-bidi-font-style:
normal'>Get rid of the C stack. </span></span><span lang=EN-US>This became
clear quite quickly. In order to be able to rearrange frames, the C stack is in
the way.</span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US>Allow for pluggable
interpreters</span></span><span class=CITE><i><span lang=EN-US
style='font-weight:normal'>. </span></i></span><span lang=EN-US>After a first
implementation of a tail-recursive code interpreter, I realized that <i>tail
recursion</i> (chapter <span style='mso-field-code:"REF _Ref470166430 \\r \\h"'>6.2<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400370030003100360036003400330030000000</w:data>
</xml><![endif]--></span>) is necessary but not sufficient in order to make
map, filter and reduce stackless. Instead, we have to build tiny custom
interpreters. As a consequence, every extension module can provide its own
interpreter for any frame.</span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US style='mso-bidi-font-style:
normal'>Do the minimum changes to </span><span lang=EN-US>existing</span></span><span
class=CITE><span lang=EN-US style='mso-bidi-font-style:normal'> code. </span></span><span
lang=EN-US>It was never clear (and still is not) whether the Stackless Python
patches would make it into the distribution at some time. Furthermore, Python
will undergo a lot of changes in the future. The fewer changes are done now,
the easier it will be to incorporate them into future versions. Alternatively,
keeping running my own parallel python version becomes less effort.</span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US style='mso-bidi-font-style:
normal'>Stay compatible to compiled extension modules. </span></span><span
lang=EN-US>Stackless Python should be a drop-in replacement for the official
distribution. Every existing compiled extension module should work, provided it
does not rely on the exact frame layout. The proof of concept was to replace
python15.dll and have PythonWin on top of it.</span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US style='mso-bidi-font-style:
normal'>Learn how stackless extension modules work. </span></span><span
lang=EN-US>Although my major goal was to provide stackless behavior for Python
code, the requirement to figure out how to make stackless-aware extension
modules came up quickly. Suppose that a fast XML parser is written in Python,
which makes use of rapid context switching. In order to write a much faster
version in C, we need to be able to model the same stackless behavior.
Fortunately, the proof of concept comes for free by stackless map.</span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US style='mso-bidi-font-style:
normal'>Implement first class continuations. </span></span><span lang=EN-US>As
a proof of concept, and to learn how all of this must work, I had not only to
write an appropriate Python version, but also check the strength of the concept
by implementing first class continuations. In fact, a number of improvements
had to be done in order to get continuations to work. </span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US style='mso-bidi-font-style:
normal'>Keep continuations out of the core. </span></span><span lang=EN-US>While
the Python core was changed to support continuations, it became clear that the
majority of existing and future code would probably make no use of
continuations. Therefore, the implementation had to have the smallest possible
runtime impact on the Python core, and continuations had to be a dynamic
module. The evolution of the continuation module resulted in several changes to
Stackless Python, which has reached version 1.0 at the time of writing. It
appears to be stable and is used in production code.</span></p>

<p class=H2><a name="_Toc470444068"><![if !supportLists]><span lang=EN-US>6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>The Paradigm Shift</span></a></p>

<p class=MsoBodyText><span lang=EN-US>We will see in the next chapter, how
Stackless Python was developed. Since this was a long, iterative process, the
key ideas appear in the order of invention which is not optimal for the readers
understanding. The essentials can be summarized as the following 3 axioms:</span></p>

<p class=H3><a name="_Toc470444069"><![if !supportLists]><span lang=EN-US>6.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Time of Frame Execution</span></a></p>

<p class=MsoBodyText><span lang=EN-US>The paradigm in </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>ceval.c</span></span><span lang=EN-US> for running a Python
function is to build a frame for the code object, to put all the parameters in
place and then run </span><span class=CODE><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>eval_code2</span></span><span
lang=EN-US> and wait for it to return.</span></p>

<p class=MsoBodyText><span lang=EN-US>The transformation: Making sure to run
all frames in their correct order does not imply that we must call the
interpreter function from the current C-stack nesting level. If we can avoid
any C-stack related post-processing, unwinding the stack is possible before the
frame execution. This implies the next shift:</span></p>

<p class=H3><a name="_Ref470166430"></a><a name="_Toc470444070"><span
style='mso-bookmark:_Ref470166430'><![if !supportLists]><span lang=EN-US>6.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Lifetime of Parameters</span></span></a></p>

<p class=MsoBodyText><span lang=EN-US>The function parameters in standard
Python are kept alive by the caller. This means that the caller of </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>eval_code2</span></span><span
lang=EN-US> has to wait until the call is finished. After the call the
reference to the parameter tuple is removed.</span></p>

<p class=MsoBodyText><span lang=EN-US>Thinking in frames instead of recursive
calls, it is obvious that parameters should be kept alive as long as the frame
exists. Therefore, we put a reference to the parameter tuple into a frame
field. This reference will be automatically removed at the best possible time:
when the frame is disposed.</span></p>

<p class=MsoBodyText><span lang=EN-US>Since we removed the last cleanup task
from the recursive C function call, there is nothing left do do for it, and it
may return to its caller <b>before</b> the frame is run. This pattern of a
function invocation as the last action of the caller is also known as <b>tail
recursion</b>. Tail recursive calls are logical identical to jumps, and
unwinding our C stack before running the next frame is our C equivalent of
directly jumping back into the toplevel frame dispatcher.</span></p>

<p class=H3><a name="_Toc470444071"><![if !supportLists]><span lang=EN-US>6.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Third System State</span></a></p>

<p class=MsoBodyText><span lang=EN-US>Standard Python has the throughout
semantics of function calls that either a </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>PyObject</span></span><span lang=EN-US> is returned, or </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>NULL</span></span><span lang=EN-US>
which signals an exception. These are the two essential system states while
returning from a frame.</span></p>

<p class=MsoBodyText><span lang=EN-US>By introduction of a special object as a
return value with a different meaning, we can control the C-stack and request
to unwind it, before the next frame is run. Since this object is compatible
with all other Python objects, this protocol change isn't visible to most of
the involved code. Only the C functions which deal with running a new frame
needed to be changed. This is the <i>third system state</i>.</span></p>

<p class=MsoBodyText><span lang=EN-US><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<div align=center>

<table border=1 cellspacing=0 cellpadding=0 style='margin-left:-19.8pt;
 border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:3.0pt 3.0pt 3.0pt 3.0pt'>
 <tr style='height:13.8pt'>
  <td width=134 style='width:100.7pt;border:solid windowtext .5pt;padding:3.0pt 3.0pt 3.0pt 3.0pt;
  height:13.8pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>Return Value</span></b><span class=CODE><b><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><o:p></o:p></span></b></span></p>
  </td>
  <td width=139 style='width:104.25pt;border:solid windowtext .5pt;border-left:
  none;mso-border-left-alt:solid windowtext .5pt;padding:3.0pt 3.0pt 3.0pt 3.0pt;
  height:13.8pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>System State</span></b><b><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></b></p>
  </td>
 </tr>
 <tr style='height:13.8pt'>
  <td width=134 style='width:100.7pt;border:solid windowtext .5pt;border-top:
  none;mso-border-top-alt:solid windowtext .5pt;padding:3.0pt 3.0pt 3.0pt 3.0pt;
  height:13.8pt'>
  <p class=MsoNormal align=left style='text-align:left'><span class=CODE><span
  lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Times New Roman"'>NULL<o:p></o:p></span></span></p>
  </td>
  <td width=139 style='width:104.25pt;border-top:none;border-left:none;
  border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:3.0pt 3.0pt 3.0pt 3.0pt;height:13.8pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>An
  error occurred</span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='height:13.8pt'>
  <td width=134 style='width:100.7pt;border:solid windowtext .5pt;border-top:
  none;mso-border-top-alt:solid windowtext .5pt;padding:3.0pt 3.0pt 3.0pt 3.0pt;
  height:13.8pt'>
  <p class=MsoNormal align=left style='text-align:left'><span class=CODE><span
  lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Times New Roman"'>Py_UnwindToken<o:p></o:p></span></span></p>
  </td>
  <td width=139 style='width:104.25pt;border-top:none;border-left:none;
  border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:3.0pt 3.0pt 3.0pt 3.0pt;height:13.8pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Dispatch
  a frame</span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='height:14.7pt'>
  <td width=134 style='width:100.7pt;border:solid windowtext .5pt;border-top:
  none;mso-border-top-alt:solid windowtext .5pt;padding:3.0pt 3.0pt 3.0pt 3.0pt;
  height:14.7pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Other </span><span
  class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Times New Roman"'>PyObject</span></span><span
  lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  </td>
  <td width=139 style='width:104.25pt;border-top:none;border-left:none;
  border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:3.0pt 3.0pt 3.0pt 3.0pt;height:14.7pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Return
  this value</span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoBodyText><span lang=EN-US>The above three ideas were central,
necessary and sufficient for Stackless Python. All other details are
consequences from these axioms.</span></p>

<p class=H2><a name="_Toc470444072"><![if !supportLists]><span lang=EN-US>7<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Implementing Stackless Python</span></a></p>

<p class=MsoBodyText><span lang=EN-US>During the implementation, a number of rules
showed up as being essential. They are quite simple: </span></p>

<p class=DefinitionNumbered><![if !supportLists]><span lang=EN-US>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Avoid recursive calls into the interpreter. </span></p>

<p class=DefinitionNumbered><![if !supportLists]><span lang=EN-US>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Store all runtime information in frames. </span></p>

<p class=DefinitionNumbered><![if !supportLists]><span lang=EN-US>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Allow frames to be restarted. Just <b>add</b> to the frame
structure, don't break anything. </span></p>

<p class=DefinitionNumbered><![if !supportLists]><span lang=EN-US>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Store the interpreter function in the frames. </span></p>

<p class=DefinitionNumbered><![if !supportLists]><span lang=EN-US>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Have one central frame handler, turn eval_code2 into just one
interpreter </span></p>

<p class=DefinitionNumbered><![if !supportLists]><span lang=EN-US>6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Provide new functions but keep backward compatible stub functions. </span></p>

<p class=MsoBodyText><span lang=EN-US>Rule 1 is obvious but looks hard to
fulfill. </span></p>

<p class=MsoBodyText><span lang=EN-US>Rule 2 is obvious, too. The frame chain
becomes our true stack. No information should be hidden in the C stack while a
Python function is being called. </span></p>

<p class=MsoBodyText><span lang=EN-US>Rule 3 is one of the key ideas. We come
to it soon. </span></p>

<p class=MsoBodyText><span lang=EN-US>Rule 4 is just a consequent move of
information into frames. If a frame is to know everything about the running
code, then it also should know which the interpreter is. As a side effect,
frames can call each other at wilt, without having to know more than that this
is just a runable frame. </span></p>

<p class=MsoBodyText><span lang=EN-US>Rule 5 is a consequence of splitting
responsibilities. The central frame handler is the very minimum that we need.
It does nothing more than juggling the frame calls and passing results. With a
single concept of frames, we can run any kind of interpreters together, as long
as they obey the Python Object Protocol. </span></p>

<p class=MsoBodyText><span lang=EN-US>Well, Rule 6 is clear. We want to be
still standard Python with the standard C API just extended. </span></p>

<p class=H3><![if !supportLists]><span lang=EN-US>7.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US><span style="mso-spacerun:
yes"> </span><a name="_Toc470444073">Problem analysis</a></span></p>

<p class=MsoBodyText><span lang=EN-US><span style="mso-spacerun:
yes"> </span>Let's have a look into the code (<span style='mso-field-code:"REF _Ref470105995 \\h"'>Figure
8<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400370030003100300035003900390035000000</w:data>
</xml><![endif]--></span>). The first file to inspect is </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>ceval.c</span></span><span lang=EN-US>.
We compare the old and the new version. If you try to figure out what happens
on a Python function call, you will first think it is impossible to do that
without the C stack. </span></p>

<p class=MsoBodyText><span lang=EN-US><!--[if gte vml 1]><v:shape id="_x0000_i1030"
 type="#_x0000_t75" style='width:615.75pt;height:462pt' o:ole="">
 <v:imagedata src="./spcpaper-Dateien/image011.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=821 height=616
src="./spcpaper-Dateien/image012.gif" v:shapes="_x0000_i1030"><![endif]><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="PowerPoint.Slide.8" ShapeID="_x0000_i1030"
  DrawAspect="Content" ObjectID="_1007320189">
 </o:OLEObject>
</xml><![endif]--></span></p>

<p class=MsoCaption><a name="_Toc470444088"><span lang=EN-US>Figure <span
style='mso-field-code:"SEQ Figure \\* ARABIC"'>6</span>: Minimizing Recursive
Calls</span></a></p>

<p class=MsoBodyText><span lang=EN-US><span style="mso-spacerun:
yes"> </span>Have a look at function </span><span class=CODE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>eval_code2</span></span><span
lang=EN-US>, at the case </span><span class=CODE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>CALL_FUNCTION(<span
style='mso-field-code:"REF _Ref470105995 \\h"'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>Figure </span><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>8</span><!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F005200650066003400370030003100300035003900390035000000</w:data>
</xml><![endif]--></span>)</span></span><span lang=EN-US>. Many different cases
are handled here; other functions are called, like </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>PyEval_CallObjectWithKeywords</span></span><span lang=EN-US>.
There, a number of decisions are made, which in turn cause other function
calls, and finally, we end up somewhere deeply nested, with either a call to </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>call_builtin</span></span><span
lang=EN-US> or </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>call_function</span></span><span
lang=EN-US>. For getting a result, either a C function is called, or a new
interpreter incarnation handles the call, finally via </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>eval_code2</span></span><span lang=EN-US> again. </span></p>

<p class=MsoBodyText><span lang=EN-US>In order to do this call, the calling
function somehow prepares parameters, keeps a reference to the parameters, lets
the evaluation happen, releases the parameters and returns the result. </span></p>

<p class=MsoBodyText><span lang=EN-US>My biggest fear was that I would have to
rewrite all of this. But this is not true. </span></p>

<p class=H3><a name="_Toc470444074"><![if !supportLists]><span lang=EN-US>7.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Problem solution</span></a></p>

<p class=MsoBodyText><span lang=EN-US>If we just avoid doing the final call to </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>eval_code2</span></span><span
lang=EN-US>, we are almost done. Please have a look into the old version of </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>call_function</span></span><span
lang=EN-US>, and compare it to the new version. Instead of calling the
interpreter, we end up with the above piece of code: Prepare a frame to be run,
but don't run it.</span></p>

<p class=MsoBodyText><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>eval_code2_setup</span></span><span
lang=EN-US> is a function that just prepares a new frame, in order to be run
later. The frame holds all references to parameters, and the new field </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>f_hold_ref</span></span><span
lang=EN-US> takes the role to keep a reference to </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>arg</span></span><span lang=EN-US>. Instead of actually
performing the call now, </span><span class=CODE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>call_function</span></span><span
lang=EN-US> returns a special object, </span><span class=CODE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Py_UnwindToken</span></span><span
lang=EN-US> as its value. This value is passed as a result through the actual
pile of invoked C functions until it is caught in the calling interpreter (yes,
we are back at the </span><span class=CODE><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>CALL_FUNCTION</span></span><span
lang=EN-US> opcode). The interpreter checks this value and knows that a call is
pending, so the current frame must be left, and a new frame has been put onto
the stack, which should be called now. </span></p>

<p class=MsoBodyText><span lang=EN-US>Why is this possible, and why does it
appear to be so easy?</span></p>

<p class=MsoBodyText><span lang=EN-US>Python is already nearly stackless. All
the functions try to do nothing more than just to prepare for the next
interpreter call, which will do the actual evaluation. After as code object and
its parameters have been checked for errors, the runtime error checking is
already deferred to the responsible interpreter. However, this does not mean
that we need to call the interpreter immediately. We can defer this until we
have finished the currently active C functions! Do you get the idea? </span></p>

<p class=MsoBodyText><span lang=EN-US>In other words: Almost all calls into the
interpreter turn out to be tail recursive. After parameters have been checked
and everything is prepared, there is no need to actually call the next
function. It is ok to generate a frame on the frame stack, which is ready to be
run by the next interpreter involved, but there is no need to do this while we
are still in the current pile of active C functions. We can leave before we
call.</span></p>

<table border=1 cellspacing=0 cellpadding=0 width=434 style='width:325.65pt;
 border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0cm 3.5pt 0cm 3.5pt'>
 <tr>
  <td width=434 valign=top style='width:325.65pt;border:solid windowtext .5pt;
  padding:0cm 3.5pt 0cm 3.5pt'>
  <p class=MsoNormal align=center style='margin-top:4.5pt;text-align:center;
  mso-pagination:lines-together;page-break-after:avoid'><b><span lang=EN-US>The
  Frame Dispatcher</span></b><b><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></b></p>
  <p class=MsoNormal align=center style='margin-bottom:4.5pt;text-align:center'><b><span
  lang=EN-US>&quot;Mario&quot;</span></b><b><span lang=EN-US style='font-size:
  10.0pt'><o:p></o:p></span></b></p>
  </td>
 </tr>
 <tr>
  <td width=434 valign=top style='width:325.65pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0cm 0cm 0cm 0cm'>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'>PyObject
  *</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'>PyEval_Frame_Dispatch()</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'>{</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>PyObject * result;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>PyFrameObject *f;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>PyThreadState *tstate =
  PyThreadState_GET();</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>PyDispatcherObject *self;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>f = tstate-&gt;frame;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>if (f==NULL) return NULL;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>self = PyDispatcher_New(f);</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>if (self == NULL)</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>return NULL;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>/* the initial frame belongs to us */</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>Py_INCREF(self);</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>Py_XDECREF(f-&gt;f_dispatcher);</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>f-&gt;f_dispatcher = self;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>result = f-&gt;f_temp_val;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>f-&gt;f_temp_val = NULL;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>while (1) {</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>result = f-&gt;f_execute(f, result) ;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>f = tstate-&gt;frame;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>if (result == Py_UnwindToken) {</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">      </span>/* this is actually the topmost frame.
  */</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">      </span>/* pick an optional return value */</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">      </span>result = f-&gt;f_temp_val;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">      </span>f-&gt;f_temp_val = NULL;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">      </span>/* and mark the frame as our own */</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">      </span>if (f-&gt;f_dispatcher != self) {</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">        </span>Py_INCREF(self);</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">        </span>Py_XDECREF(f-&gt;f_dispatcher);</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">     </span><span style="mso-spacerun:
  yes">   </span>f-&gt;f_dispatcher = self;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">      </span>}</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>}</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>else if (f==NULL <o:p></o:p></span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">            </span>|| f-&gt;f_dispatcher != self)</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">      </span>break;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>}</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>self-&gt;d_back-&gt;d_alive = 1;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'>/*
  always possible since one always exists */</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>self-&gt;d_alive = 0;</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>Py_DECREF(self);</span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>return result;</span></p>
  <p class=Preformatted style='margin-left:0cm;text-align:justify;text-indent:
  0cm;background:white;mso-shading:white;mso-pattern:solid white'><span
  lang=EN-US style='mso-bidi-font-family:"Courier New"'>}</span><span
  lang=EN-US style='mso-bidi-font-size:8.0pt;mso-bidi-font-family:"Courier New"'><o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=434 valign=top style='width:325.65pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0cm 3.5pt 0cm 3.5pt'>
  <p class=Preformatted align=center style='margin-left:0cm;text-align:center;
  text-indent:0cm;background:white;mso-shading:white;mso-pattern:solid white'><b><span
  lang=EN-US style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
  "Times New Roman"'>Frame Protocol:<o:p></o:p></span></b></p>
  <p class=Preformatted style='margin-left:0cm;text-align:justify;text-indent:
  0cm;background:white;mso-shading:white;mso-pattern:solid white'><span
  lang=EN-US style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
  "Times New Roman"'>After some frame's f_execute has been run, we always refer
  to the topmost tstate frame. If a frame returns the </span><span class=CODE><span
  lang=EN-US style='font-size:12.0pt;mso-bidi-font-size:10.0pt'>Py_UnwindToken</span></span><span
  lang=EN-US style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
  "Times New Roman"'> object, this indicates that a different frame will be run
  that now belongs to the current dispatcher. The f_temp_val field holds the
  temporary return value since </span><span class=CODE><span lang=EN-US
  style='font-size:12.0pt;mso-bidi-font-size:10.0pt'>f_execute</span></span><span
  lang=EN-US style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
  "Times New Roman"'>'s return value was occupied. Otherwise, we will bail out
  whenever the result becomes </span><span class=CODE><span lang=EN-US
  style='font-size:12.0pt;mso-bidi-font-size:10.0pt'>NULL</span></span><span
  lang=EN-US style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
  "Times New Roman"'> or a different dispatcher is detected.<o:p></o:p></span></p>
  <p class=Preformatted style='background:white;mso-shading:white;mso-pattern:
  solid white'><![if !supportEmptyParas]>&nbsp;<![endif]><span lang=EN-US
  style='mso-bidi-font-size:8.0pt;mso-bidi-font-family:"Courier New"'><o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoBodyText><span lang=EN-US>Whenever a function believes that it is done
by running eval_code2 and returning a value, it defers all error handling to
&quot;the&quot; interpreter. What I do is nothing more than to defer the whole
call to just &quot;one&quot; interpreter, which has the same semantics. It is
just a special form of tail recursion taking place. It does not matter where
the result value is checked for an exception immediately from a deeply nested
function call, or later, after unwinding to the top-level interpreter
incarnation. The sequence of necessary actions is driven by the frame chain and
nothing else.</span></p>

<p class=MsoBodyText><span lang=EN-US>By following this principle, it was
possible to make stackless versions of all of the interpreter functions. The
conversion works like this:</span></p>

<p class=MsoBodyText><span lang=EN-US>When a C function calls the interpreter
(the former eval_code2), it does not immediately run the new stack frame.
Instead, the new frame object is created and a special token, Py_UnwindToken,
is returned.<span style="mso-spacerun: yes">  </span>Py_UnwindToken is a
special return value that indicates that the current interpreter should get out
of the way immediately (which means to return).</span></p>

<p class=MsoBodyText><span lang=EN-US>Another approach to explain this: The
interpreter functions are (almost) all working with PyObjects. Return values
can be NULL, or a proper PyObject. NULL has the semantics of an error that has
to be handled, and it will cause the interpreters to unwind the stack by an
exception. This gives us just a two-valued logic: Return values are either
PyObjects or NULL. By introducing the Py_UnwindToken, I extended this to
three-valued logic.</span></p>

<p class=MsoBodyText><span lang=EN-US>Since all these values can be passed
through the existing interpreter functions, I saved a major rewrite and had
just to take care to catch the right places to change. </span></p>

<p class=MsoBodyText><span lang=EN-US>If you are still with me, now the time
has come to change your understanding of functions, stacks and return values. </span></p>

<p class=H3><a name="_Toc470444075"><![if !supportLists]><span lang=EN-US>7.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>The Frame Dispatcher</span></a></p>

<p class=MsoBodyText><span lang=EN-US>Let's have a look into the new, central
&quot;interpreter&quot; function in ceval.c Actually it is no interpreter, but
a function that repeatedly evaluates the top of the frame stack, using that
frame's execute function. </span></p>

<p class=MsoBodyText><span lang=EN-US>Just try to understand the central loop.
The dispatcher picks the topmost frame, the current result, and calls the
frame's </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>f_execute</span></span><span
lang=EN-US> function. This dispatcher loop is the place where we always return
to, regardless for what reason we ran a frame or why we left a frame. </span></p>

<p class=MsoBodyText><span lang=EN-US>This loop will continue to evaluate
frames, until it reaches some end condition. It doesn't care about the frame
stack that might grow as Python functions are called, or shrink when Python
functions return or raise exceptions. It will simply run the topmost frame,
whatever is there, whatever interpreter it uses. Calling frames and returning
from frames is no longer different. It reduces to leaving a frame and executing
another one. If the frame chain grows, it is a call, and if it shrinks, it is a
return. The dispatcher does not care about that.</span></p>

<p class=MsoBodyText><span lang=EN-US>You might wonder about the </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>result</span></span><span lang=EN-US>
variable, which looks a little funny. This is indeed the result that the
execution of a frame came up with. We wouldn't even need to examine this
variable, since the executing interpreters know whether they expect a result and
how to handle it. The reason why we do check for a </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>Py_UnwindToken</span></span><span lang=EN-US> is just to
assign our ownership (see below) to a probably newly created frame, and to
handle the special case of passing a return value</span></p>

<p class=MsoBodyText><span lang=EN-US>You might also wonder thy this dispatcher
object </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>self</span></span><span
lang=EN-US> is needed. Every existing dispatcher creates a dispatcher object,
in order to keep track of recursive calls. By inserting a reference from the
frame to this object, we associate the frame's ownership.</span></p>

<p class=MsoBodyText><span lang=EN-US>This is a necessary contribution for
being stackless and backward compatible at once. Not every recursive
interpreter call can be easily avoided: An </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>__init__</span></span><span lang=EN-US> call for instance
has different semantics than &quot;normal&quot; frames, since it is expected to
return </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>None</span></span><span
lang=EN-US> as result. This cannot easily be turned into <i>tail recursion</i>.
In this case, the recursive call makes good sense. By monitoring the lifetime
of dispatchers, we can track down whether a frame is a valid jump target or
not.</span></p>

<p class=H3><a name="_Toc470444076"><![if !supportLists]><span lang=EN-US>7.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Extended Frame Compatibility</span></a></p>

<p class=MsoBodyText><span lang=EN-US>Two frames are compatible iff control
flow can be transferred without corrupting the C-stack.</span></p>

<p class=MsoBodyText><span lang=EN-US>My early assumption was that compatible
frames must necessarily share the same dispatcher. This leads to a couple of
restrictions: Continuations, which are created from frames belonging to a
different dispatcher would never be valid jump targets. You would never be able
to save a continuation in an instance's </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>__init__</span></span><span lang=EN-US> function and call it
later from the main module. The same is true for continuations which are saved
during an import or which even come from a different thread. And most
important, extension modules that are not stackless-aware often call back into
Python functions and crate incompatible frames.</span></p>

<p class=MsoBodyText><span lang=EN-US>But there is a way out: Dispatcher
objects are keeping track of their running dispatcher function. Whenever the dispatcher
returns, it marks its death in its dispatcher object. It is important to note
that by the death of a frame's dispatcher, we know for sure that there is no
longer an associated C function on the stack that holds a reference to it,
thereby forbidding its re-use.</span></p>

<p class=MsoBodyText><span lang=EN-US>The resulting rule is simple: Wait until
a dispatcher is done with its frames, and they become valid jump targets.
Before we jump to such a frame, we remove the reference to the dead dispatcher
and assign our own. <span class=CITE>Dead dispatcher's frames are compatible.<o:p></o:p></span></span></p>

<p class=MsoBodyText><span class=CITE><span lang=EN-US style='font-weight:normal'>In
other words: By waiting until a call to another dispatcher returns, we can
treat this call again like a tail recursion which is equivalent to a jump back
into our active dispatcher. Just a very long tail </span></span><span
class=CITE><span lang=EN-US style='font-family:Wingdings;mso-ascii-font-family:
"Times New Roman";mso-hansi-font-family:"Times New Roman";mso-char-type:symbol;
mso-symbol-font-family:Wingdings;font-weight:normal'><span style='mso-char-type:
symbol;mso-symbol-font-family:Wingdings'>J</span></span></span><span
class=CITE><span lang=EN-US style='font-weight:normal'>.</span></span><b><span
lang=EN-US><o:p></o:p></span></b></p>

<p class=H2><a name="_Toc470444077"><![if !supportLists]><span lang=EN-US>8<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>The New C API</span></a></p>

<p class=MsoBodyText><span lang=EN-US>In order to stay backward compatible, all
the known recursive interpreter functions needed to be retained. To avoid
duplication of all the code, the following technique was applied: </span></p>

<p class=MsoBodyText><span lang=EN-US>The old function header was copied; the
new function got a &quot;_nr&quot; appended to its name. The new function was
changed to be non-recursive. If the old version was short enough or had to be
changed anyway, code was indeed copied. An example for this is the well-known </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>eval_code</span></span><span
lang=EN-US>: </span></p>

<p class=MsoBodyText><span lang=EN-US>The difference is obvious: While the
backward compatible version creates a ready-to-run frame (which is put onto the
frame stack by </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>eval_code2_setup</span></span><span
lang=EN-US>) and runs it to the end by </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>PyEval_Frame_Dispatch</span></span><span lang=EN-US>, the
other just leaves that frame and returns </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>Py_UnwindToken</span></span><span lang=EN-US>. </span></p>

<p class=MsoBodyText><span lang=EN-US>An example where the original version was
expressed in terms of the new version, we have a look at </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>PyEval_CallObjectWithKeywords</span></span><span
lang=EN-US>:</span></p>

<p class=MsoBodyText style='margin-top:0cm'><span lang=EN-US>The old version
was turned into a call to the new, followed by a dispatcher call. Note that in
the case of </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>PyEval_CallObjectWithKeywords</span></span><span
lang=EN-US>, the &quot;new&quot; function is exactly the same code as the
original one. The difference is just that the used internal functions of </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>ceval.c,</span></span><span lang=EN-US>
</span><span class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>call_builtin</span></span><span
lang=EN-US> and </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>call_function</span></span><span
lang=EN-US> have changed their semantics to be non-recursive versions. </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>PyEval_Call­ObjectWithKeywords_nr</span></span><span
lang=EN-US> does not know that it now can return something special, since a </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>Py_UnwindToken</span></span><span
lang=EN-US> is just another PyObject. So the &quot;new&quot; function in this
case is the new version of </span><span class=CODE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>PyEval_CallObjectWithKeywords</span></span><span
lang=EN-US> that just takes care that no </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>Py_UnwindToken</span></span><span lang=EN-US> can leak out
to a C function that is not stackless-aware. </span></p>

<p class=MsoBodyText><span lang=EN-US>The backward compatible version has
exactly the same semantics as in the original code. It runs some code and
returns either a PyObject or a NULL, indicating an exception. Extension modules
that wish to implement stackless C functions in a similar fashion as shown
here, will use the new function instead. </span></p>

<p class=MsoBodyText><b><span lang=EN-US>New stackless functions in </span></b><span
class=CODE><b><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>ceval.c:</span></b></span><b><span
lang=EN-US> <o:p></o:p></span></b></p>

<p class=MsoNormal><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>PyEval_CallObjectWithKeywords_nr</span></span><span
lang=EN-US> </span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>

<p class=MsoNormal><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>PyEval_CallObject_nr</span></span><span
lang=EN-US> </span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>

<p class=MsoNormal><span class=CODE><span lang=FR style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman";mso-ansi-language:
FR'>PyEval_EvalCode_nr</span></span><span lang=FR style='mso-ansi-language:
FR'> </span><span lang=FR style='font-size:10.0pt;mso-ansi-language:FR'><o:p></o:p></span></p>

<p class=MsoNormal><span class=CODE><span lang=FR style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman";mso-ansi-language:
FR'>PyEval_Frame_Dispatch</span></span><span lang=FR style='mso-ansi-language:
FR'> </span><span lang=FR style='font-size:10.0pt;mso-ansi-language:FR'><o:p></o:p></span></p>

<p class=MsoBodyText><b><span lang=EN-US>New stackless functions in </span></b><span
class=CODE><b><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>pythonrun.c:</span></b></span><b><span
lang=EN-US> <o:p></o:p></span></b></p>

<p class=MsoNormal><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>PyRun_SimpleFile_nr</span></span><span
lang=EN-US> </span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>

<p class=MsoNormal><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>PyRun_String_nr</span></span><span
lang=EN-US> </span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>

<p class=MsoNormal><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>PyRun_File_nr</span></span><span
lang=EN-US> </span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>

<p class=MsoBodyText><b><span lang=EN-US>New stackless functions in </span></b><span
class=CODE><b><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>bltinmodule.c:</span></b></span><b><span
lang=EN-US> <o:p></o:p></span></b></p>

<table border=0 cellspacing=0 cellpadding=0 style='border-collapse:collapse;
 mso-padding-alt:0cm 0cm 0cm 0cm'>
 <tr>
  <td width=188 valign=top style='width:141.3pt;padding:0cm 0cm 0cm 0cm'>
  <p class=MsoNormal><span class=CODE><span lang=EN-US style='font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>builtin_map_nr<o:p></o:p></span></span></p>
  </td>
  <td width=100 valign=top style='width:74.85pt;padding:0cm 0cm 0cm 0cm'>
  <p class=MsoNormal align=center style='text-align:center'><span class=CODE><span
  lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Times New Roman"'>done</span></span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=188 valign=top style='width:141.3pt;padding:0cm 0cm 0cm 0cm'>
  <p class=MsoNormal><span class=CODE><span lang=EN-US style='font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>builtin_eval_nr<o:p></o:p></span></span></p>
  </td>
  <td width=100 valign=top style='width:74.85pt;padding:0cm 0cm 0cm 0cm'>
  <p class=MsoNormal align=center style='text-align:center'><span class=CODE><span
  lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Times New Roman"'>to do</span></span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=188 valign=top style='width:141.3pt;padding:0cm 0cm 0cm 0cm'>
  <p class=MsoNormal><span class=CODE><span lang=EN-US style='font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>builtin_filter_nr</span></span><span
  lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  </td>
  <td width=100 valign=top style='width:74.85pt;padding:0cm 0cm 0cm 0cm'>
  <p class=MsoNormal align=center style='text-align:center'><span class=CODE><span
  lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Times New Roman"'>to do</span></span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=188 valign=top style='width:141.3pt;padding:0cm 0cm 0cm 0cm'>
  <p class=MsoNormal><span class=CODE><span lang=EN-US style='font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>builtin_reduce_nr<o:p></o:p></span></span></p>
  </td>
  <td width=100 valign=top style='width:74.85pt;padding:0cm 0cm 0cm 0cm'>
  <p class=MsoNormal align=center style='text-align:center'><span class=CODE><span
  lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Times New Roman"'>to do</span></span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=188 valign=top style='width:141.3pt;padding:0cm 0cm 0cm 0cm'>
  <p class=MsoNormal><span class=CODE><span lang=EN-US style='font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>builtin_apply_nr<o:p></o:p></span></span></p>
  </td>
  <td width=100 valign=top style='width:74.85pt;padding:0cm 0cm 0cm 0cm'>
  <p class=MsoNormal align=center style='text-align:center'><span class=CODE><span
  lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Times New Roman"'>done</span></span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoBodyText><span lang=EN-US>The </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>builtin_xxx</span></span><span lang=EN-US> functions finally
replaced their originals, since they are not used elsewhere. </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>builtin_eval</span></span><span
lang=EN-US> and </span><span class=CODE><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>builtin_apply</span></span><span
lang=EN-US> are straightforward to implement, some are not done yet.</span></p>

<p class=MsoBodyText><span lang=EN-US>The major problem is functions that cannot
easily be converted since they are not tail recursive preparations of a single </span><span
class=CODE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>eval_code</span></span><span
lang=EN-US> call, but repetitive calls are performed. To obtain a stackless
version of these, it is necessary to define their own interpreter function. I
implemented this as a proof of concept just for </span><span class=CODE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>builtin_map</span></span><span lang=EN-US>.</span></p>

<p class=H2><a name="_Toc470444078"><![if !supportLists]><span lang=EN-US>9<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Alternatives to &quot;The Token&quot;</span></a></p>

<p class=MsoBodyText><span lang=EN-US>The approach to introduce a special
object to represent a third system state is considered not clean sometimes. It
should be noted that there are other equivalent approaches. A special flag
could be set in the current thread state or the current frame to indicate the
special situation of unwinding. My choice was directed by execution speed,
since comparison of the current result against a constant value is fast. For
sure there is the need of a third system state, by whatever it is expressed.</span></p>

<p class=H2><a name="_Toc470444079"><![if !supportLists]><span lang=EN-US>10<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Future directions</span></a></p>

<p class=MsoBodyText><span lang=EN-US>A stackless implementation of the SGMLOP
module is under consideration. This leads to fast XML parsers, which are no longer
driven by callbacks into Python, but using coroutines and quick context
switches between instantiated frames. This parsing style may appear not only as
faster, but also as not less intuitive than callbacks. Tiny threads will be
implemented with Stackless Python and Continuation module. Generators and
coroutines will get direct support in the C code, after they have been
implemented in Python. Since their layout is not as obvious as for
continuations, we should play with different prototypes and choose what fits
best.</span></p>

<p class=H2><a name="_Toc470444080"><![if !supportLists]><span lang=EN-US>11<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Acknowledgements</span></a></p>

<p class=MsoBodyText><span lang=EN-US>I wish to thank all people who helped me
to turn this idea into reality. Special thanks apply to </span></p>

<p class=MsoBodyText align=center style='margin-top:6.0pt;text-align:center'><i><span
lang=EN-US>Andrea Tismer<br>
<span style="mso-spacerun: yes"> </span></span></i><span lang=EN-US>for
standing a husband who has been hacking day and night for half a year</span></p>

<p class=MsoBodyText align=center style='margin-top:6.0pt;text-align:center'><i><span
lang=EN-US>Jeremy Hylton<br>
</span></i><span lang=EN-US><span style="mso-spacerun: yes"> </span>who
provided outstanding help to give this paper its final touch</span></p>

<p class=MsoBodyText align=center style='margin-top:6.0pt;text-align:center'><i><span
lang=EN-US>Tim Peters<br>
<span style="mso-spacerun: yes"> </span></span></i><span lang=EN-US>for all his
input and involvement</span></p>

<p class=MsoBodyText align=center style='margin-top:6.0pt;text-align:center'><i><span
lang=EN-US>Sam Rushing<br>
</span></i><span lang=EN-US><span style="mso-spacerun: yes"> </span>for
inspiration and the reason at all</span></p>

<p class=MsoBodyText align=center style='margin-top:6.0pt;text-align:center'><i><span
lang=EN-US>Axel Roepke<br>
</span></i><span lang=EN-US><span style="mso-spacerun: yes"> </span>for long
and constructive discussions</span></p>

<p class=MsoBodyText align=center style='margin-top:6.0pt;text-align:center'><i><span
lang=EN-US>Jean-Claude Wippler<br>
</span></i><span lang=EN-US><span style="mso-spacerun: yes"> </span>for helping
to get the final bits of the very first version done.</span></p>

<p class=MsoBodyText align=center style='margin-top:6.0pt;text-align:center'><i><span
lang=EN-US>Guido<br>
</span></i><span lang=EN-US><span style="mso-spacerun: yes"> </span>for the
promised hug :-)</span></p>

<p class=MsoBodyText align=center style='margin-top:6.0pt;text-align:center'><i><span
lang=EN-US>Aaron Watters<br>
</span></i><span lang=EN-US><span style="mso-spacerun: yes"> </span>for being
my shepherd for this paper. Actually he never got something, but I hacked on my
code since he suggested &quot;meaty examples&quot;</span></p>

<p class=MsoBodyText align=center style='margin-top:6.0pt;text-align:center'><i><span
lang=EN-US>Francois Ladouceur<br>
</span></i><span lang=EN-US><span style="mso-spacerun: yes"> </span>for the
proofreading, which didn't happen for the same reasons </span><span lang=EN-US
style='font-family:Wingdings;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-char-type:symbol;mso-symbol-font-family:
Wingdings'><span style='mso-char-type:symbol;mso-symbol-font-family:Wingdings'>J</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=H2 style='margin:0cm;margin-bottom:.0001pt;text-indent:0cm;mso-list:
none;tab-stops:32.25pt'><a name="_Toc470444081"><span lang=EN-US>References</span></a></p>

<p class=Referenz><![if !supportLists]><span lang=EN-US>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Richard Kelsey, William Clinger, And Jonathan Rees (Editors), <i>Revised^5
Report on the Algorithmic Language Scheme</i>, <a
href="http://www.swiss.ai.mit.edu/~jaffer/r5rs_toc.html">http://www.swiss.ai.mit.edu/~jaffer/r5rs_toc.html</a>,
February 1998</span></p>

<p class=Referenz><a name="_Ref469381970"></a><a name="_Ref467579529"><span
style='mso-bookmark:_Ref469381970'><![if !supportLists]><span lang=EN-US>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Tim Peters, <i>Coroutines in Python</i>, </span></span></a><a
href="http://www.pns.cc/stackless/coroutines.tim.peters.html"><span
style='mso-bookmark:_Ref467579529'><span style='mso-bookmark:_Ref469381970'><span
lang=EN-US>http://www.pns.cc/stackless/coroutines.tim.peters.html</span></span></span><span
style='mso-bookmark:_Ref467579529'><span style='mso-bookmark:_Ref469381970'></span></span></a><span
style='mso-bookmark:_Ref467579529'><span style='mso-bookmark:_Ref469381970'><span
lang=EN-US>, May 1994</span></span></span></p>

<p class=Referenz><span style='mso-bookmark:_Ref467579529'><![if !supportLists]><span
lang=EN-US>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Guido van Rossum, <i>[Python-Dev] 'stackless'
python?</i>, </span></span><a
href="http://www.pns.cc/stackless/continuations.guido.van.rossum.html"><span
style='mso-bookmark:_Ref467579529'><span lang=EN-US>http://www.pns.cc/stackless/continuations.guido.van.rossum.html</span></span><span
style='mso-bookmark:_Ref467579529'></span></a><span style='mso-bookmark:_Ref467579529'><span
lang=EN-US>, May 1999</span></span></p>

<p class=Referenz><span style='mso-bookmark:_Ref467579529'><![if !supportLists]><span
lang=EN-US>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Sam Rushing, <i>Coroutines In Python, </i></span></span><a
href="http://www.nightmare.com/~rushing/copython/index.html"><span
style='mso-bookmark:_Ref467579529'><span lang=EN-US>http://www.nightmare.com/~rushing/copython/index.html</span></span><span
style='mso-bookmark:_Ref467579529'></span></a><span style='mso-bookmark:_Ref467579529'><i><span
lang=EN-US>,</span></i><span lang=EN-US> Nov. 1999</span></span></p>

<span style='mso-bookmark:_Ref467579529'></span>

<p class=Referenz><a name="_Ref469481502"><![if !supportLists]><span
lang=EN-US>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Dorai Sitaram, <i>Teach Yourself
Scheme in Fixnum Days</i>, </span></a><a
href="http://www.cs.rice.edu/~dorai/t-y-scheme/"><span style='mso-bookmark:
_Ref469481502'><span lang=EN-US>http://www.cs.rice.edu/~dorai/t-y-scheme/</span></span><span
style='mso-bookmark:_Ref469481502'></span></a><span style='mso-bookmark:_Ref469481502'><span
lang=EN-US>, September 1998</span></span></p>

<p class=Referenz><a name="_Ref469481504"><![if !supportLists]><span
lang=EN-US>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Andrew W. Appel, <i>Compiling with
Continuations</i>, Cambridge University Press, 1992</span></a></p>

<p class=Referenz><span style='mso-bookmark:_Ref469481504'><![if !supportLists]><span
lang=EN-US>7.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Daniel P. Friedman, Mitchell Wand, and
Christopher T. Haynes, <i>Essentials of Programming Languages</i>, MIT Press,
199</span></span><span lang=EN-US>3</span></p>

<p class=Referenz><![if !supportLists]><span lang=EN-US>8.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
lang=EN-US>Christopher T. Haynes, Daniel P. Friedman, and Mitchell Wand, <i>Continuations
and Coroutines</i>,<span style="mso-spacerun: yes">  </span>Computer Languages,
11(3/4): 143-153, 1986.</span></p>

<p class=Referenz><a name="_Ref470096245"><![if !supportLists]><span
lang=EN-US>9.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US>Guy L. Steele. <i>Rabbit: a compiler
for Scheme</i>, MIT AI Tech Report 474. 1978.</span></a></p>

<p class=Referenz><a name="_Ref470096246"><![if !supportLists]><span
lang=EN-US>10.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><![endif]><span
lang=EN-US>Strachey and Wadsworth, <i>Continuations: A mathematical semantics
which can deal with full jumps</i>.<span style="mso-spacerun: yes"> 
</span>Technical monograph PRG-11, Programming Research Group, Oxford, 1974.</span></a></p>

<p class=H2 style='margin-left:0cm;text-indent:0cm;mso-list:none;tab-stops:
32.25pt'><a name="_Toc470444082"><span lang=EN-US>Appendix: Code Examples</span></a></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<table border=1 cellspacing=0 cellpadding=0 width="101%" style='width:101.38%;
 margin-left:-3.25pt;border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0cm 3.5pt 0cm 3.5pt'>
 <tr>
  <td width="50%" valign=top style='width:50.38%;border:solid windowtext .5pt;
  padding:0cm 0cm 0cm 0cm'>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>/* Backward compatible interface */<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>PyObject *<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>PyEval_EvalCode(co, globals, locals)<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyCodeObject *co;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *globals;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *locals;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>{<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyFrameObject *frame;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes"> 
  </span>frame=eval_code2_setup(co,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>globals,
  locals,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>(PyObject
  **)NULL, 0,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>(PyObject
  **)NULL, 0,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>(PyObject
  **)NULL, 0,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>(PyObject
  *)NULL);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>if (frame != NULL)<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>return
  PyEval_Frame_Dispatch();<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>else<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>return NULL;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>PyObject *<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>PyEval_EvalCode_nr(co, globals, locals)<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyCodeObject *co;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *globals;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *locals;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>{<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyFrameObject *frame;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>frame =
  eval_code2_setup(co,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>globals,
  locals,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>(PyObject
  **)NULL, 0,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>(PyObject
  **)NULL, 0,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>(PyObject
  **)NULL, 0,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>(PyObject
  *)NULL);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>if (frame != NULL)<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>return
  Py_UnwindToken;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>else<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>return NULL;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>}</span></p>
  </td>
  <td width="49%" valign=top style='width:49.62%;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0cm 0cm 0cm 0cm'>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>PyObject *<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>PyEval_CallObjectWithKeywords(func, arg, kw)<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *func;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *arg;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *kw;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>{<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *retval =<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">   
  </span>PyEval_CallObjectWithKeywords_nr(<o:p></o:p></span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid'><span lang=EN-US style='mso-bidi-font-size:
  7.5pt;mso-bidi-font-family:"Courier New"'><span style="mso-spacerun:
  yes">        </span>func, arg, kw);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>if (retval ==
  Py_UnwindToken) {<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>retval =
  PyEval_Frame_Dispatch();<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>return retval;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>PyObject *<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>PyEval_CallObjectWithKeywords_nr(func, arg, kw)<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *func;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *arg;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>PyObject *kw;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>{<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>ternaryfunc call;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>PyObject *result;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>if (arg == NULL)<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>arg =
  PyTuple_New(0);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>else if
  (!PyTuple_Check(arg)) {<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">   
  </span>PyErr_SetString(PyExc_TypeError,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>&quot;argument
  list must be a tuple&quot;);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span><span
  style="mso-spacerun: yes">  </span>return NULL;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span>else<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>...</span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>...</span></p>
  <p class=MsoBodyText style='margin-top:0cm;mso-pagination:lines-together;
  page-break-after:avoid'><![if !supportEmptyParas]>&nbsp;<![endif]><span
  lang=EN-US style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoCaption><a name="_Toc470444089"><span lang=EN-US>Figure <span
style='mso-field-code:"SEQ Figure \\* ARABIC"'>7</span>:
PyEval_CallObjectWithKeywords</span></a></p>

<table border=1 cellspacing=0 cellpadding=0 width="101%" style='width:101.38%;
 margin-left:-3.25pt;border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0cm 3.5pt 0cm 3.5pt'>
 <tr>
  <td width="50%" valign=top style='width:50.38%;border:solid windowtext .5pt;
  padding:0cm 0cm 0cm 0cm'>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span class=CITE><span lang=EN-US style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>old case CALL_FUNCTION:<o:p></o:p></span></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>{<o:p></o:p></span></p>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>[
  declarations and initializations ]</span><span lang=EN-US style='font-size:
  10.0pt'><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>if
  (PyFunction_Check(func)) {<o:p></o:p></span></p>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>[
  prepare Python function call ]</span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span></span><span
  lang=FR style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:"Courier New";
  mso-ansi-language:FR'>x = eval_code2(<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=FR style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New";mso-ansi-language:FR'><span style="mso-spacerun: yes">         
  </span></span><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'>(PyCodeObject *)co, globals, <o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">          </span>(PyObject
  *)NULL, stack_pointer-n, na,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">         
  </span>stack_pointer-2*nk, nk, d, nd, class);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>else {<o:p></o:p></span></p>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>[
  prepare builtin function call ]</span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>x =
  PyEval_CallObjectWithKeywords(<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">       </span><span
  style="mso-spacerun: yes">   </span>func, args, kwdict);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">       
  </span>Py_DECREF(args);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">       
  </span>Py_XDECREF(kwdict);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>Py_DECREF(func);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>while
  (stack_pointer &gt; pfunc) {<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>w = POP();<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>Py_DECREF(w);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>PUSH(x);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>if (x != NULL)
  continue;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>break;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span><span
  style="mso-spacerun: yes">  </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span class=CITE><span lang=EN-US style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>old function call_function()<o:p></o:p></span></span></p>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>[
  preparations ]</span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>result = eval_code2(</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>(PyCodeObject
  *)PyFunction_GetCode(func),</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>PyFunction_GetGlobals(func),<o:p></o:p></span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>(PyObject *)NULL,</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>&amp;PyTuple_GET_ITEM(arg, 0),
  PyTuple_Size(arg),</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>k, nk,</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>d, nd,</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>class);</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>Py_DECREF(arg);</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>PyMem_XDEL(k);</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>return result;</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'>}</span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span class=CITE><span lang=EN-US style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>new function call_function()<o:p></o:p></span></span></p>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>[
  preparations ]</span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'>f
  = eval_code2_setup(</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>(PyCodeObject
  *)PyFunction_GetCode(func),</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>PyFunction_GetGlobals(func), <o:p></o:p></span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">   </span>(PyObject *)NULL,</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>&amp;PyTuple_GET_ITEM(arg, 0),
  PyTuple_Size(arg),</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>k, nk,</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>d, nd,</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>class);</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>if (f != NULL) {</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>f-&gt;f_hold_ref = arg;<span
  style="mso-spacerun: yes">  </span>/* the decref will</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">              </span>happen on frame disposal */</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">    </span>result = Py_UnwindToken;</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>}</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>else result = NULL;</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>PyMem_XDEL(k);</span></p>
  <p class=Preformatted style='margin-left:0cm;text-indent:0cm;mso-pagination:
  lines-together;page-break-after:avoid;background:white;mso-shading:white;
  mso-pattern:solid white'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'><span
  style="mso-spacerun: yes">  </span>return result;</span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-family:"Courier New"'>}</span></p>
  </td>
  <td width="49%" valign=top style='width:49.62%;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0cm 0cm 0cm 0cm'>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span class=CITE><span lang=EN-US style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>new case CALL_FUNCTION:<o:p></o:p></span></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>{<o:p></o:p></span></p>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>[
  declarations and initializations ]</span><span lang=EN-US style='font-size:
  10.0pt'><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>if
  (PyFunction_Check(func)) {<o:p></o:p></span></p>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>[
  prepare Python function call ]</span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>x = (PyObject
  *)eval_code2_setup(<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">          </span>(PyCodeObject
  *)co, globals, <o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">          </span>(PyObject
  *)NULL, stack_pointer-n, na,<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">         
  </span>stack_pointer-2*nk, nk, d, nd, class);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>if (x != NULL) <o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">          </span>x =
  Py_UnwindToken;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>else {<o:p></o:p></span></p>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>[
  prepare builtin function call ]</span><span lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">       
  </span>f-&gt;f_stackpointer = stack_pointer;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>x = PyEval_CallObjectWithKeywords_nr(<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">          </span>func, args,
  kwdict);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">       
  </span>Py_DECREF(args);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">       
  </span>Py_XDECREF(kwdict);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>Py_DECREF(func);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>while
  (stack_pointer &gt; pfunc) {<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>w = POP();<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>Py_DECREF(w);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>/* stackless postprocessing
  */<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">  </span><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>if (x ==
  Py_UnwindToken) {<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>why = WHY_CALL;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>break;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>else if
  (f-&gt;f_callguard != NULL) {<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>/* also protect
  normal calls 990712 */<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">       
  </span>f-&gt;f_stackpointer = stack_pointer;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>f-&gt;f_next_instr
  = next_instr;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">       
  </span>f-&gt;f_temp_val = x;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">       
  </span>f-&gt;f_statusflags |= WANTS_RETURN_VALUE;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>err =
  f-&gt;f_callguard(f, 2);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>if(err) {<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">          </span>if(err==-42)
  {<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">            </span>return
  Py_UnwindToken;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">          </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">          </span>else<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">            </span>break;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">        </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">       
  </span>f-&gt;f_statusflags &amp;= ~WANTS_RETURN_VALUE;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>PUSH(x);<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>if (x != NULL)
  continue;<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">      </span>break;</span><span
  lang=EN-US> </span><span lang=EN-US style='mso-bidi-font-size:7.5pt;
  mso-bidi-font-family:"Courier New"'><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">    </span>}<o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><span style="mso-spacerun: yes">   </span><span
  style="mso-spacerun: yes"> </span><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US style='mso-bidi-font-size:7.5pt;mso-bidi-font-family:
  "Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=Preformatted style='mso-pagination:lines-together;page-break-after:
  avoid'><span lang=EN-US><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
  <p class=MsoBodyText align=center style='text-align:center'><![if !supportEmptyParas]>&nbsp;<![endif]><span
  lang=EN-US><o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoCaption><a name="_Ref470105995"></a><a name="_Toc470444090"><span
style='mso-bookmark:_Ref470105995'><span lang=EN-US>Figure <span
style='mso-field-code:"SEQ Figure \\* ARABIC"'>8</span></span></span><span
lang=EN-US>: CALL_FUNCTION</span></a></p>

<p class=MsoNormal align=left style='text-align:left;page-break-after:avoid;
background:white;mso-shading:white;mso-pattern:solid white'><span
style='mso-ansi-language:DE'><!--[if gte vml 1]><v:shape id="_x0000_i1038"
 type="#_x0000_t75" style='width:162pt;height:162pt'>
 <v:imagedata src="./spcpaper-Dateien/image013.jpg" o:title="kaa"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=216 height=216
src="./spcpaper-Dateien/image014.jpg" v:shapes="_x0000_i1038"><![endif]></span></p>

<p class=MsoCaption align=left style='text-align:left'><a name="_Toc470444091"><span
lang=EN-US>Figure <span style='mso-field-code:"SEQ Figure \\* ARABIC"'>9</span>:
Stacklesssss Python</span></a></p>

<p class=MsoNormal align=left style='text-align:left;background:white;
mso-shading:white;mso-pattern:solid white'><span lang=EN-US style='font-size:
10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;background:white;
mso-shading:white;mso-pattern:solid white'><span lang=EN-US>Source code and a
Python 1.5.2 compatible build are available at:</span><span lang=EN-US
style='font-size:10.0pt'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;background:white;
mso-shading:white;mso-pattern:solid white'><span class=WW-Hyperlink><span
lang=EN-US style='font-size:10.0pt'>http://www.tismer.com/research/stackless</span></span><span
lang=EN-US style='font-size:10.0pt'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

</div>

</body>

</html>
