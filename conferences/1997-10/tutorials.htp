Title: Tutorial Program, Sixth International Python Conference
Author: ipc6@python.org

<H1>Tutorial Program</H1>

<P>There are four tutorial tracks.  Each track has a morning and an
afternoon session.  Each session lasts about 3.5 hours with a 15
minute break in the middle.  Exact break times are at the tutor's
discretion.

<P>Breaks and lunch are
catered, and tutorial participants are invited to the reception in the
evening.  Unfortunately, our logistical set-up does not allow
participants to have hands-on experience; however, copies of the
presenters' annotated slides will be handed out, so you won't have to
take notes.  You can switch tracks between sessions.

<P><B>Fees:</B> Early registration for PSA and Usenix members is $200
for a full day of tutorials (one morning and one afternoon session).
Add $50 if your payment is received after September 12,
and if you are not a PSA 
or Usenix member at the time of the conference, add another $50 to
join the PSA or renew your membership ($25 if you are a full time
student).

<H4>Program Changes</H4>

<P>There have been a few changes (for the better!) in the program
since it was first published:

<P>

<UL>

<LI> The COM tutorial will be taught jointly by Greg Stein and Mark
Hammond.

<LI> The Python/C Integration tutorial (formerly Python/C API) will be
taught by Mark Lutz instead of Guido van Rossum.

</UL>

<P>

<HR>

<H3>Schedule</H3>


<table>

<tr>
	<td>8.00 am
	<td>Registration opens (closes at 5.00 pm)

<tr>
	<td>8.30 am
	<td><i>breakfast</i>

<tr>
	<td>9.00 am
	<td>Morming Sessions (see below);
	    15 minute break at tutor's discretion

<tr>
	<td>12.30 pm
	<td><i>lunch</i>

<tr>
	<td>2.00 pm
	<td>Afternoon Sessions (see below);
	    15 minute break at tutor's discretion

<tr>

	<td>5.30 pm
	<td><i>free time</i>

<tr>

	<td>6.00 pm
	<td><b>Reception for all conference participants</b>

<tr>
	<td>8.00 pm
	<td><i>dinner (on your own)</i>
	
</table>

<P>

<HR>


<H3>Track 1: Introduction and COM</H3>

<P>

<LI>Morning session (9:00-12:30): <b>Introduction to Python</b>
	    (<A HREF="#dubois">abstract</A>)
<BR>Tutor: <A HREF="http://dubois.simplenet.com/paul" >Paul Dubois</A>, LLNL

<P>

<LI>Afternoon session (2:00-5:30): <b>Python and COM (Microsoft's Component Object Model)</b>
	    (<A HREF="#com">abstract</A>)
<BR>Tutors: Greg Stein, Microsoft; and Mark Hammond, Australia

<P>

<H3>Track 2: Numeric and Scientific Computing using Python</H3>

<P>

<LI>Morning session (9:00-12:30): <b>Numeric Python</b>
	    (<A HREF="#numeric">abstract</A>)
<BR>Tutor: <A HREF="http://starship.skyport.net/~da"
>David Ascher</A>, Brown University

<P>

<LI>Afternoon session (2:00-5:30): <b>Scientific Computing with Python</b>
	    (<A HREF="#scientific">abstract</A>)
<BR>Tutor: <A
HREF="http://starship.skyport.net/crew/hinsen/" >Konrad
Hinsen</A>, Institute for Structural Biology (CEA/CNRS), France

<P>

<H3>Track 3: Extending and Embedding Python</H3>

<P>

<LI>Morning session (9:00-12:30): <b>Python/C Integration</b>
	    (<a href="#lutz">abstract</a>)
<BR>Tutor: <A HREF="http://shell.rmi.net/~lutz/">Mark Lutz</A>, Coral Systems

<P>

<LI>Afternoon session (2:00-5:30): <b>Python-C/C++ Integration with SWIG</b>
	    (<a href="#swig">abstract</a>)
<BR>Tutor: <a href="http://www.cs.utah.edu/~beazley">David
	      Beazley</a>, University of Utah 

<P>

<H3>Track 4: Web server programming in Python</H3>

<P>

<LI>Morning session (9:00-12:30): <b>Introduction to CGI programming in Python</b>
	    (<a href="#watters">abstract</a>)
<BR>Tutor: <A href="http://starship.skyport.net/crew/aaron_watters">Aaron
 Watters</A>, Lucent Technologies

<P>

<LI>Afternoon session (2:00-5:30): <b>Beyond CGI</b>
	    (<a href="#fulton">abstract</a>)
<BR>Tutor: <A HREF="http://www.digicool.com/jim/">Jim Fulton</A>,
Digital Creations

<P>


<HR>


<H1>Session Abstracts</H1>

<P><i>(More abstracts will be added as they become available.)</i>


<H3><A NAME=numeric>Numeric Python</A></H3>

<P>Tutor: <A HREF="http://starship.skyport.net/~da"
>David Ascher</A>, Brown University

<P>This tutorial will introduce the <A
HREF="http://www.sls.lcs.mit.edu/jjh/numpy/">Numeric extension</A> to
Python, developed by Jim Hugunin with the support of the <A
HREF="../../sigs/matrix-sig/">Matrix SIG</A>.  This extension provides a
new high performance multidimensional array type and lots of related
tools which allow the use of Python to do serious number crunching,
while still keeping the `feel' of Python.  This extension is currently
in use in vision research, speech recognition, computational
chemistry, physics, financial analysis, etc. The tutorial will provide
an introduction to this new set of tools, common usage patterns and
some of the more commonly used extension packages. While I will assume
that the audience knows at least some Python, novices should be able
to follow with no problems.


<H3><A NAME="scientific">Scientific Computing with Python</A></H3>

<P>Tutor: <A
HREF="http://starship.skyport.net/crew/hinsen/" >Konrad
Hinsen</A>, Institute for Structural Biology (CEA/CNRS), France

<P>This tutorial will show how Python can be used effectively for
common operations in scientific computing, such as data processing and
analysis, data management, visualization, algorithm prototyping, file
format conversion, interfacing to and between legacy programs, etc. A
basic knowledge of Python will be assumed, but general programming
experience should be sufficient to follow the presentation.
Participants with an interest in data processing and number crunching
should also sign up for the tutorial on the numerics extension; the
material presented there will not be repeated.


<H3><a name="swig">Python-C/C++ Integration with SWIG</a></H3>

    <p>
      Tutor: <a href="http://www.cs.utah.edu/~beazley">David M.
	Beazley</a>, University of Utah

    <p>
      This tutorial will show how Python and C/C++ can be easily and
      effectively combined using SWIG and other automated interface
      generation tools.  Python and SWIG offer C/C++ programmers a
      powerful set of tools for building extensible applications,
      working with legacy codes, rapid prototyping, debugging, and
      developing cross platform applications.  They also offer Python
      programmers a mechanism for implementing performance critical
      functions in C or C++.  Currently, SWIG is being used in a wide
      variety of applications ranging from scientific, financial,
      graphics, databases, visualization, and CAD.  The tutorial will
      cover the basics of using SWIG, advanced Python features,
      customization, interface building strategies, code design,
      portability issues, and limitations.  Examples will be given for
      both Unix and Windows-NT.  Participants should have a good grasp
      of C (or C++) programming, be reasonably familiar with C/C++
      compilation tools (compilers, linkers, makefiles, etc...), and
      have a basic knowledge of Python.  Participants may also want to
      sign up for the "Python/C integration" tutorial or the "Introduction to
      Python" tutorial.

<H3><a name="lutz">Python/C Integration</A></H3>

<P>Tutor: <A HREF="http://shell.rmi.net/~lutz/">Mark Lutz</A>, Coral Systems

<P>In this tutorial, students will be introduced to Python/C integration
fundamentals.  Although Python is interesting all by itself, its role
as a scripting language owes as much to its integration tools, as to
the language.  This tutorial's goal is to give you the basic skills
needed to start deploying Python as a scripting tool in larger systems.
 
<P>In general terms, Python programs can be both:

<UL>
<LI> Extended with (call to) components written in a C-like language
<LI> Embedded in (called from) programs written in a language like C
</UL>

<P>Extending is commonly used to integrate libraries and optimize systems,
while embedding supports customizations, callback schemes, and so on.
The tutorial will show how to implement both integration modes, and
combine them for each application's unique requirements.  Some of the
topics this tutorial will discuss include:
 
<UL>
<LI> Writing C extension modules
<LI> Writing C extension types
<LI> Calling Python objects from C
<LI> Running Python code strings from C
<LI> Registering code through an extension
<LI> Linking and binding techniques
<LI> Integration issues under C++
</UL>
 
and all the associated API details: data conversions, error handling,
etc.  We'll also take a brief look at automated integration tools.
 
<P>Prerequisites: This tutorial assumes students have a basic understanding
of C development.  Ideally, students will also be acquainted with Python
language basics (some examples include Python code), but this is optional.
Finally, students are encouraged to also sign up for the SWIG tutorial in
the afternoon; since SWIG automates many of the tasks we'll study, in some
ways it is a continuation of the ideas we'll discuss in the morning.

<H3><a name="watters">Introduction to CGI programming in Python</A></H3>

<P>Tutor: <A href="http://starship.skyport.net/crew/aaron_watters"
>Aaron Watters</A>, Lucent Technologies

<P>This tutorial will introduce the basic concepts of the Hypertext
Transfer Protocol Common Gateway Interface programming (HTTP CGI
programming).  CGI programming is the mechanism that supports many
dynamic World Wide Web interactions such as query engines and forms.
The tutorial will cover the basics of the protocol, as well as how to
implement and test CGI processing programs using Python and its
standard libraries.  Advanced topics such as "cookies", file upload,
authentication, redirects, and cross-platform considerations will be
covered as well.

<H3><A NAME=dubois>Introduction to Python</A></H3>

<p>Tutor: <a href="http://dubois.simplenet.com/paul">Paul F.
Dubois</a>, <a href="http://www.llnl.gov">Lawrence Livermore
National Laboratory</a> </p>

<h4>Learning Python </h4>

<menu>
    <li>How to get it, install it, and learn about it. </li>
</menu>

<h4>Quick Tour </h4>

<menu>
    <li>Programs </li>
    <li>Modules </li>
    <li>Classes </li>
    <li>Procedures </li>
    <li>Polymorphism </li>
    <li>Statements </li>
    <li>Basic types </li>
    <li>Extension objects </li>
</menu>

<h4>But wait, there's more...</h4>

<menu>
    <li>A survey of the Python library </li>
    <li>The numerical extension </li>
</menu>

<h4>Complete Examples </h4>

<menu>
    <li>History Package </li>
    <li>Numerical example </li>
</menu>

<P>

<address>
    <a href="mailto:dubois1@llnl.gov">dubois1@llnl.gov</a> 
</address>


<H3><A NAME=com>Python and COM (Microsoft's Component Object Model)</A></H3>

<P>Tutors: Greg Stein, Microsoft; and Mark Hammond, Australia

<P>This tutorial will cover the basics of COM, and how it relates to Python.
The core COM concepts will be discussed, and the architecture of the core
Python/COM support discussed in detail.  The supporting Python library, and
"COM Extension" modules (such as Active Scripting or MAPI), along with how
SWIG can be used, will also be covered.  In addition, practical examples of
using COM objects with Python (using Microsoft Office), and implementing COM
objects using Python (and using them from VB) will be shown.

<H3><A NAME=fulton>Beyond CGI</A></H3>

<P>Tutor: <A HREF="http://www.digicool.com/jim/">Jim Fulton</A>,
Digital Creations

<P>This tutorial will present an overview of options for server-side
web programming other than CGI and will provide a detailed tutorial on
the tools collectively known as "Bobo".  The tutorial will cover the
following topics:

<H4>Background</H4>

  <UL>
  <LI>Overview of CGI, what's good, what's bad,
  <LI>Overview of CGI alternatives.
  </UL>

<H4>Publishing objects on the web using Bobo</H4>

  <UL>
  <LI>The Python Object Publisher, an HTTP ORB for Python,
  <LI>Creating dynamic HTML pages with Document Templates
  <LI>Creating persistent applications with a pickle-based 
      persistent object system.
  </UL>

<!--This P tag must be the last thing in the file-->
<P>
